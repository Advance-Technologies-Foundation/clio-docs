<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Terrasoft.IO</name>
    </assembly>
    <members>
        <member name="T:Terrasoft.IO.IDirectory">
            <summary>
            Provides methods for working with directories.
            </summary>
        </member>
        <member name="M:Terrasoft.IO.IDirectory.CreateDirectory(System.String)">
            <summary>
            Creates all directories and subdirectories in the specified path unless they already exist.
            </summary>
            <param name="path">The directory to create.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><para><paramref name="path"/> is a zero-length string, contains
            only white space, or contains one or more invalid characters.</para>
            <para>-or-</para>
            <para><paramref name="path"/> is prefixed with, or contains, only a colon character (:).</para></exception>
            <exception cref="T:System.IO.IOException"><para>The directory specified by path is a file.</para>
            <para>-or-</para>
            <para>The network name is not known.</para></exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example,
            it is on an unmapped drive).</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> contains a colon character (:) that
            is not part of a drive label ("C:\").</exception>
        </member>
        <member name="M:Terrasoft.IO.IDirectory.Clear(System.String)">
            <summary>
            Deletes subdirectories and files in the directory.
            Resets ReadOnlyAttribute for files.
            Ensures all subdirectories is successfully deleted.
            </summary>
            <param name="path">The name of the directory to clear.</param>
            <remarks>
            The RemoveDirectory function marks a directory for deletion on close.
            Therefore, the directory is not removed until the last handle to the directory is closed.
            https://stackoverflow.com/q/24265481
            </remarks>
        </member>
        <member name="M:Terrasoft.IO.IDirectory.Delete(System.String)">
            <summary>
            Deletes an empty directory from a specified path.
            </summary>
            <param name="path">The name of the empty directory to remove.
            This directory must be writable and empty.</param>
            <exception cref="T:System.IO.IOException"><para>A file with the same name and location specified by
            <paramref name="path"/> exists.</para>
            <para>-or-</para>
            <para>The directory is the application's current working directory.</para>
            <para>-or-</para>
            <para>The directory specified by <paramref name="path"/> is not empty.</para>
            <para>-or-</para>
            <para>The directory is read-only or contains a read-only file.</para>
            <para>-or-</para>
            <para>The directory is being used by another process.</para></exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only
            white space, or contains one or more invalid characters.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><para><paramref name="path"/> does not exist or
            could not be found.</para>
            <para>-or-</para>
            <para>The specified path is invalid (for example, it is on an unmapped drive).</para></exception>
        </member>
        <member name="M:Terrasoft.IO.IDirectory.Delete(System.String,System.Boolean)">
            <summary>
            Deletes the specified directory and, if indicated, any subdirectories and files in the directory.
            </summary>
            <param name="path">The name of the empty directory to remove.</param>
            <param name="recursive"><c>true</c> to remove directories, subdirectories,
            and files in path; otherwise, <c>false</c>.</param>
            <exception cref="T:System.IO.IOException"><para>A file with the same name and location specified by
            <paramref name="path"/> exists.</para>
            <para>-or-</para>
            <para>The directory specified by <paramref name="path"/> is read-only, or <paramref name="recursive"/> is
            <c>false</c> and path is not an empty directory.</para>
            <para>-or-</para>
            <para>The directory is the application's current working directory.</para>
            <para>-or-</para>
            <para>The directory is read-only or contains a read-only file.</para>
            <para>-or-</para>
            <para>The directory is being used by another process.</para></exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only
            white space, or contains one or more invalid characters.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><para><paramref name="path"/> does not exist or
            could not be found.</para>
            <para>-or-</para>
            <para>The specified path is invalid (for example, it is on an unmapped drive).</para></exception>
        </member>
        <member name="M:Terrasoft.IO.IDirectory.SafeDelete(System.String)">
            <summary>
            Deletes the specified directory and any subdirectories and files in the directory.
            Resets ReadOnlyAttribute for files.
            Ensures directory and all subdirectories is successfully deleted.
            </summary>
            <param name="path">The name of the directory to remove.</param>
            <remarks>
            The RemoveDirectory function marks a directory for deletion on close.
            Therefore, the directory is not removed until the last handle to the directory is closed.
            https://stackoverflow.com/q/24265481
            </remarks>
        </member>
        <member name="M:Terrasoft.IO.IDirectory.EnumerateFileSystemEntries(System.String)">
            <summary>Returns an enumerable collection of file names and directory names in a specified path. </summary>
            <param name="path">The relative or absolute path to the directory to search.
            This string is not case-sensitive.</param>
            <returns>An enumerable collection of file-system entries in the directory specified
            by <paramref name="path" />.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="path " />is a zero-length string, contains only white space, or contains invalid
            characters. You can query for invalid characters by using the
            <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path" /> is <see langword="null" />. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            <paramref name="path" /> is invalid, such as referring to an unmapped drive. </exception>
            <exception cref="T:System.IO.IOException">
            <paramref name="path" /> is a file name.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed
            the system-defined maximum length. For example, on Windows-based platforms, paths must be less
            than 248 characters and file names must be less than 260 characters.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:Terrasoft.IO.IDirectory.Exists(System.String)">
            <summary>
            Determines whether the given path refers to an existing directory on file system.
            </summary>
            <param name="path">The path to test.</param>
            <returns><c>true</c> if path refers to an existing directory; <c>false</c> if the directory does not exist
            or an error occurs when trying to determine if the specified directory exists.</returns>
        </member>
        <member name="M:Terrasoft.IO.IDirectory.EnumerateFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of file names that match a search pattern in a specified path,
            and optionally searches subdirectories.</summary>
            <param name="path">The relative or absolute path to the directory to search.
            This string is not case-sensitive.</param>
            <param name="searchPattern">The search string to match against the names of files
            in <paramref name="path" />. This parameter can contain a combination of valid literal path
            and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. </param>
            <param name="searchOption">One of the enumeration values that specifies whether
            the search operation should include only the current directory or should include all subdirectories.
            The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly" />.</param>
            <returns>An enumerable collection of the full names (including paths) for the files
            in the directory specified by <paramref name="path" />
            and that match the specified search pattern and option.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="path " />is a zero-length string, contains only white space,
            or contains invalid characters. You can query for invalid characters by using
            the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.- or -<paramref name="searchPattern" />
            does not contain a valid pattern.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path" /> is null.-or-<paramref name="searchPattern" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            <paramref name="path" /> is invalid, such as referring to an unmapped drive. </exception>
            <exception cref="T:System.IO.IOException">
            <paramref name="path" /> is a file name.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name,
            or combined exceed the system-defined maximum length. For example, on Windows-based platforms,
            paths must be less than 248 characters and file names must be less than 260 characters.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have
            the required permission. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have
            the required permission.</exception>
        </member>
        <member name="M:Terrasoft.IO.IDirectory.GetCurrentDirectory">
            <summary>
            Gets the current working directory of the application.
            </summary>
            <returns>A string containing the path of the current working directory.</returns>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:Terrasoft.IO.IDirectory.GetDirectories(System.String)">
            <summary>
            Returns the names of subdirectories (including their paths) in the specified directory.
            </summary>
            <param name="path">The relative or absolute path to the directory to search.
            This string is not case-sensitive.</param>
            <returns>An array of the full names (including paths) of subdirectories in the specified path,
            or an empty array if no directories are found.</returns>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only
            white space, or contains one or more invalid characters.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.IOException"><paramref name="path"/> is a file name.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example,
            it is on an unmapped drive).</exception>
        </member>
        <member name="M:Terrasoft.IO.IDirectory.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets an array of directories matching the specified search pattern from the current directory, using a value
            to determine whether to search subdirectories.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against the names of subdirectories in path.
            This parameter can contain a combination of valid literal and wildcard characters, but doesn't support
            regular expressions.</param>
            <param name="searchOption">One of the SearchOption values that specifies whether the search operation should
            include all subdirectories or only the current directory.</param>
            <returns>An array of the full names (including paths) of the subdirectories that match the specified
            criteria, or an empty array if no directories are found.</returns>
            <remarks>The following wildcard specifiers are permitted in <paramref name="searchPattern"/>.
            * (asterisk) - Zero or more characters in that position.
            ? (question mark) - Zero or one character in that position.
            Characters other than the wildcard are literal characters. For example, the searchPattern string "*t"
            searches for all names in path ending with the letter "t". The searchPattern string "s*" searches for all
            names in path beginning with the letter "s". <paramref name="searchPattern"/> cannot end in two periods
            ("..") or contain two periods ("..") followed by '/' or '\', nor can it contain any invalid characters.
            </remarks>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.
            </exception>
            <exception cref="T:System.ArgumentException"><para><paramref name="path"/> is a zero-length string, contains
            only white space, or contains one or more invalid characters.</para>
            <para>-or-</para>
            <para><paramref name="searchPattern"/> does not contain a valid pattern.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> or <paramref name="searchPattern"/>
            is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption"/> is not a valid
            <see cref="T:System.IO.SearchOption"/> value.</exception>
            <exception cref="T:System.IO.IOException"><paramref name="path"/> is a file name.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example,
            it is on an unmapped drive).</exception>
        </member>
        <member name="M:Terrasoft.IO.IDirectory.GetDirectoryInfo(System.String)">
            <summary>
            Returns instance of <see cref="T:System.IO.DirectoryInfo"/>.
            </summary>
            <param name="path">Path to directory.</param>
        </member>
        <member name="M:Terrasoft.IO.IDirectory.GetFiles(System.String)">
            <summary>
            Returns full path names of the files in the specified directory.
            </summary>
            <param name="path">The relative or absolute path to the directory to search. This string is not
            case-sensitive.</param>
            <returns>
            Array of the full-path file names in the specified directory. Returns empty array if no files found.
            </returns>
            <exception cref="T:System.IO.IOException"><para><paramref name="path"/> is a file name.</para>
            <para>-or-</para>
            <para>A network error has occurred.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only
            white space, or contains one or more invalid characters.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example,
            it is on an unmapped drive).</exception>
        </member>
        <member name="M:Terrasoft.IO.IDirectory.GetFiles(System.String,System.String)">
            <summary>
            Returns full path names of the files that match the specified search pattern in the specified directory.
            </summary>
            <param name="path">The relative or absolute path to the directory to search. This string is not
            case-sensitive.</param>
            <param name="searchPattern">The search string to match against the names of files in
            <paramref name="path"/>. This parameter can contain a combination of valid literal path and
            wildcard (* and ?) characters, but doesn't support regular expressions.</param>
            <returns> An array of the full-path file names in the specified directory that match the specified search
            pattern or an empty array if no files found.</returns>
            <remarks>The following wildcard specifiers are permitted in <paramref name="searchPattern"/>.
            * (asterisk) - Zero or more characters in that position.
            ? (question mark) - Zero or one character in that position.
            Characters other than the wildcard are literal characters. For example, the searchPattern string "*t"
            searches for all names in path ending with the letter "t". The searchPattern string "s*" searches for all
            names in path beginning with the letter "s". <paramref name="searchPattern"/> cannot end in two periods
            ("..") or contain two periods ("..") followed by '/' or '\', nor can it contain any invalid characters.
            </remarks>
            <exception cref="T:System.IO.IOException"><para><paramref name="path"/> is a file name.</para>
            <para>-or-</para>
            <para>A network error has occurred.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.
            </exception>
            <exception cref="T:System.ArgumentException"><para><paramref name="path"/> is a zero-length string, contains
            only white space, or contains one or more invalid characters.</para>
            <para>-or-</para>
            <para><paramref name="searchPattern"/> does not contain a valid pattern.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> or <paramref name="searchPattern"/>
            is <c>null</c>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is not found or invalid
            (for example, it is on an unmapped drive).</exception>
        </member>
        <member name="M:Terrasoft.IO.IDirectory.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Returns full path names of the files that match the specified search pattern in the specified directory,
            using a value to determine whether to search subdirectories.
            </summary>
            <param name="path">The relative or absolute path to the directory to search. This string is not
            case-sensitive.</param>
            <param name="searchPattern">The search string to match against the names of files in
            <paramref name="path"/>. This parameter can contain a combination of valid literal path and
            wildcard (* and ?) characters, but doesn't support regular expressions.</param>
            <param name="searchOption">One of the enumeration values that specifies whether the search operation should
            include all subdirectories or only the current directory.</param>
            <returns> An array of the full-path file names in the specified directory that match the specified search
            pattern and option or an empty array if no files found.</returns>
            <remarks>The following wildcard specifiers are permitted in <paramref name="searchPattern"/>.
            * (asterisk) - Zero or more characters in that position.
            ? (question mark) - Zero or one character in that position.
            Characters other than the wildcard are literal characters. For example, the searchPattern string "*t"
            searches for all names in path ending with the letter "t". The searchPattern string "s*" searches for all
            names in path beginning with the letter "s". <paramref name="searchPattern"/> cannot end in two periods
            ("..") or contain two periods ("..") followed by '/' or '\', nor can it contain any invalid characters.
            </remarks>
            <exception cref="T:System.IO.IOException"><para><paramref name="path"/> is a file name.</para>
            <para>-or-</para>
            <para>A network error has occurred.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.
            </exception>
            <exception cref="T:System.ArgumentException"><para><paramref name="path"/> is a zero-length string, contains
            only white space, or contains one or more invalid characters.</para>
            <para>-or-</para>
            <para><paramref name="searchPattern"/> does not contain a valid pattern.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> or <paramref name="searchPattern"/>
            is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption"/> is not a valid
            <see cref="T:System.IO.SearchOption"/> value.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is not found or invalid
            (for example, it is on an unmapped drive).</exception>
        </member>
        <member name="M:Terrasoft.IO.IDirectory.Move(System.String,System.String)">
            <summary>
            Moves a file or a directory and its contents to a new location.
            </summary>
            <param name="sourceDirName">The path of the file or directory to move.</param>
            <param name="destDirName">The path to the new location for <paramref name="sourceDirName"/>.
            If <paramref name="sourceDirName"/> is a file, then <paramref name="destDirName"/> must also be a file
            name.</param>
            <exception cref="T:System.IO.IOException"><para>An attempt was made to move a directory to a different
            volume.</para>
            <para>-or-</para>
            <para><paramref name="destDirName"/> already exists.</para>
            <para>-or-</para>
            <para>The <paramref name="sourceDirName"/> and <paramref name="destDirName"/> parameters refer to the same
            file or directory.</para>
            <para>-or-</para>
            <para>The directory or a file within it is being used by another process.</para></exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="sourceDirName"/> or
            <paramref name="destDirName"/> is a zero-length string, contains only white space, or contains one or more
            invalid characters.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourceDirName"/> or
            <paramref name="destDirName"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is not found or invalid
            (for example, it is on an unmapped drive).</exception>
        </member>
        <member name="M:Terrasoft.IO.IDirectory.SetCurrentDirectory(System.String)">
            <summary>
            Sets the application's current working directory to the specified directory.
            </summary>
            <param name="path">The path to which the current working directory is set.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only
            white space, or contains one or more invalid characters.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission
            to access unmanaged code.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The specified path was not found.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified directory was not found.</exception>
        </member>
        <member name="M:Terrasoft.IO.IDirectory.CreateOrReplaceDirectory(System.String)">
            <summary>
            Deletes the specified directory and any subdirectories and files in the directory and creates
            an empty directory instead.
            </summary>
            <param name="path">The path to the directory.</param>
        </member>
        <member name="T:Terrasoft.IO.IDirectoryInfo">
            <summary>
            Exposes instance methods for creating, moving, and enumerating through directories and subdirectories. 
            This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Terrasoft.IO.IDirectoryInfo.EnumerateDirectories(System.String,System.IO.SearchOption)">
            <summary>
            Returns an enumerable collection of directory information that matches a specified search pattern and 
            search subdirectory option.
            </summary>
            <param name="searchPattern">The search string to match against the names of directories. 
            This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, 
            but it doesn't support regular expressions. The default pattern is "*", which returns all files.</param>
            <param name="searchOption">One of the enumeration values that specifies whether the search operation 
            should include only the current directory or all subdirectories. 
            The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.</param>
            <returns>An enumerable collection of directories that matches searchPattern and searchOption.</returns>
            <remarks>The following wildcard specifiers are permitted in <paramref name="searchPattern"/>. 
            * (asterisk) - Zero or more characters in that position.
            ? (question mark) - Zero or one character in that position.
            Characters other than the wildcard are literal characters. For example, the searchPattern string "*t"
            searches for all names in path ending with the letter "t". The searchPattern string "s*" searches for all
            names in path beginning with the letter "s". <paramref name="searchPattern"/> cannot end in two periods
            ("..") or contain two periods ("..") followed by '/' or '\', nor can it contain any invalid characters.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="searchPattern"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption"/> is not a valid
            <see cref="T:System.IO.SearchOption"/> value.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example,
            it is on an unmapped drive).</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:Terrasoft.IO.IDirectoryInfo.EnumerateFiles(System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of file information that matches a specified search pattern and 
            search subdirectory option.</summary>
            <param name="searchPattern">The search string to match against the names of files. This parameter can 
            contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support 
            regular expressions. The default pattern is "*", which returns all files.</param>
            <param name="searchOption">One of the enumeration values that specifies whether the search operation 
            should include only the current directory or all subdirectories. 
            The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.</param>
            <returns>An enumerable collection of files that matches searchPattern and searchOption.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="searchPattern" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The path encapsulated in the DirectoryInfo object is invalid (for example, it is on an unmapped drive).
            </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have 
            the required permission.</exception>
        </member>
        <member name="M:Terrasoft.IO.IDirectoryInfo.GetFiles">
            <summary>
            Returns a file list from the current directory.
            </summary>
            <returns>An array of <see cref="T:Terrasoft.IO.IFileInfo"/>objects.</returns>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path is invalid, 
            such as being on an unmapped drive. </exception>
        </member>
        <member name="M:Terrasoft.IO.IDirectoryInfo.GetDirectories">
            <summary>
            Returns the subdirectories of the current directory.
            </summary>
            <returns>An array of <see cref="T:Terrasoft.IO.IDirectoryInfo"/>objects.</returns>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The path encapsulated in the <see cref="T:Terrasoft.IO.IDirectoryInfo"/> object is invalid, 
            such as being on an unmapped drive</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.
            </exception>
        </member>
        <member name="T:Terrasoft.IO.IDirectoryInfoFactory">
            <summary>
            Provides methods to create instances responsible for working with directories information.
            </summary>
        </member>
        <member name="M:Terrasoft.IO.IDirectoryInfoFactory.Create(System.String)">
            <summary>
            Creates instance responsible for working with directories information.
            </summary>
            <param name="path">The path of the directory to create instance with directory information. </param>
            <returns>Instance responsible for working with directories information.</returns>
        </member>
        <member name="T:Terrasoft.IO.IFile">
            <summary>
            Provides methods for working with file.
            </summary>
        </member>
        <member name="M:Terrasoft.IO.IFile.Copy(System.String,System.String)">
            <summary>
            Copies an existing file to a new file. Overwriting a file of the same name is not allowed.
            </summary>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destinationFileName">
            The name of the destination file. This cannot be a directory or an existing file.
            </param>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sourceFileName"/> or <paramref name="destinationFileName"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="sourceFileName"/> or <paramref name="destinationFileName"/> is a zero-length string,
            contains only white space, or contains invalid characters as defined in
            <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The path specified in <paramref name="sourceFileName"/> or <paramref name="destinationFileName"/>
            is invalid, (for example, it is on an unmapped drive).
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            File specified in <paramref name="sourceFileName"/> was not found.
            </exception>
            <exception cref="T:System.IO.IOException">
            <paramref name="destinationFileName"/> exists.
            <para>-or-</para>
            An I/O error has occurred.
            </exception>
            <exception cref="T:System.NotSupportedException"><paramref name="sourceFileName"/> or
            <paramref name="destinationFileName"/> is in an invalid format.
            </exception>
        </member>
        <member name="M:Terrasoft.IO.IFile.Copy(System.String,System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file. Overwriting a file of the same name is allowed.
            </summary>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destFileName">The name of the destination file. This cannot be a directory.</param>
            <param name="overwrite">true if the destination file can be overwritten; otherwise, false.</param>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
            <para>-or-</para>
            destFileName is read-only.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is a zero-length string, contains
            only white space, or contains one or more invalid characters as defined by Path.GetInvalidPathChars.
            <para>-or-</para>
            <paramref name="sourceFileName"/> or <paramref name="destFileName"/> specifies a directory.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is null.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            For example, on Windows-based platforms, paths must be less than 248 characters,
            and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The path specified in <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is invalid
            (for example, it is on an unmapped drive).
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            <paramref name="sourceFileName"/> was not found.
            </exception>
            <exception cref="T:System.IO.IOException">
            <paramref name="destFileName"/> exists and <paramref name="overwrite"/> is false.
            <para>-or-</para>
            An I/O error has occurred.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is in an invalid format.
            </exception>
        </member>
        <member name="M:Terrasoft.IO.IFile.Create(System.String)">
            <summary>
            Creates or overwrites a file that can be used for asynchronous reading and writing in the specified path.
            </summary>
            <param name="path">The path and name of the file to create.</param>
            <returns>A <see cref="T:System.IO.Stream"/> that provides read/write access to the specified path.
            </returns>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.
            <para>-or-</para>
            <paramref name="path"/> specified a file that is read-only.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white
            space, or contains one or more invalid characters as defined by
            <see cref="M:System.IO.Path.GetInvalidPathChars"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.IO.IFile.Delete(System.String)">
            <summary>
            Deletes specified file.
            </summary>
            <param name="path">Name of file to be deleted. Wildcard characters are not supported.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is empty, contains only white space or contains one or more invalid characters as
            defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            Specified path is invalid (for example, it is on an unmapped drive).
            </exception>
            <exception cref="T:System.IO.IOException">
            Specified file is in use.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="path"/> path is in an invalid format.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caller does not have required permission.</para>
            <para>-or-</para>
            <para><paramref name="path"/> is directory.</para>
            <para>-or-</para>
            <para>File is an executable file that is in use.</para>
            <para>-or-</para>
            <para><paramref name="path"/> specifies read-only file.</para>
            </exception>
        </member>
        <member name="M:Terrasoft.IO.IFile.Exists(System.String)">
            <summary>
            Determines whether specified file exists.
            </summary>
            <param name="path">File to check.</param>
            <returns>
            <c>True</c> if caller has required permissions and path contains name of an existing file.
            Otherwise returns <c>false</c>. Also returns <c>false</c> when path is <c>null</c>, contains wrong
            value or zero-length string. If caller does not have sufficient permissions to read specified file,
            no exception is thrown and method returns <c>false</c> regardless of path existence.
            </returns>
        </member>
        <member name="M:Terrasoft.IO.IFile.GetAttributes(System.String)">
            <summary>Gets the <see cref="T:System.IO.FileAttributes" /> of the file on the path.</summary>
            <param name="path">The path to the file. </param>
            <returns>The <see cref="T:System.IO.FileAttributes" /> of the file on the path.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="path" /> is empty, contains only white spaces, or contains invalid characters. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed 
            the system-defined maximum length. For example, on Windows-based platforms, paths must be 
            less than 248 characters, and file names must be less than 260 characters. </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="path" /> is in an invalid format. </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            <paramref name="path" /> represents a file and is invalid, such as being on an unmapped drive, or the file 
            cannot be found. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            <paramref name="path" /> represents a directory and is invalid, such as being on an unmapped drive, or the 
            directory cannot be found.</exception>
            <exception cref="T:System.IO.IOException">This file is being used by another process.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:Terrasoft.IO.IFile.Move(System.String,System.String)">
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="sourceFileName">The name of the file to move. Can include a relative or absolute path.</param>
            <param name="destFileName">The new path and name for the file.</param>
            <exception cref="T:System.IO.IOException">
            The destination file already exists.
            <para>-or-</para>
            <paramref name="sourceFileName"/> was not found.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is a zero-length string, contains only
            white space, or contains invalid characters as defined in <see cref="F:Path.GetInvalidPathChars"/>.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length. For example,
            on Windows-based platforms, paths must be less than 248 characters,
            and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The path specified in <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is invalid,
            (for example, it is on an unmapped drive).
            </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is in an invalid format.
            </exception>
            <filterpriority>1</filterpriority><PermissionSet>
            <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0,
            Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/></PermissionSet>
        </member>
        <member name="M:Terrasoft.IO.IFile.Open(System.String,System.IO.FileMode)">
            <summary>Opens a <see cref="T:System.IO.FileStream" /> on the specified path with read/write access.
            </summary>
            <param name="path">The file to open. </param>
            <param name="mode">A <see cref="T:System.IO.FileMode" /> value that specifies whether a file is created 
            if one does not exist, and determines whether the contents of existing files are retained or overwritten. 
            </param>
            <returns>A <see cref="T:System.IO.Stream" /> opened in the specified mode and path, with read/write 
            access and not shared.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more 
            invalid characters as defined by <see cref="F:Path.GetInvalidPathChars" />. </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path" /> is <see langword="null" />. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the 
            system-defined maximum length. For example, on Windows-based platforms, paths must be 
            less than 248 characters, and file names must be less than 260 characters. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, 
            (for example, it is on an unmapped drive). </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path" /> specified a file that is read-only.-or- This operation is not supported on 
            the current platform.-or-
            <paramref name="path" /> specified a directory.-or- The caller does not have the required permission. -or-
            <paramref name="mode" /> is <see cref="F:System.IO.FileMode.Create" /> and the specified file 
            is a hidden file.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="mode" /> specified an invalid value. </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in 
            <paramref name="path" /> was not found. </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="path" /> is in an invalid format. </exception>
        </member>
        <member name="M:Terrasoft.IO.IFile.OpenRead(System.String)">
            <summary>
            Opens an existing file for reading.
            </summary>
            <param name="path">The file to be opened for reading.</param>
            <returns>A read-only <see cref="T:System.IO.Stream"/> on the specified path.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is a zero-length string, contains only white space, or contains one
            or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified <paramref name="path"/> is invalid.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path"/> specified a directory, or the caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            The file specified in <paramref name="path"/> was not found.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="path"/> is in an invalid format.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while opening the file.
            </exception>
        </member>
        <member name="M:Terrasoft.IO.IFile.ReadAllLines(System.String)">
            <summary>
            Opens a text file, reads all lines of the file, and then closes the file.
            </summary>
            <param name="path">The file to read from.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is a zero-length string, contains only white space,
            or contains one or more invalid characters defined by the
            <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name=" path "/> is null.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            <paramref name="path"/> is invalid (for example, it is on an unmapped drive).
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while opening the file.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path"/> specifies a file that is read-only.
            <para>-or-</para>
            This operation is not supported on the current platform.
            <para>-or-</para>
            <paramref name="path"/> is a directory.
            <para>-or-</para>
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            File specified in <paramref name="path"/> was not found.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="path"/> is in an invalid format.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
            <returns>A string enumeration containing all lines of the file.</returns>
        </member>
        <member name="M:Terrasoft.IO.IFile.ReadAllBytes(System.String)">
            <summary>
            Opens a binary file, reads contents of file into a byte array, and then closes file.
            </summary>
            <param name="path">File to open for reading.</param>
            <returns>A byte array containing data of file.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is empty, contains only white space or contains one or more invalid characters as
            defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            Specified path is invalid (for example, it is on an unmapped drive).
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while opening file.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            File specified in <paramref name="path"/> was not found.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="path"/> path is in an invalid format.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            Caller does not have required permission.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>This operation is not supported on current platform.</para>
            <para>-or-</para>
            <para><paramref name="path"/> contains path to directory.</para>
            <para>-or-</para>
            <para>Caller does not have required permission.</para>
            </exception>
        </member>
        <member name="M:Terrasoft.IO.IFile.ReadAllText(System.String)">
            <summary>Opens a text file, reads all lines of the file, and then closes the file.</summary>
            <param name="path">The file to open for reading.</param>
            <returns>A string containing all lines of the file.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="path" /> is a zero-length string, contains only white space, or contains one 
            or more invalid characters as defined by <see cref="F:Path.GetInvalidPathChars" />.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path" /> is null.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, 
            or both exceed the system-defined maximum length. For example, on Windows-based platforms, 
            paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid 
            (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path" /> specified a file that is read-only.
            -or- This operation is not supported on the current platform.
            -or- <paramref name="path" /> specified a directory.
            -or- The caller does not have the required permission.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> 
            was not found.</exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="path" /> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have 
            the required permission.</exception>
        </member>
        <member name="M:Terrasoft.IO.IFile.ReadAllText(System.String,System.Text.Encoding)">
            <summary>Opens a file, reads all lines of the file with the specified encoding, and then closes the 
            file.</summary>
            <param name="path">The file to open for reading. </param>
            <param name="encoding">The encoding applied to the contents of the file. </param>
            <returns>A string containing all lines of the file.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more 
            invalid characters as defined by <see cref="F:Path.GetInvalidPathChars" />. </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path" /> is <see langword="null" />. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed 
            the system-defined maximum length. For example, on Windows-based platforms, paths must be less 
            than 248 characters, and file names must be less than 260 characters. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid 
            (for example, it is on an unmapped drive). </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path" /> specified a file that is read-only.-or- This operation is not supported on the 
            current platform.-or-
            <paramref name="path" /> specified a directory.-or- The caller does not have the required permission. 
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> 
            was not found. </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="path" /> is in an invalid format. </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. 
            </exception>
        </member>
        <member name="M:Terrasoft.IO.IFile.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>Sets the specified <see cref="T:System.IO.FileAttributes" /> of the file on the specified path.
            </summary>
            <param name="path">The path to the file. </param>
            <param name="fileAttributes">A bitwise combination of the enumeration values. </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="path" /> is empty, contains only white spaces, contains invalid characters, 
            or the file attribute is invalid. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed 
            the system-defined maximum length. For example, on Windows-based platforms, paths must 
            be less than 248 characters, and file names must be less than 260 characters. </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="path" /> is in an invalid format. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, 
            (for example, it is on an unmapped drive). </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file cannot be found.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path" /> specified a file that is read-only.-or- This operation is not supported 
            on the current platform.-or-
            <paramref name="path" /> specified a directory.-or- The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:Terrasoft.IO.IFile.SetCreationTime(System.String,System.DateTime)">
            <summary>Sets the date and time the file was created.
            </summary>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="creationTime">A <see cref="T:System.DateTime" /> containing the value to set for the creation
            date and time of path. This value is expressed in local time.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="path" /> is a zero-length string, contains only white space,
            or contains one or more invalid characters as defined by InvalidPathChars.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path" /> is null. </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length. For example,
            on Windows-based platforms, paths must be less than 248 characters, and file names must be less
            than 260 characters. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while
            performing the operation. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="creationTime" /> specifies a value outside the range of dates, times,
            or both permitted for this operation.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="path" /> is in an invalid format.</exception>
        </member>
        <member name="M:Terrasoft.IO.IFile.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the specified file was last written to.
            </summary>
            <param name="path">The file for which to set the date and time information.</param>
            <param name="lastWriteTimeUtc">A DateTime containing the value to set
            for the last write date and time of path. This value is expressed in UTC time.</param>
        </member>
        <member name="M:Terrasoft.IO.IFile.WriteAllBytes(System.String,System.Byte[])">
            <summary>
            Creates a new file, writes the specified byte array to the file, and then closes
            the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="bytes">The bytes to write to the file.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more
            invalid characters as defined by Path.GetInvalidPathChars.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is null or the byte array is empty.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified <paramref name="path"/>, file name, or both exceed the system-defined maximum length.
            For example, on Windows-based platforms, paths must be less than 248 characters,
            and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified <paramref name="path"/> is invalid (for example, it is on an unmapped drive).
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while opening the file.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path"/> specified a file that is read-only.
            <para>-or-</para>
            This operation is not supported on the current platform.
            <para>-or-</para>
            <paramref name="path"/> specified a directory.
            <para>-or-</para>
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="path"/> is in an invalid format.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:Terrasoft.IO.IFile.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new file, writes a collection of strings <paramref name="contents"/> to the file,
            and then closes the file.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is a zero-length string, contains only white space,
            or contains one or more invalid characters defined by the
            <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name=" path "/> or <paramref name="contents"/> is null.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            <paramref name="path"/> is invalid (for example, it is on an unmapped drive).
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while opening the file.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="path"/> is in an invalid format.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path"/> specifies a file that is read-only.
            <para>-or-</para>
            This operation is not supported on the current platform.
            <para>-or-</para>
            <paramref name="path"/> is a directory.
            <para>-or-</para>
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:Terrasoft.IO.IFile.WriteAllText(System.String,System.String)">
            <summary>Creates a new file, writes the specified string to the file, 
            and then closes the file. If the target file already exists, it is overwritten.</summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="path" /> is a zero-length string, contains only white space,
            or contains one or more invalid characters 
            as defined by <see cref="F:Path.GetInvalidPathChars" />.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path" /> is null or <paramref name="contents" /> is empty.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, 
            or both exceed the system-defined maximum length. For example, on Windows-based platforms, 
            paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path
            is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path" /> specified a file that is read-only.-or-
            This operation is not supported on the current platform.-or- <paramref name="path" /> 
            specified a directory.-or- The caller does not have the required permission.</exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="path" /> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have 
            the required permission.</exception>
        </member>
        <member name="M:Terrasoft.IO.IFile.WriteAllText(System.String,System.String,System.Text.Encoding)">
            <summary>Creates a new file, writes the specified string to the file, and then closes the file. 
            If the target file already exists, it is overwritten.</summary>
            <param name="path">The file to write to. </param>
            <param name="contents">The string to write to the file. </param>
            <param name="encoding">The encoding to apply to the string.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more 
            invalid characters as defined by <see cref="F:Path.GetInvalidPathChars" />. </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path" /> is <see langword="null" /> or <paramref name="contents" /> is empty. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed 
            the system-defined maximum length. For example, on Windows-based platforms, paths must 
            be less than 248 characters, and file names must be less than 260 characters. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid 
            (for example, it is on an unmapped drive). </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path" /> specified a file that is read-only.-or- This operation is not supported on 
            the current platform.-or-
            <paramref name="path" /> specified a directory.-or- The caller does not have the required permission. 
            </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="path" /> is in an invalid format. </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. 
            </exception>
        </member>
        <member name="T:Terrasoft.IO.IFileInfo">
            <summary>
            Provides properties and instance methods for the creation, copying, deletion, moving, and opening of files, 
            and aids in the creation of FileStream objects. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:Terrasoft.IO.IFileInfo.Length">
            <summary>Gets the size, in bytes, of the current file.</summary>
            <returns>The size of the current file in bytes.</returns>
            <exception cref="T:System.IO.IOException">
            <see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot update the state of the file or directory. 
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file does not exist.-or- 
            The <see langword="Length" /> property is called for a directory. </exception>
        </member>
        <member name="T:Terrasoft.IO.IFileSystemInfo">
            <summary>
            Provides the base class for both <see cref="T:Terrasoft.IO.IFileInfo" /> and <see cref="T:Terrasoft.IO.IDirectoryInfo" /> objects.
            </summary>
        </member>
        <member name="P:Terrasoft.IO.IFileSystemInfo.Attributes">
            <summary>
            Gets or sets the attributes for the current file or directory.
            </summary>
        </member>
        <member name="P:Terrasoft.IO.IFileSystemInfo.CreationTime">
            <summary>
            Gets or sets the creation time of the current file or directory
            </summary>
            <returns>The creation date and time of the current <see cref="M:System.IO.FileSystemInfo" /> object.
            </returns>
            <exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" />
            cannot initialize the data.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid; for example,
            it is on an unmapped drive.</exception>
            <exception cref="T:System.PlatformNotSupportedException">The current operating system
            is not Windows NT or later.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to
            set an invalid creation time.</exception>
        </member>
        <member name="P:Terrasoft.IO.IFileSystemInfo.Exists">
            <summary>
            Gets a value indicating whether the file or directory exists.
            </summary>
        </member>
        <member name="P:Terrasoft.IO.IFileSystemInfo.FullName">
            <summary>
            Gets the full path of the directory or file.
            </summary>
        </member>
        <member name="P:Terrasoft.IO.IFileSystemInfo.Name">
            <summary>
            For files, gets the name of the file. For directories, gets the name of the last directory in
            the hierarchy if a hierarchy exists. Otherwise, the Name property gets the name of the directory.
            </summary>
        </member>
        <member name="P:Terrasoft.IO.IFileSystemInfo.Extension">
            <summary>Gets the string representing the extension part of the file.</summary>
            <returns>A string containing the <see cref="T:System.IO.FileSystemInfo" /> extension.</returns>
            <footer>
            <a href="https://docs.microsoft.com/en-us/dotnet/api/System.IO.FileSystemInfo.Extension?view=netcore-3.1">
            `FileSystemInfo.Extension` on docs.microsoft.com</a>
            </footer>
        </member>
        <member name="P:Terrasoft.IO.IFileSystemInfo.LastWriteTimeUtc">
            <summary>Gets or sets the time, in coordinated universal time (UTC), when the current file or directory was
            last written to.</summary>
            <returns>The UTC time when the current file was last written to.</returns>
            <exception cref="T:System.IO.IOException">
            <see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data. </exception>
            <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or
            later.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid write time.
            </exception>
        </member>
        <member name="T:Terrasoft.IO.IPath">
            <summary>
            Wrapper for <see cref="T:System.IO.Path"/> class.
            </summary>
        </member>
        <member name="T:Terrasoft.IO.IZipFile">
            <summary>
            Provides methods for working with ZIP archives.
            </summary>
        </member>
        <member name="M:Terrasoft.IO.IZipFile.CreateFromDirectory(System.String,System.String)">
            <summary>
            Creates a zip archive that contains the files and directories from the specified directory.
            </summary>
            <param name="sourceDirectoryPath">The path to the directory to be archived, specified as a relative or
            absolute path. A relative path is interpreted as relative to the current working directory.</param>
            <param name="destinationArchiveFilePath">The path of the archive to be created, specified as a relative or
            absolute path. A relative path is interpreted as relative to the current working directory.</param>
        </member>
    </members>
</doc>

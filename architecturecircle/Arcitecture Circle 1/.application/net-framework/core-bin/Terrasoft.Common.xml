<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Terrasoft.Common</name>
    </assembly>
    <members>
        <member name="T:Terrasoft.Common.AdaptiveStringBuilder">
            <summary>
            Предоставляет изменяемую строку символов с оптимизированным механизмом построения строки. 
            Этот класс не наследуется.</summary>
            <remarks>Данный класс предоставляет строковый объект, значение которого является изменяемой последовательностью 
            знаков.Значение является изменяемым, то есть после создания его можно изменить путем добавления, удаления, 
            замены или вставки знаков. Класс использует оптимизированный механизм построения строки на основе сбора 
            статистики использования экземпляра класса.</remarks>
        </member>
        <member name="T:Terrasoft.Common.AdaptiveStringBuilder.SbStatistics">
            <summary>
            Статистика использования данного экземпляра класса <see cref="T:Terrasoft.Common.AdaptiveStringBuilder"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.AdaptiveStringBuilder.SbStatistics.#ctor(System.Int32)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.AdaptiveStringBuilder.SbStatistics"/>, используя указанный размер строки 
            данного экземпляра класса <see cref="T:Terrasoft.Common.AdaptiveStringBuilder"/>.
            </summary>
            <param name="length">Начальный размер строки данного экземпляра класса 
            <see cref="T:Terrasoft.Common.AdaptiveStringBuilder"/>.
            </param>
        </member>
        <member name="P:Terrasoft.Common.AdaptiveStringBuilder.SbStatistics.Cnt">
            <summary>
            Возвращает или задает количество использований данного экземпляра 
            класса <see cref="T:Terrasoft.Common.AdaptiveStringBuilder"/>.</summary>
            <value>
            Количество использований экземпляра класса <see cref="T:Terrasoft.Common.AdaptiveStringBuilder"/>.
            </value>
        </member>
        <member name="P:Terrasoft.Common.AdaptiveStringBuilder.SbStatistics.Min">
            <summary>
            Возвращает или задает минимальный размер строки данного экземпляра 
            класса <see cref="T:Terrasoft.Common.AdaptiveStringBuilder"/>.</summary>
            <value>
            Минимальный размер строки экземпляра класса <see cref="T:Terrasoft.Common.AdaptiveStringBuilder"/>.
            </value>
        </member>
        <member name="P:Terrasoft.Common.AdaptiveStringBuilder.SbStatistics.Max">
            <summary>
            Возвращает или задает максимальный размер строки данного экземпляра 
            класса <see cref="T:Terrasoft.Common.AdaptiveStringBuilder"/>.</summary>
            <value>
            Максимальный размер строки экземпляра класса <see cref="T:Terrasoft.Common.AdaptiveStringBuilder"/>.
            </value>
        </member>
        <member name="P:Terrasoft.Common.AdaptiveStringBuilder.SbStatistics.Avg">
            <summary>
            Возвращает средний размер строки данного экземпляра класса <see cref="T:Terrasoft.Common.AdaptiveStringBuilder"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.AdaptiveStringBuilder.SbStatistics.Update(System.Int32)">
            <summary>
            Обновляет статистику по данному экземпляру класса <see cref="T:Terrasoft.Common.AdaptiveStringBuilder"/> в соответствии с 
            заданным размером строки.</summary>
            <param name="length">Размер строки.</param>
        </member>
        <member name="F:Terrasoft.Common.AdaptiveStringBuilder.DefaultCapacity">
            <summary>
            Количество знаков, которое по умолчанию может содержаться в памяти, назначенной текущим экземпляром.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.AdaptiveStringBuilder.LargeObjectSize">
            <summary>
            Максимальная величина фрагмента строки.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.AdaptiveStringBuilder._lengthStatistics">
            <summary>
            История статистики использования экземпляра класса <see cref="T:Terrasoft.Common.AdaptiveStringBuilder"/>.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.AdaptiveStringBuilder._name">
            <summary>
            Имя - идентификатор экземпляра класса <see cref="T:Terrasoft.Common.AdaptiveStringBuilder"/>. 
            </summary>
        </member>
        <member name="F:Terrasoft.Common.AdaptiveStringBuilder._currentBuilder">
            <summary>
            Экземпляр класса <see cref="P:Terrasoft.Common.AdaptiveStringBuilder.StringBuilder"/>, представляющий изменяемую строку символов. 
            </summary>
        </member>
        <member name="M:Terrasoft.Common.AdaptiveStringBuilder.#ctor(System.String)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.AdaptiveStringBuilder"/>.
            </summary>
            <param name="name">Имя - идентификатор экземпляра.</param>
            <exception cref="T:System.ArgumentException">При передаче в качестве параметра <paramref name="name"/>
            пустой строки.</exception>
        </member>
        <member name="M:Terrasoft.Common.AdaptiveStringBuilder.Finalize">
            <summary>
            Освобождает ресурсы и выполняет завершающие действия над объектом класса 
            <see cref="T:Terrasoft.Common.AdaptiveStringBuilder"/>.
            </summary>
            <remarks>В деструкторе класса <see cref="T:Terrasoft.Common.AdaptiveStringBuilder"/> вызывается метод <c>Dispose()</c>,
            который обновляет статистику по экземпляру и освобождает ресурсы. 
            </remarks>
        </member>
        <member name="P:Terrasoft.Common.AdaptiveStringBuilder.StringBuilder">
            <summary>
            Экзмепляр класса <see cref="P:Terrasoft.Common.AdaptiveStringBuilder.StringBuilder"/>, представляющий реузльтирующую модифицированную строку.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.AdaptiveStringBuilder._chunks">
            <summary>
            Список фрагментов, из которых строится результирующая строка.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.AdaptiveStringBuilder.Chunks">
            <summary>
            Возвращает массив фрагментов строк.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.AdaptiveStringBuilder.GetRecommendedCapacity(System.String,System.Int32)">
            <summary>
            Возвращает оптимальный объем памяти с учетом статистики использования объекта.
            </summary>
            <param name="stringBuilderName">Имя экземпляра класса <see cref="T:Terrasoft.Common.AdaptiveStringBuilder"/>, для которого 
            выдеяется память.</param>
            <param name="alreadyAllocated">Объем выделенной ранее памяти для данного экземпляра класса 
            <see cref="T:Terrasoft.Common.AdaptiveStringBuilder"/></param>
            <returns>Размер оптимального объема памяти в байтах.</returns>
        </member>
        <member name="M:Terrasoft.Common.AdaptiveStringBuilder.SetLength(System.String,System.Int32)">
            <summary>
            Обновление статистики по экземпляру класса <see cref="T:Terrasoft.Common.AdaptiveStringBuilder"/>.
            </summary>
            <param name="stringBuilderName">Имя экземпляра класса <see cref="T:Terrasoft.Common.AdaptiveStringBuilder"/></param>
            <param name="length">Размер выделленого объема пямяти для данного экземпляра 
            класса <see cref="T:Terrasoft.Common.AdaptiveStringBuilder"/> в байтах.</param>
        </member>
        <member name="M:Terrasoft.Common.AdaptiveStringBuilder.AllocateChunk(System.Int32)">
            <summary>
            Создает новый фрагмент строки.
            </summary>
            <param name="requiredLength">Требуемый размер строки.</param>
            <remarks>Метод создает новый экземпляр класса <see cref="P:Terrasoft.Common.AdaptiveStringBuilder.StringBuilder"/>, размер которого определяется
            как максимальное значение между значением <paramref name="requiredLength"/> и значением, возвращаемым 
            функцией <c>GetRecommendedCapacity(string, int)</c>.</remarks>
        </member>
        <member name="M:Terrasoft.Common.AdaptiveStringBuilder.GetAllChunksLength">
            <summary>
            Возвращает общую длину всех фрагментов строки.
            </summary>
            <returns>Длина всех фрагментов строки</returns>
        </member>
        <member name="M:Terrasoft.Common.AdaptiveStringBuilder.InsertAtBegin(System.String)">
            <summary>
            Вставляет копию указанной строки в начало данного экземпляра.
            </summary>
            <param name="value">Вставляемая строка.</param>
            <returns>Ссылка на этот экземпляр после завершения операции вставки.</returns>
        </member>
        <member name="M:Terrasoft.Common.AdaptiveStringBuilder.Append(System.String)">
            <summary>
            Добавляет копию указанной строки к данному экземпляру.
            </summary>
            <param name="value">Добавляемая строка.</param>
            <returns>Ссылка на этот экземпляр после завершения операции добавления.</returns>
        </member>
        <member name="M:Terrasoft.Common.AdaptiveStringBuilder.Append(System.String[])">
            <summary>
            Добавляет список строк к данному экземпляру.
            </summary>
            <param name="values">Список добавляемых строк.</param>
            <returns>Ссылка на этот экземпляр после завершения операции добавления.</returns>
        </member>
        <member name="M:Terrasoft.Common.AdaptiveStringBuilder.Dispose">
            <summary>
            Обновляет статистику использования экземпляра и освобождает ресурсы.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.AdaptiveStringBuilderUtilities">
            <summary>
            Содержит служебные методы для работы с классом <see cref="T:Terrasoft.Common.AdaptiveStringBuilder"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.AdaptiveStringBuilderUtilities.AppendCollection(Terrasoft.Common.AdaptiveStringBuilder,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Добавляет коллекцию строк к данному экземпляру.
            </summary>
            <param name="source">Экземпляр, к которому осуществляется добавление.</param>
            <param name="collection">Добавляемая коллекция строк.</param>
            
        </member>
        <member name="M:Terrasoft.Common.AdaptiveStringBuilderUtilities.AppendCollection``1(Terrasoft.Common.AdaptiveStringBuilder,System.Collections.Generic.ICollection{``0},System.Func{``0,System.String})">
            <summary>
            Добавляет к данному экземпляру коллекцию объектов, к котрорым применима функция определенного вида.
            </summary>
            <typeparam name="T">Любой тип.</typeparam>
            <param name="source">Экземпляр, к которому осуществляется добавление.</param>
            <param name="collection">Добавляемая коллекция объектов.</param>
            <param name="func">Вид функции.</param>
            <remarks>Расширяемый метод.</remarks>
        </member>
        <member name="M:Terrasoft.Common.AdaptiveStringBuilderUtilities.DecorateWithSimpleTemplate(Terrasoft.Common.AdaptiveStringBuilder,System.String)">
            <summary>
            Форматирование данного экземпляра в соответствии с шаблоном.
            </summary>
            <param name="source">Форматируемый экземпляр.</param>
            <param name="template">Шаблон форматирования.</param>
            <remarks>Поддерживает шаблоны вида "begin{0}end".</remarks>
        </member>
        <member name="T:Terrasoft.Common.ArrayUtilities">
            <summary>
            Содержит служебные методы для работы с массивами
            </summary>
        </member>
        <member name="M:Terrasoft.Common.ArrayUtilities.Equals``1(``0[],``0[])">
            <summary>
            Определяет, считаются ли равными указанные массивы.
            </summary>
            <typeparam name="T">Элементы массива могут быть любых типов.</typeparam>
            <param name="source">Массив, который сравнивается.</param>
            <param name="target">Массив, с которым идет сравнение.</param>
            <returns><c>true</c>, если указанные объекты равны; в противном случае — <c>false</c>.
            </returns>
            <remarks><para>Перегруженный метод.</para><para>Для сравнения используется сравнение
            по умолчанию для соответствующего
            типа элемента массива.</para></remarks>
        </member>
        <member name="M:Terrasoft.Common.ArrayUtilities.Equals``1(``0[],``0[],System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Определяет, считаются ли равными указанные массивы в соответствии с настройками сравнения.
            </summary>
            <typeparam name="T">Элементы массива могут быть любых типов.</typeparam>
            <param name="source">Массив, который сравнивается.</param>
            <param name="target">Массив, с которым идет сравнение.</param>
            <param name="comparer">Пользовательский компаратор, реализующий
            интерфейс <see cref="T:System.Collections.IEqualityComparer"/>.</param>
            <returns><c>true</c>, если указанные объекты равны; в противном случае — <c>false</c>.</returns>
            <remarks><para>Перегруженный метод.</para><para>Для сравнения используется класс, реализующий интерфейс
            IEqualityComparer&lt;T&gt;.</para></remarks>
        </member>
        <member name="M:Terrasoft.Common.ArrayUtilities.GetElement``1(``0[],System.Int32,``0)">
            <summary>
            Безопасно возвращает элемент массива если индекс <paramref name="index"/> входит в граници массива, если
            индекс выходит за границы массива, то возвращается значение по умолчанию <paramref name="defaultValue"/>.
            </summary>
            <typeparam name="T">Любой тип.</typeparam>
            <param name="source">Массив.</param>
            <param name="index">Индекс элемента в массиве.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>
            Элемент массива, если индекс входит в границы массива; в противном случае - значение по умолчанию.
            </returns>
        </member>
        <member name="T:Terrasoft.Common.IAssemblyTypeLoader">
            <summary>
            Safe type enumerator.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.IAssemblyTypeLoader.GetTypes(System.Reflection.Assembly)">
            <summary>
            Gets the types from single assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="M:Terrasoft.Common.IAssemblyTypeLoader.GetTypes(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Gets the types from assemblies collection.
            </summary>
            <param name="assemblies">The assemblies.</param>
            <returns>Joined list of types from all assemblies.</returns>
        </member>
        <member name="T:Terrasoft.Common.AssemblyTypeLoader">
            <summary>
            Safe type enumerator.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.AssemblyTypeLoader.GetTypes(System.Reflection.Assembly)">
            <summary>
            Gets the types from single assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>The assembly type list.</returns>
        </member>
        <member name="M:Terrasoft.Common.AssemblyTypeLoader.GetTypes(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Gets the types from assemblies collection.
            </summary>
            <param name="assemblies">The assemblies.</param>
            <returns>Joined list of types from all assemblies.</returns>
        </member>
        <member name="T:Terrasoft.Common.BaseSerializableObjectUtilities">
            <summary>
            Provides base methods to serialize and deserialize <see cref="T:Terrasoft.Common.ISerializableObject"/> instances using
            <see cref="T:Terrasoft.Common.DataWriter"/> and <see cref="T:Terrasoft.Common.DataReader"/> api.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.BaseSerializableObjectUtilities.Serialize(Terrasoft.Common.ISerializableObject)">
            <summary>
            Serializes <see cref="T:Terrasoft.Common.ISerializableObject"/> instance to json and write it to byte array.
            </summary>
            <param name="serializableObject">The instance to serialize.</param>
            <returns>
            Serialized value as byte array.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.BaseSerializableObjectUtilities.ReadSerializableObjectValue(Terrasoft.Common.DataReader)">
            <summary>Reads the serializable object value.</summary>
            <param name="source">The data reader.</param>
            <returns>Deserialized value.</returns>
        </member>
        <member name="M:Terrasoft.Common.BaseSerializableObjectUtilities.SerializeToJson(Terrasoft.Common.ISerializableObject,System.IO.Stream)">
            <summary>Serializes <see cref="T:Terrasoft.Common.ISerializableObject"/> instance to json and write it to stream using
            <see cref="P:System.Text.Encoding.UTF8"/> encoding.</summary>
            <param name="source">The instance to serialize.</param>
            <param name="stream">The stream to write data.</param>
        </member>
        <member name="M:Terrasoft.Common.BaseSerializableObjectUtilities.DeserializeFromJson(System.IO.Stream)">
            <summary>Deserializes <see cref="T:Terrasoft.Common.ISerializableObject"/> from json string encoded using
            <see cref="P:System.Text.Encoding.UTF8"/> encoding.</summary>
            <param name="stream">The stream to read data from.</param>
            <returns>Deserialized instance.</returns>
        </member>
        <member name="M:Terrasoft.Common.BaseSerializableObjectUtilities.DeserializeFromJsonBytes(System.Object)">
            <summary>
            Deserializes <see cref="T:Terrasoft.Common.ISerializableObject"/> from json string bytes.
            </summary>
            <param name="bytes">An array of <see cref="T:System.Byte"/> to deserialize from.</param>
            <returns>Deserialized instance.</returns>
        </member>
        <member name="M:Terrasoft.Common.BaseSerializableObjectUtilities.WriteSerializableObjectValue(Terrasoft.Common.DataWriter,System.String,Terrasoft.Common.ISerializableObject)">
            <summary>Serializes the <see cref="T:Terrasoft.Common.ISerializableObject"/> instance and its type.</summary>
            <param name="source">The data writer.</param>
            <param name="name">The property name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Terrasoft.Common.BaseSerializableObjectUtilities.DeserializeFromJson(System.String)">
            <summary>
            Deserializes <see cref="T:Terrasoft.Common.ISerializableObject"/> from json string bytes.
            </summary>
            <param name="serializedValue">Serialized value as string.</param>
            <returns>Deserialized instance.</returns>
        </member>
        <member name="M:Terrasoft.Common.BaseSerializableObjectUtilities.SerializeToJson(Terrasoft.Common.ISerializableObject)">
            <summary>
            Serializes <see cref="T:Terrasoft.Common.ISerializableObject"/> instance to json and write it to string using
            <see cref="P:System.Text.Encoding.UTF8"/> encoding.
            </summary>
            <param name="value">The instance to serialize.</param>
            <returns>Serialized value as string.</returns>
        </member>
        <member name="T:Terrasoft.Common.BooleanUtilities">
            <summary>
            Provides methods for working with a logical type.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.BooleanUtilities.ToJavaScriptBoolean(System.Boolean)">
            <summary>
            Converts the value of <paramref name = "source" /> to the equivalent value in JavaScript.
            </summary>
            <param name="source">The value to be converted.</param>
            <returns>The equivalent value of <paramref name = "source" /> in JavaScript.</returns>
        </member>
        <member name="M:Terrasoft.Common.BooleanUtilities.ConvertToBoolean(System.String)">
            <summary>
            Converts a string value of <paramref name = "source" /> to a <see langword="bool"/> type.
            </summary>
            <param name="source">The value to be converted.</param>
            <returns><see langword = "true" />, if <paramref name = "source" /> matches in the list to convert 
            to <see langword = "true" /> value. <see langword = "false" /> if <paramref name = "source" /> matches in 
            the list to convert to <see langword = "false" /> value</returns>
        </member>
        <member name="T:Terrasoft.Common.BytesToStringUtilities">
            <summary>
            Предоставляет методы по преобразованию значений типа <see cref="T:System.Byte"/> в значения типа 
            <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.BytesToStringUtilities.ToString(System.Byte[],System.Text.Encoding)">
            <summary>
            Возвращает экземпляр <see cref="T:System.String"/>, являющийся строковым представлением заданного массива 
            байтов в заданной кодировке.
            </summary>
            <param name="source">Массив байтов.</param>
            <param name="encoding">Кодировка.</param>
            <returns>
            Экземпляр <see cref="T:System.String"/>, являющийся строковым представлением массива 
            байтов <paramref name="source"/> в кодировке <paramref name="encoding"/>.
            </returns>
            <remarks>
            <para>Перегруженный метод.</para>
            <para>Метод расширения класса <see cref="T:System.Byte"/>.</para>
            </remarks>
        </member>
        <member name="M:Terrasoft.Common.BytesToStringUtilities.ToString(System.Byte[],System.Text.Encoding,System.Boolean)">
            <summary>
            Возвращает экземпляр <see cref="T:System.String"/>, являющийся строковым представлением заданного массива 
            байтов в заданной кодировке. Экземпляр может содержать префикс, определяющий его кодировку.
            </summary>
            <param name="source">Массив байтов.</param>
            <param name="encoding">Кодировка.</param>
            <param name="detectEncodingFromByteOrderMarks"> равно <c>true</c>, если экземпляр содержит префикс,
            определяющий его кодировку; иначе - <c>false</c>.</param>
            <returns>
            Экземпляр <see cref="T:System.String"/>, являющийся строковым представлением массива байтов
            <paramref name="source"/> в кодировке <paramref name="encoding"/>. 
            Если <paramref name="detectEncodingFromByteOrderMarks"/> равно <c>true</c>, к экземпляру 
            <see cref="T:System.String"/> добавляется префикс, определяющий его кодировку.
            </returns>
            <remarks>
            <para>Перегруженный метод.</para>
            <para>Метод расширения класса <see cref="T:System.Byte"/>.</para>
            </remarks>
        </member>
        <member name="M:Terrasoft.Common.BytesToStringUtilities.ToString(System.IO.MemoryStream,System.Text.Encoding)">
            <summary>
            Возвращает экземпляр <see cref="T:System.String"/>, являющийся строковым представлением потока типа
            <see cref="T:System.IO.MemoryStream"/> в заданной кодировке.
            </summary>
            <param name="source">Поток.</param>
            <param name="encoding">Кодировка.</param>
            <returns>
            Экземпляр <see cref="T:System.String"/>, являющийся строковым представлением потока <paramref name="source"/>
            в кодировке <paramref name="encoding"/>.
            </returns>
            <remarks>
            <para>Перегруженный метод.</para>
            <para>Метод расширения класса <see cref="T:System.IO.MemoryStream"/>.</para>
            </remarks>
        </member>
        <member name="M:Terrasoft.Common.BytesToStringUtilities.ToString(System.IO.MemoryStream,System.Text.Encoding,System.Boolean)">
            <summary>
            Возвращает экземпляр <see cref="T:System.String"/>, являющийся строковым представлением потока типа
            <see cref="T:System.IO.MemoryStream"/> в заданной кодировке. Экземпляр может содержать префикс, определяющий
            его кодировку.
            </summary>
            <param name="source">Поток.</param>
            <param name="encoding">Кодировка.</param>
            <param name="detectEncodingFromByteOrderMarks"> равно <c>true</c>, если экземпляр содержит префикс,
            определяющий его кодировку; иначе - <c>false</c>.</param>
            <returns>
            Экземпляр <see cref="T:System.IO.MemoryStream"/>, являющийся строковым представлением потока 
            <paramref name="source"/> в кодировке <paramref name="encoding"/>. 
            Если <paramref name="detectEncodingFromByteOrderMarks"/> равно <c>true</c>, к экземпляру 
            <see cref="T:System.String"/> добавляется префикс, определяющий его кодировку.
            </returns>
            <remarks>
            <para>Перегруженный метод.</para>
            <para>Метод расширения класса <see cref="T:System.IO.MemoryStream"/>.</para>
            </remarks>
        </member>
        <member name="T:Terrasoft.Common.CachingFactory">
            <summary>
            Used to cache value factory result as long as key remains the same.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.CachingFactory.Create``2(System.Func{``0,System.String},System.Func{``1})">
            <summary>
            Converts <paramref name="valueFactory"/> into function that caches result as long as
            <paramref name="keyFormatter"/> returns the same value.
            </summary>
            <param name="keyFormatter">User to retrieve cache key from <typeparamref name="TKeySource"/> value .</param>
            <param name="valueFactory">Source value factory.</param>
            <typeparam name="TKeySource">Instance used to retrieve cache key.</typeparam>
            <typeparam name="TValue">Value type.</typeparam>
        </member>
        <member name="T:Terrasoft.Common.CallContext.AsyncDepthCounter">
            <summary>
            Async depth counter. Provides API to determine depth of async execution stack, i.e. any <c>await</c> operator
            can lead to growth of this counter. Counter is lazy so it will increment it's value only when
            <see cref="M:Terrasoft.Common.CallContext.AsyncDepthCounter.GetCurrentValue"/> method is called.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.CallContext.AsyncDepthCounter.Reset">
            <summary>
            Resets counter.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.CallContext.AsyncDepthCounter.GetCurrentValue">
            <summary>
            Returns counter which is related to depth of async execution stack, but counter value could be lower due to
            it's laziness.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.CallContext.AsyncDepthCounterValue">
            <summary>
            Async depth counter value.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.CallContext.AsyncDepthCounterValue.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Common.CallContext.AsyncDepthCounterValue" /> type.
            </summary>
            <param name="ownerThreadId">Owner thread identifier.</param>
            <param name="depth">Depth.</param>
        </member>
        <member name="M:Terrasoft.Common.CallContext.AsyncDepthCounterValue.#ctor(Terrasoft.Common.CallContext.AsyncDepthCounterValue)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Common.CallContext.AsyncDepthCounterValue" /> type.
            </summary>
            <param name="depthCounter">Depth counter.</param>
        </member>
        <member name="P:Terrasoft.Common.CallContext.AsyncDepthCounterValue.Empty">
            <summary>
            Empty value.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.CallContext.AsyncDepthCounterValue.ThreadId">
            <summary>
            Thread identifier.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.CallContext.AsyncDepthCounterValue.Depth">
            <summary>
            Async calls depth.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.CallContext.AsyncDepthCounterValue.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.CallContext.AsyncDepthCounterValue.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Terrasoft.Common.CallContext.CallContextInitializer">
            <inheritdoc />
        </member>
        <member name="P:Terrasoft.Common.CallContext.CallContextInitializer.Instance">
            <summary>
            Gets or sets an instance that implements the <see cref="T:Terrasoft.Common.CallContext.ICallContextInitializer"/> interface.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.CallContext.CallContextInitializer.RegisterInitAction(System.Action)">
            <summary>
            Registers an action that is going to be called while initializing the call context data.
            </summary>
            <param name="action">Action to call while initializing.</param>
        </member>
        <member name="M:Terrasoft.Common.CallContext.CallContextInitializer.RegisterResetAction(System.Action)">
            <summary>
            Registers an action that is going to be called while resetting the call context data.
            </summary>
            <param name="action">Action to call while initializing.</param>
        </member>
        <member name="M:Terrasoft.Common.CallContext.CallContextInitializer.Run(System.Action)">
            <summary>
            Executes call context initialization and calls <paramref name="action"/>.
            </summary>
            <param name="action">Action.</param>
        </member>
        <member name="M:Terrasoft.Common.CallContext.CallContextInitializer.Run``1(System.Func{``0})">
            <summary>
            Executes call context initialization and calls <paramref name="action"/>.
            </summary>
            <param name="action">Action.</param>
        </member>
        <member name="M:Terrasoft.Common.CallContext.CallContextInitializer.Terrasoft#Common#CallContext#ICallContextInitializer#Init">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.CallContext.CallContextInitializer.Terrasoft#Common#CallContext#ICallContextInitializer#Reset">
            <inheritdoc />
        </member>
        <member name="T:Terrasoft.Common.CallContext.ICallContextInitializer">
            <summary>
            Represents an interface for initializing call context data.
            Call context data is information associated with a logical call that can
            be accessed across asynchronous points and between contexts in the same
            logical thread.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.CallContext.ICallContextInitializer.Init">
            <summary>
            Initializes the call context data. Implementations of this method should set up any necessary data
            in the call context to be accessible throughout the call context's scope.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.CallContext.ICallContextInitializer.Reset">
            <summary>
            Resets the call context data. Implementations of this method should reset any data
            in the call context that was set in the <see cref="M:Terrasoft.Common.CallContext.ICallContextInitializer.Init"/> method.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.Cancellation.CancelableContext">
            <summary>
            Cancelable context.
            </summary>
            <inheritdoc cref="T:Terrasoft.Common.Cancellation.ICancelableContext" />
        </member>
        <member name="M:Terrasoft.Common.Cancellation.CancelableContext.#ctor(Terrasoft.Common.Cancellation.IContextCancellationToken,Terrasoft.Common.Cancellation.CancelableContextReentrancyMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Common.Cancellation.CancelableContext" /> type.
            </summary>
            <param name="contextCancellationToken">Context cancellation token.</param>
            <param name="reentrancyMode">Reentrancy mode.</param>
        </member>
        <member name="P:Terrasoft.Common.Cancellation.CancelableContext.GracePeriodProvider">
            <summary>
            Grace period provider.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.Cancellation.CancelableContext.ThreadLocalCancellationToken">
            <summary>
            Thread local cancellation token. Gives ability to cancel operations when instance of
            <see cref="T:Terrasoft.Common.Cancellation.IContextCancellationToken"/> can't be used.
            </summary>
            <remarks>This instance should be used carefully when no alternatives are available.</remarks>
        </member>
        <member name="P:Terrasoft.Common.Cancellation.CancelableContext.Token">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.Cancellation.CancelableContext.Deactivate(Terrasoft.Common.Cancellation.ContextCancellationState)">
            <summary>
            Deactivates context. This method should not be used directly.
            </summary>
            <param name="state">State.</param>
        </member>
        <member name="M:Terrasoft.Common.Cancellation.CancelableContext.Cancel(System.Nullable{System.TimeSpan})">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.Cancellation.CancelableContext.Activate">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.Cancellation.CancelableContext.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Terrasoft.Common.Cancellation.CancelableContextSuppressor">
            <summary>
            Cancelable context suppressor.
            </summary>
            <inheritdoc cref="T:System.IDisposable" />
        </member>
        <member name="M:Terrasoft.Common.Cancellation.CancelableContextSuppressor.#ctor(Terrasoft.Common.Cancellation.CancelableContext,Terrasoft.Common.Cancellation.ContextCancellationState)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Common.Cancellation.CancelableContextSuppressor" /> type.
            </summary>
            <param name="context">Context.</param>
            <param name="previousState">Previous state.</param>
        </member>
        <member name="M:Terrasoft.Common.Cancellation.CancelableContextSuppressor.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Terrasoft.Common.Cancellation.ContextCancellationToken">
            <summary>
            Context cancellation token.
            </summary>
            <inheritdoc cref="T:Terrasoft.Common.Cancellation.IContextCancellationToken" />
        </member>
        <member name="P:Terrasoft.Common.Cancellation.ContextCancellationToken.State">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.Cancellation.ContextCancellationToken.ThrowIfCancellationRequested">
            <inheritdoc />
        </member>
        <member name="T:Terrasoft.Common.Cancellation.ICancelableContext">
            <summary>
            Provides API to dynamically enable "Cancelled state" 
            </summary>
        </member>
        <member name="P:Terrasoft.Common.Cancellation.ICancelableContext.Token">
            <summary>
            Cancellation token. Provides actual state.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.Cancellation.ICancelableContext.Activate">
            <summary>
            Activates context, till <see cref="M:Terrasoft.Common.Cancellation.CancelableContextSuppressor.Dispose"/> not be called.
            </summary>
            <returns>Cancelable context suppressor.</returns>
        </member>
        <member name="M:Terrasoft.Common.Cancellation.ICancelableContext.Cancel(System.Nullable{System.TimeSpan})">
            <summary>
            Used to signal that cancelled state should be scheduled with timeout <paramref name="gracePeriod"/>.
            When called second time on same context, it should immediately set state to "Cancelled".
            </summary>
            <param name="gracePeriod">Grace period.</param>
        </member>
        <member name="T:Terrasoft.Common.Cancellation.CancelableContextReentrancyMode">
            <summary>
            Cancelable context reentrancy mode.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.Cancellation.IContextCancellationToken">
            <summary>
            Context cancellation token. Used for cancellation state ambient flow. 
            </summary>
        </member>
        <member name="P:Terrasoft.Common.Cancellation.IContextCancellationToken.State">
            <summary>
            You should not directly work with this property, use <see cref="M:Terrasoft.Common.Cancellation.IContextCancellationToken.ThrowIfCancellationRequested"/> instead.
            Used internally to conditionally enable cancellation state.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.Cancellation.IContextCancellationToken.ThrowIfCancellationRequested">
            <summary>
            Throws a <see cref="T:System.OperationCanceledException" /> if this token has state with cancellation
            requested.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.Cancellation.ContextCancellationState">
            <summary>
            Context cancellation state.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.Cancellation.ContextCancellationState.DisposableResource">
            <summary>
            Disposable resource.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.Cancellation.ContextCancellationState.CancellationToken">
            <summary>
            Cancellation token.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.Cancellation.ContextCancellationState.ReentrancyMode">
            <summary>
            Reentrancy mode.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.Cancellation.ContextCancellationState.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Terrasoft.Common.Cancellation.NoOpCancelableContext">
            <summary>
            Noop cancelable context.
            </summary>
            <inheritdoc cref="T:Terrasoft.Common.Cancellation.ICancelableContext" />
        </member>
        <member name="P:Terrasoft.Common.Cancellation.NoOpCancelableContext.Instance">
            <summary>
            Instance.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.Cancellation.NoOpCancelableContext.Token">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.Cancellation.NoOpCancelableContext.Activate">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.Cancellation.NoOpCancelableContext.Cancel(System.Nullable{System.TimeSpan})">
            <param name="gracePeriod"></param>
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.Cancellation.NoOpCancelableContext.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Terrasoft.Common.Collections.SortedListWithSameKeys`2">
            <summary>
            Represents a collection of key/value pairs that are sorted by the keys and are accessible by key and by index.
            Allows to add an element with the specified key has already exists in the SortedList object.
            </summary>
            <typeparam name="TKey">Type of key.</typeparam>
            <typeparam name="TValue">Type of value.</typeparam>
        </member>
        <member name="M:Terrasoft.Common.Collections.SortedListWithSameKeys`2.DuplicateKeyComparer`1.Compare(`2,`2)">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.Collections.SortedListWithSameKeys`2.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Terrasoft.Common.Collections.SortedListWithSameKeys`2"/> class.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.CollectionUtilities">
            <summary>
            Предоставляет служебные методы для работы с коллекциями.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.CollectionUtilities.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Добавляет перечень элементов в указанный источник.
            </summary>
            <typeparam name="T">Любой тип.</typeparam>
            <param name="source">Источник.</param>
            <param name="collection">Перечень элементов - класс, реализующий интерфейс IEnumerable&lt;T&gt;.</param>
            <remarks>Расширяемый тип для класса Collection.</remarks>
        </member>
        <member name="M:Terrasoft.Common.CollectionUtilities.RemoveRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Удаляет перечень элементов из указанного источника.
            </summary>
            <typeparam name="T">Любой тип.</typeparam>
            <param name="source">Источник.</param>
            <param name="collection">Перечень элементов - класс, реализующий интерфейс IEnumerable&lt;T&gt;.</param>
            <remarks>Расширяемый тип для класса Collection.</remarks>
        </member>
        <member name="M:Terrasoft.Common.CollectionUtilities.AddIfNotExists``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            Adds an element to the specified source if it is not part of the source.
            </summary>
            <typeparam name="T">Any type.</typeparam>
            <param name="source">Source.</param>
            <param name="item">Item.</param>
            <returns>Flag that indicates when item was added or not.</returns>
        </member>
        <member name="M:Terrasoft.Common.CollectionUtilities.AddRangeIfNotExists``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Добавляет элементы коллекции в указанный источник, если они не входят в состав источника.
            </summary>
            <typeparam name="T">Любой тип.</typeparam>
            <param name="source">Источник.</param>
            <param name="collection">Коллекция.</param>
            <remarks>Расширяемый тип для класса Collection.</remarks>
        </member>
        <member name="M:Terrasoft.Common.CollectionUtilities.Find``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Поиск элемента по указанному критерию.
            </summary>
            <typeparam name="T">Любой тип.</typeparam>
            <param name="source">Элемент - объект поиска.</param>
            <param name="match">Критерий поиска.</param>
            <returns>Найденные объекты.</returns>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">Если параметр <paramref name="match"/>, задающий критерий
            поиска, пустой (<c>null</c>)</exception>
            <remarks>Расширяемый тип для классов, реализующих интерфейс IEnumerable&lt;T&gt;.</remarks>
        </member>
        <member name="M:Terrasoft.Common.CollectionUtilities.Find``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},``0)">
            <summary>
            Поиск элемента по указанному критерию.
            </summary>
            <typeparam name="T">Любой тип.</typeparam>
            <param name="source">Объект поиска.</param>
            <param name="match">Критерий поиска.</param>
            <param name="defValue">Результат поиска по умолчанию.</param>
            <returns>Найденные объекты, если поиск был успешен; иначе - результат поиска
            по умолчанию (<paramref name="defValue"/>).</returns>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">Если параметр <paramref name="match"/>, задающий критерий
            поиска, пустой.</exception>
            <remarks>Расширяемый тип для классов, реализующих интерфейс IEnumerable.</remarks>
        </member>
        <member name="M:Terrasoft.Common.CollectionUtilities.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Назначает метод каждому элементу источника.
            </summary>
            <typeparam name="T">Любой тип.</typeparam>
            <param name="source">Источник.</param>
            <param name="action">Назначаемый метод.</param>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">Если параметр <paramref name="action"/>, задающий
            назначаемый метод, пустой.</exception>
            <remarks>Расширяемый тип для классов, реализующих интерфейс IEnumerable.</remarks>
        </member>
        <member name="M:Terrasoft.Common.CollectionUtilities.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},System.Action{``0})">
            <summary>
            Назначает метод каждому элементу источника, отвечающего заданному критерию.
            </summary>
            <typeparam name="T">Любой тип.</typeparam>
            <param name="source">Источник.</param>
            <param name="match">Критерий.</param>
            <param name="action">Назначаемый метод.</param>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">Если один из передаваемых параметров
            (<paramref name="match"/>, <paramref name="action"/>) пустой.</exception>
            <remarks>Расширяемый тип для классов, реализующих интерфейс IEnumerable.</remarks>
        </member>
        <member name="M:Terrasoft.Common.CollectionUtilities.ForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Invokes asynchronous action for each item in collection.
            </summary>
            <typeparam name="T">Collection item type.</typeparam>
            <param name="source">Items collection.</param>
            <param name="action">Asynchronous action to invoke on each item.</param>
            <returns>Task that represents asynchronous operation.</returns>
        </member>
        <member name="M:Terrasoft.Common.CollectionUtilities.ParallelForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Invokes asynchronous action for each item in collection in parallel.
            </summary>
            <typeparam name="T">Collection item type.</typeparam>
            <param name="source">Items collection.</param>
            <param name="action">Asynchronous action to invoke on each item.</param>
            <returns>Task that represents asynchronous operation.</returns>
        </member>
        <member name="M:Terrasoft.Common.CollectionUtilities.ParallelForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task},System.Int32)">
            <summary>
            Invokes asynchronous action for each item in collection in parallel.
            </summary>
            <typeparam name="T">Collection item type.</typeparam>
            <param name="source">Items collection.</param>
            <param name="action">Asynchronous action to invoke on each item.</param>
            <param name="maxDegreeOfParallelism">Maximum degree of parallelism.</param>
            <returns>Task that represents asynchronous operation.</returns>
        </member>
        <member name="M:Terrasoft.Common.CollectionUtilities.GetItemsString``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Возвращает перечень объектов в виде строки. В качестве разделителя выступает запятая.
            </summary>
            <typeparam name="T">Любой тип.</typeparam>
            <param name="source">Перечень объектов.</param>
            <returns>Строковое представление объектов</returns>
            <remarks>Расширяемый метод для классов, реализующих интерфейс IEnumerable.</remarks>
        </member>
        <member name="M:Terrasoft.Common.CollectionUtilities.GetItemsString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Возвращает перечень объектов в виде строки. В качестве разделителя выступает <paramref name="delimiter"/>.
            </summary>
            <typeparam name="T">Любой тип.</typeparam>
            <param name="source">Перечень объектов.</param>
            <param name="delimiter">Разделитель.</param>
            <returns>Строковое представление объектов.</returns>
            <remarks>Расширяемый метод для классов, реализующих интерфейс IEnumerable.</remarks>
        </member>
        <member name="M:Terrasoft.Common.CollectionUtilities.Contains(System.Collections.Generic.IEnumerable{System.Guid},System.Guid)">
            <summary>
            Определяет, принадлежит ли экземпляр GUID заданному перечню <see cref="T:System.Guid"/>.
            </summary>
            <param name="source">Перечень <see cref="T:System.Guid"/>.</param>
            <param name="item">Экземпляр GUID, который необходимо найти в <see cref="T:System.Guid"/></param>
            <returns>
            <c>true</c>, если <paramref name="item"/> приналежит <paramref name="source"/>; иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.CollectionUtilities.SplitOnParts``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Splits collection to the specified parts number.
            </summary>
            <param name="source">Source collection</param>
            <param name="part">Parts count.</param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Terrasoft.Common.CollectionUtilities.IsNotEmpty(System.Collections.IEnumerable)">
            <summary>
            Определяет, является ли непустым заданный перечислитель.
            </summary>
            <param name="source">Перечислитель.</param>
            <returns>
            <c>true</c>, если перечислитель <paramref name="source"/> непустой; иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.CollectionUtilities.IsEmpty(System.Collections.IEnumerable)">
            <summary>
            Определяет, является ли заданный перечислитель пустым.
            </summary>
            <param name="source">Перечислитель.</param>
            <returns>
            <c>true</c>, если перечислитель <paramref name="source"/> пустой.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.CollectionUtilities.IsNullOrEmpty(System.Collections.IEnumerable)">
            <summary>
            Определяет, является ли заданный перечислитель пустым или <c>null</c>.
            </summary>
            <param name="source">Перечислитель.</param>
            <returns>
            <c>true</c>, если перечислитель <paramref name="source"/> пустой или <c>null</c>; иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.CollectionUtilities.IsNotNullOrEmpty(System.Collections.IEnumerable)">
            <summary>
            Определяет, не является ли заданный перечислитель пустым или <c>null</c>.
            </summary>
            <param name="source">Перечислитель.</param>
            <returns>
            <c>true</c>, если перечислитель <paramref name="source"/> не пустой и не <c>null</c>; иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.CollectionUtilities.CompareZip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,System.Boolean})">
            <summary>
            Сравнивает поэлементно две последовательности, используя указанную функцию предиката.
            </summary>
            <typeparam name="TFirst">Тип элементов первой входной последовательности.</typeparam>
            <typeparam name="TSecond">Тип элементов второй входной последовательности.</typeparam>
            <param name="source">Первая последовательность.</param>
            <param name="secondSource">Вторая последовательность.</param>
            <param name="comparePredicate">
            Функция, которая сравнивает соответствующие элементы последовательностей.
            </param>
            <remarks>
            При разном количестве элементов в коллекциях максимальное количество сравнений будет равняться
            количеству элементов в меньшей коллекции.
            </remarks>
            <returns>
            <c>true</c>, если все элементы равны или <c>false</c> при первом несовпадении.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.CollectionUtilities.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            Возвращает перечислитель элементов последовательности <paramref name="source"/>, которые отсутствуют в
            последовательности <paramref name="secondSource"/>, используя для определения равности предикат
            <paramref name="comparer"/>.
            </summary>
            <typeparam name="T">Любой тип.</typeparam>
            <param name="source">Первая последовательность.</param>
            <param name="secondSource">Вторая последовательность.</param>
            <param name="comparer">Функция, которая сравнивает элементы последовательностей.</param>
            <returns>
            Перечислитель, который содержит элементы из первой последовательности, которые отсутствуют во второй.
            </returns>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">
            Если аргумент <paramref name="source"/> или <paramref name="secondSource"/> равен <c>null</c>.
            </exception>
        </member>
        <member name="M:Terrasoft.Common.CollectionUtilities.TryGetItemByIndex``1(System.Collections.ObjectModel.Collection{``0},System.Int32,``0@)">
            <summary>
            Tries to get an item of the collection by the given index.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <param name="source">The source collection.</param>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
            <returns><c>True</c>, if item with current index is found in collection. Otherwise - <c>false</c>.
            </returns>
            <remarks>Used for thread-unsafe collections, when is not important to get item of the collection in actual
            state.</remarks>
        </member>
        <member name="T:Terrasoft.Common.ColorUtilities">
            <summary>
            Предоставляет служебные методы для работы с цветовой палитрой.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.ColorUtilities._regexHexNumber">
            <summary>
            Формат шестнадцатеричного представления цвета в модели RGB.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.ColorUtilities.BrightnessDown(System.Drawing.Color,System.Byte)">
            <summary>
            Уменьшает яркость цвета на заданную величину.
            </summary>
            <param name="baseColor">Базовый цвет.</param>
            <param name="offset">Величина, определяющая уменьшение яркости цвета.</param>
            <returns>Экземпляр класса <see cref="T:System.Drawing.Color"/>, представляющий базовый цвет <paramref name="baseColor"/> 
            яркостью, уменьшенной на величину <paramref name="offset"/>.</returns>
        </member>
        <member name="M:Terrasoft.Common.ColorUtilities.StringToColor(System.String)">
            <summary>
            Возвращает цвет, заданный строкой его шестнадцатеричного представления в модели aRGB.
            </summary>
            <param name="hexNumberString">Строка шестнадцатеричного представления цвета в модели aRGB.</param>
            <returns>Экземпляр класса <see cref="T:System.Drawing.Color"/>, представленный строкой <paramref name="hexNumberString"/>.
            </returns>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">Если в качестве значения <paramref name="hexNumberString"/>
            передается пустая строка или <c>null</c>.
            </exception>
        </member>
        <member name="T:Terrasoft.Common.CommandLine">
            <summary>
            Предоставляет методы работы с командной строкой.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.CommandLine._parameterNamePrefixes">
            <summary>
            Формат префикса параметра командной строки.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.CommandLine._parameters">
            <summary>
            Коллекция параметров командной строки.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.CommandLine.Parameters">
            <summary>
            Возвращает коллекцию параметров командной строки.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.CommandLine.HasParameters">
            <summary>
            Определяет, имеет ли командная строка параметры.
            </summary>
            <value>
            	<c>true</c> если командная строка имеет параметры; иначе - <c>false</c>.
            </value>
        </member>
        <member name="P:Terrasoft.Common.CommandLine.AllowUnnamedParameters">
            <summary>
            Возвращает или устанавливает значение, определяющее, поддерживает ли командная строка 
            неименованные параметры.
            </summary>
            <value>
            <c>true</c> если командная строка поддерживает неименованные параметры; иначе - <c>false</c>.
            </value>
        </member>
        <member name="P:Terrasoft.Common.CommandLine.AllowAdditionalParameters">
            <summary>
            Возвращает или устанавливает значение, определяющее, поддерживает ли командная строка дополнительные 
            параметры.
            </summary>
            <value>
            <c>true</c> если командная строка поддерживает дополнительные параметры; иначе - <c>false</c>.
            </value>
        </member>
        <member name="P:Terrasoft.Common.CommandLine.Item(System.String)">
            <summary>
            Возвращает <see cref="T:Terrasoft.Common.CommandLineParameter"/> с заданным 
            именем <paramref name ="parameterName"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.CommandLine.Load(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads collection of command line parameters.
            </summary>
            <param name="parametersData">Collection of command line parameters.</param>
        </member>
        <member name="M:Terrasoft.Common.CommandLine.Load(System.String[])">
            <summary>
            Loads array of command line parameters.
            </summary>
            <param name="parametersData">Array of command line parameters. Can be empty.</param>
        </member>
        <member name="T:Terrasoft.Common.CommandLineParameter">
            <summary>
            Базовый класс параметра командной строки.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.CommandLineParameter.Name">
            <summary>
            Возвращает или устанавливает имя параметра.
            </summary>
            <value>
            Имя параметра командной строки.
            </value>
        </member>
        <member name="P:Terrasoft.Common.CommandLineParameter.Description">
            <summary>
            Возвращает или устанавливает описание параметра командной строки.
            </summary>
            <value>
            Описание параметра командной строки.
            </value>
        </member>
        <member name="P:Terrasoft.Common.CommandLineParameter.IsRequired">
            <summary>
            Определяет, является ли параметр обязательным.
            </summary>
            <value>
            	<c>true</c> если параметр является обязательным; иначе - <c>false</c>.
            </value>
        </member>
        <member name="P:Terrasoft.Common.CommandLineParameter.DefValue">
            <summary>
            Возвращает или устанавливает для параметра значение по умолчанию.
            </summary>
            <value>
            Значение параметра по умолчанию.
            </value>
        </member>
        <member name="P:Terrasoft.Common.CommandLineParameter.IsSpecified">
            <summary>
            Определяет, является ли параметр определенным.
            </summary>
            <value>
            	<c>true</c> если параметр определенный; иначе - <c>false</c>.
            </value>
        </member>
        <member name="P:Terrasoft.Common.CommandLineParameter.IsValueSpecified">
            <summary>
            Определяет, является ли значение параметра определенным.
            </summary>
            <value>
            	<c>true</c> если значение параметра определено; иначе - <c>false</c>.
            </value>
        </member>
        <member name="P:Terrasoft.Common.CommandLineParameter.IsUnnamed">
            <summary>
            Определяет, является ли параметр неименованным.
            </summary>
            <value>
            	<c>true</c> если параметр является неименованным; иначе - <c>false</c>.
            </value>
        </member>
        <member name="P:Terrasoft.Common.CommandLineParameter.IsAdditional">
            <summary>
            Определяет, является ли параметр дополнительным.
            </summary>
            <value>
            	<c>true</c> если параметр является дополнительным; иначе - <c>false</c>.
            </value>
        </member>
        <member name="P:Terrasoft.Common.CommandLineParameter.Value">
            <summary>
            Возвращает или устанавливает значение параметра.
            </summary>
            <value>
            Значение параметра.
            </value>
        </member>
        <member name="M:Terrasoft.Common.CommandLineParameter.GetTypedValue``1">
            <summary>
            Возвращает тип значения.
            </summary>
            <typeparam name="T">Любой тип.</typeparam>
            <returns>Тип значения.</returns>
        </member>
        <member name="T:Terrasoft.Common.CommandLineParameterCollection">
            <summary>
            Предоставляет методы работы с коллекцией параметров командной строки.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.CommandLineParameterCollection.FindByName(System.String)">
            <summary>
            Поиск в коллекции по имени параметра.
            </summary>
            <param name="name">Имя параметра.</param>
            <returns>Экземпляр класса <see cref="T:Terrasoft.Common.CommandLineParameter"/>, представляющий найденный параметр; 
            иначе - <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException">Если имя передаваемого параметра <paramref name="name"/> пустое 
            или <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Common.CommandLineParameterCollection.GetByName(System.String)">
            <summary>
            Возвращает из коллекции параметр с заданным именем.
            </summary>
            <param name="name">Имя параметра.</param>
            <returns>Экземпляр класса <see cref="T:Terrasoft.Common.CommandLineParameter"/>, представляющий найденный параметр.</returns>
            <exception cref="T:System.ArgumentNullException">Если передаваемый параметр <paramref name="name"/> пустой 
            или <c>null</c>.</exception>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Если параметр с именем <paramref name="name"/> не найден 
            в коллекции.</exception>
        </member>
        <member name="T:Terrasoft.Common.EnumCommandLineParameter`1">
            <summary>
            Базовый класс для параметров командной строки типа перечисления.
            </summary>
            <typeparam name="TValues">Перечисление.</typeparam>
        </member>
        <member name="M:Terrasoft.Common.EnumCommandLineParameter`1.#ctor">
            <summary>
            Инициализирует экземпляр класса EnumCommandLineParameter.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.BoolCommandLineParameter">
            <summary>
            Базовый класс для параметров логического типа.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.CompilerErrorCollectionUtilities">
            <summary>
            Предоставляет методы работы с коллекциями ошибок и предупреждений компилятора.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.CompositeObject">
            <summary>
            Provides a way to store composite object content in inner Dictionary
            </summary>
        </member>
        <member name="M:Terrasoft.Common.CompositeObject.#ctor">
            <summary>
            Creates an empty instance of <see cref="T:Terrasoft.Common.CompositeObject"/>
            </summary>
        </member>
        <member name="M:Terrasoft.Common.CompositeObject.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates instance of <see cref="T:Terrasoft.Common.CompositeObject"/> and fills.
            </summary>
            <param name="source">Dictionary to fill this instance from.</param>
        </member>
        <member name="P:Terrasoft.Common.CompositeObject.Item(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Terrasoft.Common.CompositeObject.Keys">
            <inheritdoc />
        </member>
        <member name="P:Terrasoft.Common.CompositeObject.Values">
            <inheritdoc />
        </member>
        <member name="P:Terrasoft.Common.CompositeObject.Count">
            <inheritdoc cref="T:Terrasoft.Common.ICompositeObjectValues"/>
        </member>
        <member name="P:Terrasoft.Common.CompositeObject.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.CompositeObject.IsTypeSupported(System.Type)">
            <summary>
            Checks whether the type described by the <paramref name="type"/> is supported or not.
            </summary>
            <param name="type">Type to look for.</param>
            <returns><c>true</c> if supported, otherwise <c>false</c></returns>
        </member>
        <member name="M:Terrasoft.Common.CompositeObject.TryGetValue``1(System.String,``0@)">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.CompositeObject.TryGetValue(System.String,System.Type,System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.CompositeObject.Serialize(Terrasoft.Common.DataWriter)">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.CompositeObject.Deserialize(Terrasoft.Common.DataReader)">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.CompositeObject.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.CompositeObject.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.CompositeObject.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.CompositeObject.Clear">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.CompositeObject.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.CompositeObject.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.CompositeObject.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.CompositeObject.ContainsKey(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.CompositeObject.Add(System.String,System.Object)">
            <inheritdoc cref="T:Terrasoft.Common.ICompositeObjectValues"/>
        </member>
        <member name="M:Terrasoft.Common.CompositeObject.Remove(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.CompositeObject.TryGetValue(System.String,System.Object@)">
            <inheritdoc />
        </member>
        <member name="T:Terrasoft.Common.CompositeObjectList`1">
            <summary>
            Provides a way to store collection of <see cref="T:Terrasoft.Common.ICompositeObject"/> items.
            </summary>
            <typeparam name="TObject"><see cref="T:Terrasoft.Common.ICompositeObject"/> and
            <see cref="T:Terrasoft.Common.ISerializableObject"/> successors.</typeparam>
        </member>
        <member name="M:Terrasoft.Common.CompositeObjectList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Common.CompositeObjectList`1" /> type.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.CompositeObjectList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Common.CompositeObjectList`1" /> type.
            </summary>
            <param name="source">Source.</param>
        </member>
        <member name="M:Terrasoft.Common.CompositeObjectList`1.Serialize(Terrasoft.Common.DataWriter)">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.CompositeObjectList`1.Deserialize(Terrasoft.Common.DataReader)">
            <inheritdoc />
        </member>
        <member name="T:Terrasoft.Common.CompositeObjectListUtilities">
            <summary>
            Contains utilities for <see cref="T:Terrasoft.Common.CompositeObjectList`1"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.CompositeObjectListUtilities.Transform``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Replaces keys in <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">Type of contains object.</typeparam>
            <param name="source">Source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="keyMap">Map of keys to transform.</param>
            <returns>New instance of <see cref="T:Terrasoft.Common.ICompositeObjectList`1"/> with new keys.</returns>
            <exception cref="T:System.ArgumentNullException">Throws if keyMap is <c>null</c>.</exception>
        </member>
        <member name="T:Terrasoft.Common.CompressionUtilities">
            <summary>
            Предоставляет методы работы по упаковке (сжатию) и распаковке данных.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.CompressionUtilities.UnGZip(System.String)">
            <summary>
            Decompresses text, compressed using Gzip compression algorithm.
            </summary>
            <param name="zippedText">Text to decompress.</param>
            <returns>Decompressed text.</returns>
        </member>
        <member name="M:Terrasoft.Common.CompressionUtilities.Zip(System.Byte[])">
            <summary>
            Выполняет сжатие (упаковку) массива байтов.
            </summary>
            <param name="unzippedBytes">Массив байтов для сжатия (упаковки).</param>
            <returns>Массив сжатых байтов.</returns>
        </member>
        <member name="M:Terrasoft.Common.CompressionUtilities.Zip(System.String)">
            <summary>
            Выполняет сжатие (упаковку) переданной строки.
            </summary>
            <param name="unzippedText">Строка для сжатия (упаковки).</param>
            <returns>Сжатое строковое представление переданного параметра <paramref name="unzippedText"/> в 
            кодировке Base64.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.CompressionUtilities.UnZip(System.String)">
            <summary>
            Выполняет распаковку переданной строки.
            </summary>
            <param name="zippedText">Упакованная (сжатая) строка в кодировке Base64.</param>
            <returns>Распакованное строковое представление переданного параметра <paramref name="zippedText"/> 
            в кодировке Unicode.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.CompressionUtilities.UnZip(System.Byte[])">
            <summary>
            Выполняет распаковку переданного массива байтов.
            </summary>
            <param name="zippedBytes">Массив байтов для распаковки.</param>
            <returns>Массив распакованных байтов.</returns>
        </member>
        <member name="T:Terrasoft.Common.CoreDsaCryptoServiceProvider">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.CoreDsaCryptoServiceProvider.#ctor">
            <summary>
            Initialize instance <see cref="T:Terrasoft.Common.DSACryptoServiceProvider"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.CoreDsaCryptoServiceProvider.SignData(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.CoreDsaCryptoServiceProvider.VerifyData(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Terrasoft.Common.CryptoUtilities">
            <summary>
            Provides methods to generate hash values and encrypt passwords or other sensitive data.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.CryptoUtilities.GetRandomString">
            <summary>
            Returns cryptographically random string.
            </summary>
            <returns>String value.</returns>
        </member>
        <member name="M:Terrasoft.Common.CryptoUtilities.GetRandomString(System.Int32)">
            <summary>
            Returns cryptographically random string.
            </summary>
            <param name="length">Length.</param>
            <returns>String value.</returns>
        </member>
        <member name="M:Terrasoft.Common.CryptoUtilities.GetFileHash(System.String)">
            <summary>
            Returns hash of file.
            </summary>
            <param name="filePath">File path.</param>
            <returns>Hash.</returns>
        </member>
        <member name="M:Terrasoft.Common.CryptoUtilities.GetTextHash(System.String,System.Int32)">
            <summary>
            Returns hash of text.
            </summary>
            <param name="text">Text.</param>
            <param name="hashLength">If >0 hash will be truncated to specified length.</param>
            <returns>Hash.</returns>
        </member>
        <member name="T:Terrasoft.Common.DataConverter">
            <summary>
            Базовый класс преобразователя типов данных.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.DataConverter.ReadValue(Terrasoft.Common.DataReader)">
            <summary>
            Выполняет чтение значения из заданного <see cref="T:Terrasoft.Common.DataReader"/> и преобразует его в 
            значение типа данного преобразователя.
            </summary>
            <param name="reader">Источник данных для преобразования.</param>
            <returns>Значение типа данного преобразователя.</returns>
        </member>
        <member name="M:Terrasoft.Common.DataConverter.WriteValue(Terrasoft.Common.DataWriter,System.String,System.Object)">
            <summary>
            Выполняет преобразование значения заданного объекта в тип данного преобразователя и записывает его с 
            заданным именем в указанный поток вывода. 
            </summary>
            <param name="writer">Экземпляр <see cref="T:Terrasoft.Common.DataWriter"/> для записи.</param>
            <param name="name">Имя объекта.</param>
            <param name="value">Значение объекта.</param>
        </member>
        <member name="T:Terrasoft.Common.DataReader">
            <summary>
            Базовый класс для классов, реализующих последовательное чтение данных.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.DataReader.CurrentName">
            <inheritdoc />
        </member>
        <member name="P:Terrasoft.Common.DataReader.CurrentValue">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.DataReader.Close">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.DataReader.Read">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.DataReader.ReadInto">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.DataReader.ReadOut">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.DataReader.ReadNextCollectionItem">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.DataReader.GetStringValue">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.DataReader.GetGuidValue">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.DataReader.GetIntValue">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.DataReader.GetDoubleValue">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.DataReader.GetDateTimeValue">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.DataReader.GetBoolValue">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.DataReader.GetLocalizableStringValue">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.DataReader.GetStreamValue">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.DataReader.GetStreamValue(System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.DataReader.GetEnumValue``1">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.DataReader.GetValue(Terrasoft.Common.DataConverter)">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.DataReader.GetValue(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.DataReader.GetValue``1">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.DataReader.GetSerialazebleObjectValue(System.Type)">
            <summary>
            Returns the value of the serializable property/attribute at the current position of the data set, cast to
            the specified type.
            </summary>
            <param name="objectType">The value type of the serializable property/attribute.</param>
            <returns>The value of the serializable property/attribute of the type <paramref name="objectType" />.
            </returns>
            <remarks>he type of serializable property/attribute must implement the interface
            <see cref="T:System.Runtime.Serialization.ISerializable" /> or be marked with the [Serializable] attribute.
            </remarks>
        </member>
        <member name="M:Terrasoft.Common.DataReader.GetDeserializedObjectValue(System.Type)">
            <summary>
            Returns the deserialized value from all data set, cast to the specified type.
            </summary>
            <param name="objectType">Object type for deserializing.</param>
            <returns>Deserialized object value.</returns>
        </member>
        <member name="M:Terrasoft.Common.DataReader.GetSerializableObjectValue">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.DataReader.GetSerializableObjectValue``1">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.DataReader.HasValue">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.DataReader.Dispose">
            <inheritdoc cref="M:System.IDisposable.Dispose" />
        </member>
        <member name="T:Terrasoft.Common.DataTypeUtilities">
            <summary>
            Предоставляет служебные методы работы с типами данных.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.DataTypeUtilities.DBTypeToSystemType(System.Data.DbType)">
            <summary>
            Возвращает строковое представление системного типа данных, соответствующий заданному типу данных 
            базы данных. </summary>
            <param name="value">Тип данных базы данных.</param>
            <returns>Строка, представляющая системный тип данных, соответствующий типу 
            данных БД <paramref name="value"/>. </returns>
        </member>
        <member name="M:Terrasoft.Common.DataTypeUtilities.ValueAsType(System.Object,System.Type)">
            <summary>
            Выполняет приведение заданного значения к заданному типу.
            </summary>
            <param name="value">Значение.</param>
            <param name="type">Тип.</param>
            <returns>
            Объект значения <paramref name="value"/> типа <paramref name="type"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.DataTypeUtilities.ValueIsNullOrEmpty(System.Object)">
            <summary>
            Проверяет, является ли заданное значение пустым или <c>null</c>.
            </summary>
            <param name="value">Значение.</param>
            <returns>
            <c>true</c>, если значение <paramref name="value"/> является пустым или <c>null</c>; иначе - <c>false</c>.
            </returns>
        </member>
        <member name="T:Terrasoft.Common.DataWriterSettings">
            <summary>
            Provides settings for the <see cref="T:Terrasoft.Common.DataWriter"/> class.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.DataWriterSettings.WriteDefValues">
            <summary>
            Determines whether to write default values or not.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.DataWriterSettings.GetSkipDefValue``1(``0,``0)">
            <summary>
            Gets whether to skip default value or not.
            </summary>
            <param name="value">Value.</param>
            <param name="defValue">Default value.</param>
            <typeparam name="TValue">Type of the value.</typeparam>
            <returns><c>true</c> if need to skip default value, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Terrasoft.Common.DataWriter">
            <summary>
            The base class for classes that implement sequential data writing.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.DataWriter.SerializableObjectTypeFullNamePropertyName">
            <summary>
            The full type name of the serializable object, which includes the type namespace but not
            includes the assembly name.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.DataWriter.SerializableObjectValuePropertyName">
            <summary>
            Name of the property/attribute containing the value of the serializable object.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.DataWriter.WriteStartObject">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.DataWriter.WriteStartObject(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.DataWriter.WriteFinishObject">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.DataWriter.WriteValue(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.DataWriter.WriteValue(System.String,System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.DataWriter.WriteValue(System.String,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.DataWriter.WriteValue(System.String,System.Decimal,System.Decimal)">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.DataWriter.WriteValue(System.String,System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.DataWriter.WriteValue(System.String,System.Enum,System.Enum)">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.DataWriter.WriteValue(System.String,System.DateTime,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.DataWriter.WriteValue(System.String,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.DataWriter.WriteValue(System.String,Terrasoft.Common.LocalizableString,Terrasoft.Common.LocalizableString)">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.DataWriter.WriteValue(System.String,System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.DataWriter.WriteValue(System.String,Terrasoft.Common.DataConverter,System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.DataWriter.WriteValue(System.String,System.Type,System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.DataWriter.Close">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.DataWriter.WriteStartCollection(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.DataWriter.WriteFinishCollection">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.DataWriter.WriteValue(System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.DataWriter.WriteSerializableObjectValue(System.String,System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.DataWriter.WriteRawValue(System.String,System.Object)">
            <summary>
            Write the raw value to property.
            </summary>
            <param name="name">Property name.</param>
            <param name="value">Raw value.</param>
        </member>
        <member name="M:Terrasoft.Common.DataWriter.Dispose">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="T:Terrasoft.Common.Data.IDataReader">
            <summary>
            The base interface for classes that implements sequential data reading.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.Data.IDataReader.CurrentName">
            <summary>
            Returns the name of the property that is at the current position of the dataset.
            </summary>
            <value>The name of the property that is in the current position of the dataset.</value>
        </member>
        <member name="P:Terrasoft.Common.Data.IDataReader.CurrentValue">
            <summary>
            Returns the current value of the property, which is located in the current position of the data set.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.Data.IDataReader.Close">
            <summary>
            Closes the current instance <see cref="T:Terrasoft.Common.DataReader" />.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.Data.IDataReader.Read">
            <summary>
            Moves the current position in the data set to the next property/attribute of the current nesting level.
            </summary>
            <returns> A string with the name of the property/attribute in the position of the data set after the
            method is executed or an empty line if the end of the data set is reached.</returns>
        </member>
        <member name="M:Terrasoft.Common.Data.IDataReader.ReadInto">
            <summary>
            Moves the current position in the data set one nesting level down.
            </summary>
            <returns>A string with the name of the property/attribute in the position of the data set after the
            method is executed, or an empty string if there are no nested properties/attributes at the
            current level.</returns>
        </member>
        <member name="M:Terrasoft.Common.Data.IDataReader.ReadOut">
            <summary>
            Moves the current position in the data set one nesting level up.
            </summary>
            <returns>Empty line. To get the name of the next property / attribute, you must call
            <see cref="M:Terrasoft.Common.DataReader.Read" />.</returns>
        </member>
        <member name="M:Terrasoft.Common.Data.IDataReader.ReadNextCollectionItem">
            <summary>
            Moves the current position in the collection to the next element.
            </summary>
            <returns><c> true </c> if the current position in the collection is moved to the next element;
            <c> false </c> - if the last element of the collection has been reached.</returns>
        </member>
        <member name="M:Terrasoft.Common.Data.IDataReader.GetStringValue">
            <summary>
            Returns a string representation of the property/attribute value that is in the current position
            of the dataset.
            </summary>
            <returns>The current value of the property/attribute of type <see cref="T:System.String" />.</returns>
        </member>
        <member name="M:Terrasoft.Common.Data.IDataReader.GetGuidValue">
            <summary>
            Returns an instance of <see cref="T:System.Guid" /> corresponding to the value of the property/attribute
            that are in the current position of the data set.
            </summary>
            <returns>The current value of a property/attribute of type <see cref="T:System.Guid" />.</returns>
        </member>
        <member name="M:Terrasoft.Common.Data.IDataReader.GetIntValue">
            <summary>
            Returns an instance of <see cref="T:System.Int32" /> corresponding to the value of the property/attribute
            that are in the current position of the data set.
            </summary>
            <returns>The current value of a property/attribute of type <see cref="T:System.Int32" />.</returns>
        </member>
        <member name="M:Terrasoft.Common.Data.IDataReader.GetDoubleValue">
            <summary>
            Returns an instance of <see cref="T:System.Double" /> corresponding to the value of the property/attribute
            that are in the current position of the data set.
            </summary>
            <returns>The current value of the property/attribute of type <see cref="T:System.Double" />.</returns>
        </member>
        <member name="M:Terrasoft.Common.Data.IDataReader.GetDateTimeValue">
            <summary>
            Returns an instance of <see cref="T:System.DateTime" /> corresponding to the value of the
            property/attribute that are in the current position of the data set.
            </summary>
            <returns>The current value of a property/attribute of type <see cref="T:System.DateTime" />.</returns>
        </member>
        <member name="M:Terrasoft.Common.Data.IDataReader.GetBoolValue">
            <summary>
            Returns an instance of <see cref="T:System.Boolean" /> corresponding to the value of the property/attribute
            that are in the current position of the data set.
            </summary>
            <returns>The current value of the property/attribute of type <see cref="T:System.Boolean" />.</returns>
        </member>
        <member name="M:Terrasoft.Common.Data.IDataReader.GetLocalizableStringValue">
            <summary>
            Returns an instance of <see cref="T:Terrasoft.Common.LocalizableString" /> corresponding to the value
            of the property/attribute that are in the current position of the data set.
            </summary>
            <returns>The current value of the property/attribute of type
            <see cref="T:Terrasoft.Common.LocalizableString" />.</returns>
        </member>
        <member name="M:Terrasoft.Common.Data.IDataReader.GetStreamValue">
            <summary>
            Returns a new instance of <see cref="T:System.IO.Stream" />, corresponding to the value of the
            property/attribute, which are in the current position of the data set.
            </summary>
            <returns>The current value of the property/attribute of type <see cref="T:System.IO.Stream" />.</returns>
        </member>
        <member name="M:Terrasoft.Common.Data.IDataReader.GetStreamValue(System.IO.Stream)">
            <summary>
            Writes the contents of the current instance <see cref="T:Terrasoft.Common.DataReader" /> to the specified
            stream.
            </summary>
            <param name = "stream">The stream that is being recorded.</param>
        </member>
        <member name="M:Terrasoft.Common.Data.IDataReader.GetEnumValue``1">
            <summary>
            Returns an enum element corresponding to the property/attribute value that are in the current
            position of the data set.
            </summary>
            <typeparam name = "TValue">An enum value of any type.</typeparam>
            <returns>An enum element corresponding to the current property/attribute value.</returns>
        </member>
        <member name="M:Terrasoft.Common.Data.IDataReader.GetValue(Terrasoft.Common.DataConverter)">
            <summary>
            Returns an object representing the value of the property/attribute at the current position of the data set
            converted according to the specified type of transformation.
            </summary>
            <param name="converter">Transformation type.</param>
            <returns>The current value of the property/attribute of <see cref="T:System.Object" /> type,
            converted according to <paramref name="converter" />.</returns>
        </member>
        <member name="M:Terrasoft.Common.Data.IDataReader.GetValue(System.Type)">
            <summary>
            Returns the value of the property/attribute at the current position of the data set,
            converted to the specified type.
            </summary>
            <param name="valueType">Type.</param>
            <returns>The current value of the property/attribute converted to the type <paramref name="valueType" />.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.Data.IDataReader.GetValue``1">
            <summary>
            Returns the value of a specific type of property/attribute at the current position of the data set,
            converting it to a specific type.
            </summary>
            <typeparam name="TValue">The value of any type.</typeparam>
            <returns>The converted value of the property/attribute.</returns>
        </member>
        <member name="M:Terrasoft.Common.Data.IDataReader.GetSerializableObjectValue">
            <summary>
            Returns the value of the serializable property/attribute at the current position of the dataset.
            </summary>
            <returns>The value of the serializable property/attribute of type <see cref="T:System.Object" />.</returns>
            <remarks>The type of serializable property/attribute must implement the interface
            <see cref="T:System.Runtime.Serialization.ISerializable" /> or be marked with the [Serializable] attribute.
            </remarks>
        </member>
        <member name="M:Terrasoft.Common.Data.IDataReader.GetSerializableObjectValue``1">
            <summary>
            Returns the value of a specific type of serializable property/attribute at the current position of the
            data set.
            </summary>
            <typeparam name="TValue">The value type of the serializable property/attribute.</typeparam>
            <returns>The value of the serializable property/attribute of the type <typeparamref name="TValue" />.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.Data.IDataReader.HasValue">
            <summary>
            Indicates that there is a value to read in the current position of the data set.
            </summary>
            <returns><c>true</c>, if there is a value to read, otherwise - <c>false</c>.</returns>
        </member>
        <member name="T:Terrasoft.Common.Data.IDataWriter">
            <summary>
            The base interface for classes that implements sequential data writing.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.Data.IDataWriter.WriteStartObject">
            <summary>
            Writes the root element to the output stream.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.Data.IDataWriter.WriteStartObject(System.String)">
            <summary>
            Writes the root element with the specified name to the output stream.
            </summary>
            <param name="name">The name of the root element.</param>
        </member>
        <member name="M:Terrasoft.Common.Data.IDataWriter.WriteFinishObject">
            <summary>
            Finishes writing the item to the output stream.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.Data.IDataWriter.WriteValue(System.String,System.String,System.String)">
            <summary>
            Writes the value of an element with a given name and a given default value (for string values).
            </summary>
            <param name="name">Name of the element.</param>
            <param name="value">The value of an element of type <see cref="T:System.String" />.</param>
            <param name="defValue">The default value for the item.</param>
            <remarks>Overloaded method.</remarks>
        </member>
        <member name="M:Terrasoft.Common.Data.IDataWriter.WriteValue(System.String,System.Guid,System.Guid)">
            <summary>
            Writes the value of an element with a given name and a given default value (for guid values).
            </summary>
            <param name="name">Name of the element.</param>
            <param name="value">The value of an element of type <see cref="T:System.Guid" />.</param>
            <param name="defValue">The default value for the item.</param>
            <remarks>Overloaded method.</remarks>
        </member>
        <member name="M:Terrasoft.Common.Data.IDataWriter.WriteValue(System.String,System.Int32,System.Int32)">
            <summary>
            Writes the value of an element with a given name and a given default value (for int values).
            </summary>
            <param name="name">Name of the element.</param>
            <param name="value">The value of an element of type <see cref="T:System.Int32" />.</param>
            <param name="defValue">The default value for the item.</param>
            <remarks>Overloaded method.</remarks>
        </member>
        <member name="M:Terrasoft.Common.Data.IDataWriter.WriteValue(System.String,System.Decimal,System.Decimal)">
            <summary>
            Writes the value of an element with a given name and a given default value (for decimal values).
            </summary>
            <param name="name">Name of the element.</param>
            <param name="value">The value of an element of type <see cref="T:System.decimal" />.</param>
            <param name="defValue">The default value for the item.</param>
            <remarks>Overloaded method.</remarks>
        </member>
        <member name="M:Terrasoft.Common.Data.IDataWriter.WriteValue(System.String,System.Double,System.Double)">
            <summary>
            Writes the value of an element with a given name and a given default value (for double values).
            </summary>
            <param name="name">Name of the element.</param>
            <param name="value">The value of an element of type <see cref="T:System.double" />.</param>
            <param name="defValue">The default value for the item.</param>
            <remarks>Overloaded method.</remarks>
        </member>
        <member name="M:Terrasoft.Common.Data.IDataWriter.WriteValue(System.String,System.Enum,System.Enum)">
            <summary>
            Writes the value of an element with a given name and a given default value (for enum values).
            </summary>
            <param name="name">Name of the element.</param>
            <param name="value">The value of an element of type <see cref="T:System.Enum" />.</param>
            <param name="defValue">The default value for the item.</param>
            <remarks>Overloaded method.</remarks>
        </member>
        <member name="M:Terrasoft.Common.Data.IDataWriter.WriteValue(System.String,System.DateTime,System.DateTime)">
            <summary>
            Writes the value of an element with a given name and a given default value (for DateTime values).
            </summary>
            <param name="name">Name of the element.</param>
            <param name="value">The value of an element of type <see cref="T:System.DateTime" />.</param>
            <param name="defValue">The default value for the item.</param>
            <remarks>Overloaded method.</remarks>
        </member>
        <member name="M:Terrasoft.Common.Data.IDataWriter.WriteValue(System.String,System.Boolean,System.Boolean)">
            <summary>
            Writes the value of an element with a given name and a given default value (for boolean values).
            </summary>
            <param name="name">Name of the element.</param>
            <param name="value">The value of an element of type <see cref="T:System.bool" />.</param>
            <param name="defValue">The default value for the item.</param>
            <remarks>Overloaded method.</remarks>
        </member>
        <member name="M:Terrasoft.Common.Data.IDataWriter.WriteValue(System.String,Terrasoft.Common.LocalizableString,Terrasoft.Common.LocalizableString)">
            <summary>
            Writes the value of an element with a given name and a given default value (for localizable string values).
            </summary>
            <param name="name">Name of the element.</param>
            <param name="value">The value of an element of type <see cref="T:Terrasoft.LocalizableString" />.</param>
            <param name="defValue">The default value for the item.</param>
            <remarks>Overloaded method.</remarks>
        </member>
        <member name="M:Terrasoft.Common.Data.IDataWriter.WriteValue(System.String,System.IO.Stream)">
            <summary>
            Writes the value of the element with the given name and the values ​​from the specified stream.
            </summary>
            <param name="name">Name of the element.</param>
            <param name="value">The stream from which the recording is made.</param>
            <remarks>Overloaded method.</remarks>
        </member>
        <member name="M:Terrasoft.Common.Data.IDataWriter.WriteValue(System.String,Terrasoft.Common.DataConverter,System.Object,System.Object)">
            <summary>
            Writes the value of an element with a given name and a given default value, transformed
            in accordance with the specified type of transformation.
            </summary>
            <param name="name">Name of the element.</param>
            <param name="converter">Transformation type.</param>
            <param name="value">Value.</param>
            <param name="defValue">Default value.</param>
            <remarks>Overloaded method.</remarks>
        </member>
        <member name="M:Terrasoft.Common.Data.IDataWriter.WriteValue(System.String,System.Type,System.Object,System.Object)">
            <summary>
            Writes the value of an element with a given name and a given default value, converted
            to the specified type.
            </summary>
            <param name="name">Name of the element.</param>
            <param name="valueType">Value type.</param>
            <param name="value">Value.</param>
            <param name="defValue">Default value.</param>
            <remarks>Overloaded method.</remarks>
        </member>
        <member name="M:Terrasoft.Common.Data.IDataWriter.Close">
            <summary>
            Closes the current instance <see cref="T:Terrasoft.Common.DataWriter" />.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.Data.IDataWriter.WriteStartCollection(System.String)">
            <summary>
            Starts recording the collection with the given name.
            </summary>
            <param name="name">The name of the collection.</param>
        </member>
        <member name="M:Terrasoft.Common.Data.IDataWriter.WriteFinishCollection">
            <summary>
            Ends recording the current collection.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.Data.IDataWriter.WriteValue(System.Object[])">
            <summary>
            Writes a given array of values.
            </summary>
            <param name="values">An array of values.</param>
            <remarks>Overloaded method.</remarks>
        </member>
        <member name="M:Terrasoft.Common.Data.IDataWriter.WriteSerializableObjectValue(System.String,System.Object,System.Object)">
            <summary>
            Serializes and writes a given object as value.
            </summary>
            <param name="name">Name of the element.</param>
            <param name="value">Value.</param>
            <param name="defValue">Default value.</param>
        </member>
        <member name="T:Terrasoft.Common.DateTimeFormatInfoUtilities">
            <summary>
            Exends class <see cref="T:System.Globalization.DateTimeFormatInfo"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.DateTimeFormatInfoUtilities.GetShortDayMonthPattern(System.Globalization.DateTimeFormatInfo)">
            <summary>
            Returns short day month pattern.
            </summary>
            <param name="source"> instance <see cref="T:System.Globalization.DateTimeFormatInfo"/>.</param>
            <returns>String short day/month pattern.</returns>
        </member>
        <member name="M:Terrasoft.Common.DateTimeFormatInfoUtilities.GetShortYearMonthPattern(System.Globalization.DateTimeFormatInfo)">
            <summary>
            Returns short month year pattern.
            </summary>
            <param name="source"> instance <see cref="T:System.Globalization.DateTimeFormatInfo"/>.</param>
            <returns>String short month/year pattern.</returns>
        </member>
        <member name="M:Terrasoft.Common.DateTimeFormatInfoUtilities.FixYearPart(System.String)">
            <summary>
            Sets four digits year part to format.
            </summary>
            <param name="source">Date format string.</param>
            <returns>Date format string with fixed year part.</returns>
        </member>
        <member name="T:Terrasoft.Common.DateTimeUtilities">
            <summary>
            Содержит служебные методы для работы с датой и временем.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.DateTimeUtilities.JavascriptMinDateTime">
            <summary>
            Javascript date object min value.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.DateTimeUtilities.ConvertToUtc(System.DateTime,System.TimeZoneInfo)">
            <summary>
            Converts time in specified <paramref name="timeZone"/> to Coordinated Universal Time (UTC).
            </summary>
            <param name="source">Date and time to convert.</param>
            <param name="timeZone">Time zone of date and time value.</param>
            <returns>The Coordinated Universal Time (UTC) that corresponds to the date and time value with 
            specified <paramref name="timeZone"/>.</returns>
        </member>
        <member name="M:Terrasoft.Common.DateTimeUtilities.ToDateTime(System.TimeSpan)">
            <summary>
            Returns <see cref="T:System.DateTime"/> instance that is set to the <paramref name="time"/> for today.
            </summary>
            <param name="time">Time of the day.</param>
        </member>
        <member name="M:Terrasoft.Common.DateTimeUtilities.DateTimeToDate(System.DateTime,System.Int32,System.Boolean)">
            <summary>
            Returns new instance of class <see cref="T:System.DateTime"/>, which equals received instance
            <see cref="T:System.DateTime"/> with additional days.</summary>
            <param name="value">Base value of date and time.</param>
            <param name="dayOffset">Days offset. Parameter <paramref name="dayOffset"/> can be
            positive or negative.</param>
            <param name="useSpecifiedKind">Use <c>true</c> if method should return date as DateTimeKind.Utc.</param>
            <returns>Instance of <see cref="T:System.DateTime"/>, which value is equal to the sum of the date and time, 
            provided from parameters <paramref name="value"/>, and the number of days, provided 
            from parameter <paramref name="dayOffset"/>.</returns>
            <remarks>Instance of <see cref="T:System.DateTime"/> contains only Date component of date.
            </remarks>
        </member>
        <member name="M:Terrasoft.Common.DateTimeUtilities.StartOfWeek(System.DateTime,System.Int32)">
            <summary>
            Start date of the week for a given value <see cref="T:System.DateTime"/>
            with week offset <paramref name="weekOffset"/>.
            </summary>
            <param name="value">Date and time value.</param>
            <param name="weekOffset">The week offset. Parametr <paramref name="weekOffset"/> can
            be positive or negative.</param>
            <returns>Instance <see cref="T:System.DateTime"/>, which is the first day of the week for the date and
            time for a given value <paramref name="value"/> with week offset <paramref name="weekOffset"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.DateTimeUtilities.StartOfMonth(System.DateTime,System.Int32)">
            <summary>
            Дата начала месяца для переданного экземпляра <see cref="T:System.DateTime"/>.</summary>
            <param name="value">Значение даты и времени.</param>
            <param name="monthOffset">Смещение в кварталах. Параметр <paramref name="monthOffset"/> может
            быть положительным или отрицательным.</param>
            <returns>Экземпляр <see cref="T:System.DateTime"/>, который представляет первый день месяца для даты и 
            времени, переданных параметром <paramref name="value"/>.</returns>
        </member>
        <member name="M:Terrasoft.Common.DateTimeUtilities.StartOfQuarter(System.DateTime,System.Int32)">
            <summary>
            Дата начала квартала для переданного экземпляра <see cref="T:System.DateTime"/>.</summary>
            <param name="value">Значение даты и времени.</param>
            <param name="quarterOffset">Смещение в днях. Параметр <paramref name="quarterOffset"/> может 
            быть положительным или отрицательным.</param>
            <returns>Экземпляр <see cref="T:System.DateTime"/>, который представляет первый день квартала для даты и 
            времени, переданных параметром <paramref name="value"/>.</returns>
        </member>
        <member name="M:Terrasoft.Common.DateTimeUtilities.StartOfHalfYear(System.DateTime,System.Int32)">
            <summary>
            Дата начала полугодия для переданного экземпляра <see cref="T:System.DateTime"/>.
            </summary>
            <param name="value">Значение даты и времени.</param>
            <param name="halfYearOffset">Смещение в полугодиях. Параметр <paramref name="halfYearOffset"/> может
            быть положительным или отрицательным.</param>
            <returns>Экземпляр <see cref="T:System.DateTime"/>, который представляет первый день полугодия для даты и 
            времени, переданных параметром <paramref name="value"/>.</returns>
        </member>
        <member name="M:Terrasoft.Common.DateTimeUtilities.StartOfYear(System.DateTime,System.Int32)">
            <summary>
            Дата начала года для переданного экземпляра <see cref="T:System.DateTime"/>.
            </summary>
            <param name="value">Значение даты и времени.</param>
            <param name="yearOffset">Смещение в годах. Параметр <paramref name="yearOffset"/> может быть
            положительным или отрицательным.</param>
            <returns>Экземпляр <see cref="T:System.DateTime"/>, который представляет первый день года для даты и 
            времени, переданных параметром <paramref name="value"/>.</returns>
        </member>
        <member name="M:Terrasoft.Common.DateTimeUtilities.StartOfHour(System.DateTime,System.Int32)">
            <summary>
            Дата начала часа для переданного экземпляра <see cref="T:System.DateTime"/>.
            </summary>
            <param name="value">Значение даты и времени.</param>
            <param name="hourOffset">Смещение в часах. Параметр <paramref name="hourOffset"/> может быть
            положительным или отрицательным.</param>
            <returns>Экземпляр <see cref="T:System.DateTime"/>, который представляет первую минуту часа для даты и 
            времени, переданных параметром <paramref name="value"/>.</returns>
        </member>
        <member name="M:Terrasoft.Common.DateTimeUtilities.GetTimeTillMinutes(System.TimeSpan,System.Int32)">
            <summary>
            Получение времени с точностью до минут.
            </summary>
            <param name="value">Значение времени.</param>
            <param name="minuteOffset">Смещение в минутах.</param>
            <returns>Экземпляр <see cref="T:System.TimeSpan"/>, который представляет часы и минуты, 
            переданных параметром <paramref name="value"/>.</returns>
        </member>
        <member name="M:Terrasoft.Common.DateTimeUtilities.Day(System.DateTime)">
            <summary>
            Возвращает день месяца для даты.
            </summary>
            <param name="datetime">Дата типа <see cref="T:System.DateTime"/>.</param>
            <returns>День месяца в диапазоне от 1 до 31.</returns>
        </member>
        <member name="M:Terrasoft.Common.DateTimeUtilities.Month(System.DateTime)">
            <summary>
            Возвращает месяц для даты.
            </summary>
            <param name="datetime">Дата типа <see cref="T:System.DateTime"/>.</param>
            <returns>Месяц в диапазоне от 1 до 12.</returns>
        </member>
        <member name="M:Terrasoft.Common.DateTimeUtilities.Time(System.DateTime)">
            <summary>
            Возвращает время дня для даты.
            </summary>
            <param name="datetime">Дата типа <see cref="T:System.DateTime"/>.</param>
            <returns>Время дня типа <see cref="T:System.TimeSpan"/>.</returns>
        </member>
        <member name="M:Terrasoft.Common.DateTimeUtilities.Time(System.String)">
            <summary>
            Возвращает время, заданное строкой.
            </summary>
            <param name="timeString">Время, заданное в формате "чч:мм" или "ч:мм".</param>
            <returns>Время дня типа <see cref="T:System.TimeSpan"/>.</returns>
        </member>
        <member name="M:Terrasoft.Common.DateTimeUtilities.DayOfWeek(System.DateTime)">
            <summary>
            Возвращает номер дня недели для даты.
            </summary>
            <param name="datetime">Дата типа <see cref="T:System.DateTime"/>.</param>
            <returns>Номер дня недели: 1 - понедельник, 7 - воскресенье.</returns>
        </member>
        <member name="M:Terrasoft.Common.DateTimeUtilities.DayInRange(System.DateTime,System.DateTime,System.Int32,System.Int32)">
            <summary>
            Возвращает истину, если день даты datetime1 лежит в диапазоне datetime2 – BeforeDays и
            datetime2 + AfterDays. 
            </summary>
            <param name="datetime1">Проверяемая дата.</param>
            <param name="datetime2">Дата, задающая диапазон.</param>
            <param name="daysBefore">Количество дней до даты datetime2 (нижняя граница диапазона)</param>
            <param name="daysAfter">Количество дней после даты datetime2 (верхняя граница диапазона)</param>
            <returns></returns>
        </member>
        <member name="T:Terrasoft.Common.DBUtilities">
            <summary>
            Предоставляет служебные методы для работы с объектами базы данных.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.DBUtilities.GetIsDBObjectNameValid(System.String)">
            <summary>
            Проверяет, является ли переданное значение допустимым именем объекта базы данных.
            </summary>
            <param name="dbName">Строка - имя объекта базы данных.</param>
            <returns><c>true</c>, если переданное значение <paramref name="dbName"/> является непустым допустимым 
            именем объекта базы данных.</returns>
        </member>
        <member name="M:Terrasoft.Common.DBUtilities.GetUniqueDBObjectName(System.String,System.Guid,System.String)">
            <summary>
            Возвращает сформированное уникальное имя объекта базы данных, которое включает в себя префикс, 
            идентификатор объекта, суффикс.</summary>
            <param name="prefix">Префикс.</param>
            <param name="id">Идентификатор.</param>
            <param name="suffix">Суффикс.</param>
            <returns>Строка, представляющая уникальное имя объекта базы данных, состоящая из префикса 
            <paramref name="prefix"/>, индентификатора <paramref name="id"/>, суффикса <paramref name="suffix"/>.
            </returns>
            <remarks>Перегруженый метод.</remarks>
        </member>
        <member name="M:Terrasoft.Common.DBUtilities.GetUniqueDBObjectName(System.String,System.Guid,System.Guid,System.String)">
            <summary>
            Возвращает сформированное уникальное имя объекта базы данных, которое включает в себя префикс, 
            идентификатор схемы, идентификатор объекта, суффикс.</summary>
            <param name="prefix">Префикс.</param>
            <param name="schemaUId">Идентификатор схемы.</param>
            <param name="objectUId">Идентификатор объекта.</param>
            <param name="suffix">Суффикс.</param>
            <returns>Строка, представляющая уникальное имя объекта базы данных, состоящая из префикса 
            <paramref name="prefix"/>, идентификатора схемы <paramref name="schemaUId"/>, идентификатора объекта 
            <paramref name="objectUId"/>, суффикса <paramref name="suffix"/>.</returns>
            <remarks>Перегруженный метод.</remarks>
        </member>
        <member name="M:Terrasoft.Common.DBUtilities.GetUniqueDBObjectName(System.String,System.Guid,System.Guid)">
            <summary>
            Возвращает сформированное уникальное имя объекта базы данных, которое включает в себя префикс, идентификатор
            схемы, идентификатор объекта.</summary>
            <param name="prefix">Префикс.</param>
            <param name="schemaUId">Идентификатор схемы.</param>
            <param name="objectUId">Идентификатор объекта.</param>
            <returns>Строка, представляющая уникальное имя объекта базы данных, состоящая из префикса
            <paramref name="prefix"/>, идентификатора схемы <paramref name="schemaUId"/>, идентификатора объекта 
            <paramref name="objectUId"/>.</returns>
        </member>
        <member name="M:Terrasoft.Common.DBUtilities.GetUniqueDBObjectName(System.String,System.Guid)">
            <summary>
            Возвращает сформированное уникальное имя объекта базы данных, которое включает в себя префикс, 
            идентификатор объекта. </summary>
            <param name="prefix">Префикс.</param>
            <param name="objectUId">Идентификатор объекта.</param>
            <returns>Строка, представляющая уникальное имя объекта базы данных, состоящая из префикса 
            <paramref name="prefix"/>, идентификатора объекта <paramref name="objectUId"/>.</returns>
        </member>
        <member name="M:Terrasoft.Common.DBUtilities.GetDBParameterDirection(Terrasoft.Common.ParameterDirection)">
            <summary>
            Возвращает системный тип по заданному экземпляру <see cref="T:Terrasoft.Common.ParameterDirection"/>.
            </summary>
            <param name="direction">Экземпляр <see cref="T:Terrasoft.Common.ParameterDirection"/></param>
            <returns>Элемент перечисления <see cref="T:System.Data.ParameterDirection"/>, соответствующий переданному
            значению <paramref name="direction"/>.</returns>
            <exception cref="T:Terrasoft.Common.UnsupportedTypeException">Если в качестве <paramref name="direction"/> передано значение,
            не являющееся элементом перечисления <see cref="T:Terrasoft.Common.ParameterDirection"/>.</exception>
        </member>
        <member name="M:Terrasoft.Common.DBUtilities.GetColumnValue``1(System.Data.IDataReader,System.String)">
            <summary>
            Возвращает значение заданной колонки данного типа текущего набора данных.
            </summary>
            <typeparam name="T">Любой тип.</typeparam>
            <param name="source">Набор данных.</param>
            <param name="columnName">Имя колонки.</param>
            <returns>Тип значения колонки <paramref name="columnName"/>.</returns>
            <remarks>
            <para>Перегруженный метод.</para>
            <para>Метод расширения классов, реализующих интерфейс <see cref="T:System.Data.IDataReader"/>.</para>
            </remarks>
        </member>
        <member name="M:Terrasoft.Common.DBUtilities.GetAllColumnValues``1(System.Data.IDataReader,System.String)">
            <summary>
            Returns set of values from column <paramref name="columnName"/>.
            </summary>
            <typeparam name="T">Value type.</typeparam>
            <param name="source">The instance of implementation of the <see cref="T:System.Data.IDataReader"/>.</param>
            <param name="columnName">Column name.</param>
            <returns>Set of values from column <paramref name="columnName"/>.</returns>
        </member>
        <member name="M:Terrasoft.Common.DBUtilities.GetColumnValue(System.Data.IDataReader,System.String)">
            <summary>
            Возвращает значение колонки с заданным именем текущего набора данных.
            </summary>
            <param name="source">Набор данных.</param>
            <param name="columnName">Имя колонки.</param>
            <returns>Объект, представляющий значение колонки <paramref name="columnName"/>.</returns>
            <remarks>
            <para>Перегруженный метод.</para>
            <para>Метод расширения классов, реализующих интерфейс <see cref="T:System.Data.IDataReader"/>.</para>
            </remarks>
        </member>
        <member name="M:Terrasoft.Common.DBUtilities.GetStreamValue(System.Data.IDataReader,System.String)">
            <summary>
            Возвращает значение типа <see cref="T:System.IO.Stream"/> колонки с заданным именем текущего набора данных.
            </summary>
            <param name="source">Набор данных.</param>
            <param name="columnName">Имя колонки.</param>
            <returns>Объект <see cref="T:System.IO.Stream"/>, представляющий значение колонки 
            <paramref name="columnName"/>.</returns>
            <remarks>Метод расширения классов, реализующих интерфейс <see cref="T:System.Data.IDataReader"/>.</remarks>
        </member>
        <member name="M:Terrasoft.Common.DBUtilities.ReadToDataTable(System.Data.IDataReader,System.String)">
            <summary>
            Помещает текущий набор данных в экземпляр <see cref="T:System.Data.DataTable"/> с заданным именем.
            </summary>
            <param name="source">Набор данных.</param>
            <param name="name">Имя создаваемого экземпляра <see cref="T:System.Data.DataTable"/>.</param>
            <returns>
            Экземпляр <see cref="T:System.Data.DataTable"/>, содержащий данные набора <paramref name="source"/>.
            </returns>
            <remarks>
            Метод расширения классов, реализующих интерфейс <see cref="T:System.Data.IDataReader"/>.
            </remarks>
        </member>
        <member name="T:Terrasoft.Common.DefaultResourceManager">
            <summary>
            Represents a resource manager that provides Null Object behavior for access to culture-specific resources.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.DefaultResourceManager.GetString(System.String)">
            <summary>
            Returns the same value as the specified string resource <paramref name="name"/>.
            </summary>
            <param name="name">The name of the resource to retrieve.</param>
            <returns>Same value as the specified string resource <paramref name="name"/>.</returns>
        </member>
        <member name="M:Terrasoft.Common.DefaultResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns the same value as the specified string resource <paramref name="name"/> for all localizations.
            </summary>
            <param name="name">The name of the resource to retrieve.</param>
            <param name="culture">An object that represents the culture for which the resource is localized.</param>
            <returns>Same value as the specified string resource <paramref name="name"/>.</returns>
        </member>
        <member name="M:Terrasoft.Common.DefaultResourceManager.GetStringWithCultureFallback(System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns the same value as the specified string resource <paramref name="name"/> for all localizations.
            </summary>
            <param name="name">The name of the resource to retrieve.</param>
            <param name="culture">An object that represents the culture for which the resource is localized.</param>
            <returns>Same value as the specified string resource <paramref name="name"/>.</returns>
        </member>
        <member name="M:Terrasoft.Common.DefaultResourceManager.GetObjectWithCultureFallback(System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns the same value as the specified resource <paramref name="name"/> for all localizations.
            </summary>
            <param name="name">The name of the resource to retrieve.</param>
            <param name="culture">An object that represents the culture for which the resource is localized.</param>
            <returns>Same value as the specified resource <paramref name="name"/>.</returns>
        </member>
        <member name="T:Terrasoft.Common.DESCryptoServiceProvider">
            <summary>
            Предоставляет методы шифрования текста по алгоритму DES.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.DESCryptoServiceProvider.#ctor">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Common.DESCryptoServiceProvider"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.DESCryptoServiceProvider.#ctor(System.String)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Common.DESCryptoServiceProvider"/>
            c указанием секретного ключа.
            </summary>
            <param name="secretKey">Ключ в формате base64String.</param>
            <returns>Строка, представляющая зашифрованный текст в формате base64.</returns>
        </member>
        <member name="M:Terrasoft.Common.DESCryptoServiceProvider.Dispose(System.Boolean)">
            <summary>
            Выполняет удаление, высвобождение и сброс ресурсов. 
            </summary>
            <param name="disposing">
            Значение <c>true</c> для освобождения управляемых и неуправляемых ресурсов; значение <c>false</c> для 
            освобождения только неуправляемых ресурсов.</param>
        </member>
        <member name="M:Terrasoft.Common.DESCryptoServiceProvider.Dispose">
            <summary>
            Выполняет удаление, высвобождение и сброс ресурсов. Отменяет вызов Finalize() для данного экземпляра.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.DESCryptoServiceProvider.Encrypt(System.String)">
            <summary>
            Шифрует заданный текст в по алгоритму DES.
            </summary>
            <param name="text">Текст для шифрования.</param>
            <returns>Строка, представляющая зашифрованный текст в формате base64.</returns>
        </member>
        <member name="M:Terrasoft.Common.DESCryptoServiceProvider.Decrypt(System.String)">
            <summary>
            Расшифровывает заданный текст по алгоритму DES.
            </summary>
            <param name="cypherText">Текст для расшифровки в формате base64.</param>
            <returns>Строка, представляющая расшифрованный текст.</returns>
        </member>
        <member name="T:Terrasoft.Common.Diagnostics.IStopwatchFactory">
            <summary>
            Provides methods to create instances responsible for measuring elapsed time.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.Diagnostics.IStopwatchFactory.Create">
            <summary>
            Creates instance responsible for measuring elapsed time.
            </summary>
            <returns>Instance responsible for measuring elapsed time.</returns>
        </member>
        <member name="T:Terrasoft.Common.DictionaryUtilities">
            <summary>
            Содержит служебные методы работы со словарями. 
            </summary>
        </member>
        <member name="M:Terrasoft.Common.DictionaryUtilities.AddRangeIfNotExist``1(System.Collections.Generic.Dictionary{``0,``0},System.Collections.Generic.Dictionary{``0,``0})">
            <summary>
            Осуществляет добавление в данный экземпляр заданного словаря, если элементы добавляемого словаря не входят 
            в состав данного экземпляра. </summary>
            <typeparam name="T"></typeparam>
            <param name="source">Словарь, в который осуществляется добавление.</param>
            <param name="dictionary">Добавляемый словарь.</param>
        </member>
        <member name="M:Terrasoft.Common.DictionaryUtilities.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Gets value from dictionary. If no value found then returns <paramref name="defValue"/>.
            </summary>
            <typeparam name="K">Type of keys in dictionary.</typeparam>
            <typeparam name="V">Type of values in dictionary.</typeparam>
            <param name="source">Source dictionary.</param>
            <param name="key">Key which value to get.</param>
            <param name="defValue">Default value.</param>
            <returns>Value from dictionary or default value.</returns>
        </member>
        <member name="M:Terrasoft.Common.DictionaryUtilities.GetTypedValue``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            Returns typed value if it exists, otherwise returns default <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to be casted to.</typeparam>
            <param name="source">Source dictionary.</param>
            <param name="key">Key which value to get.</param>
            <returns>Value or default value of <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/>is null.</exception>
        </member>
        <member name="M:Terrasoft.Common.DictionaryUtilities.ContainsValueIgnoreCase``1(System.Collections.Generic.IDictionary{``0,System.String},System.String)">
            <summary>
            Determines whether the dictionary contains a specific value.
            Compare string ignoring the case of the strings being compared.
            </summary>
            <typeparam name="T">The type to be compared.</typeparam>
            <param name="source">Source dictionary.</param>
            <param name="value">The value to locate in the dictionary.
            The value can be null for reference types.</param>
            <returns><b>true</b> if the dictionary contains an element with the specified value;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="T:Terrasoft.Common.Disposable">
            <summary>
            Implements a mechanism for releasing resources.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.Disposable.#ctor(System.Action)">
            <summary>
            Creates a new instance of the <see cref="T:Terrasoft.Common.Disposable"/> type.
            </summary>
            <param name="action">Action that is called on dispose event.</param>
        </member>
        <member name="P:Terrasoft.Common.Disposable.Empty">
            <summary>
            Gets a dummy instance.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.Disposable.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.DnsWrapper">
            <summary>
            Provides simple domain name resolution functionality.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.DnsWrapper.GetHostName">
            <summary>
            Gets the host name of the local computer.
            </summary>
            
            <returns>
            A string that contains the DNS host name of the local computer.
            </returns>
            <exception cref="T:System.Net.Sockets.SocketException">An error is encountered
            when resolving the local host name. </exception>
        </member>
        <member name="M:Terrasoft.Common.DnsWrapper.GetHostEntry(System.String)">
            <summary>
            Resolves a host name or IP address to an <see cref="T:System.Net.IPHostEntry"/> instance.
            </summary>
            <param name="hostNameOrAddress">The host name or IP address to resolve.</param>
            <returns>
            An <see cref="T:System.Net.IPHostEntry"/> instance that contains address information
            about the host specified in <paramref name="hostNameOrAddress"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="hostNameOrAddress"/> parameter is null.
            </exception><exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="hostNameOrAddress"/> parameter is greater than 255 characters.
            </exception><exception cref="T:System.Net.Sockets.SocketException">An error was encountered
            when resolving the <paramref name="hostNameOrAddress"/> parameter.
            </exception><exception cref="T:System.ArgumentException">
            The <paramref name="hostNameOrAddress"/> parameter is an invalid IP address. </exception>
        </member>
        <member name="T:Terrasoft.Common.DSACryptoServiceProvider">
            <summary>
            Предоставляет методы для шифрования текста с открытым ключом по алгоритму DSA.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.DSACryptoServiceProvider.#ctor">
            <summary>
            Инициализирует заданный экземпляр <see cref="T:Terrasoft.Common.DSACryptoServiceProvider"/>.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.DSACryptoServiceProvider.KeyContainerName">
            <summary>
            Имя владельца ключа.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.DSACryptoServiceProvider.KeySize">
            <summary>
            Размер ключа в битах.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.DSACryptoServiceProvider.PrivateKey">
            <summary>
            Значение закрытого ключа.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.DSACryptoServiceProvider.PublicKey">
            <summary>
            Значение публичного ключа.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.DSACryptoServiceProvider.Dispose">
            <summary>
            Выполняет удаление, высвобождение и сброс ресурсов. Отменяет вызов Finalize() для данного экземпляра.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.DSACryptoServiceProvider.SignData(System.String,System.String)">
            <summary>
            Выполняет шифрование заданного текста с заданным секретным ключом.
            </summary>
            <param name="data">Текст для шифрования.</param>
            <param name="privateKey">Секретный ключ.</param>
            <returns>Строка, представляющая зашифрованный текст в формате base64.</returns>
        </member>
        <member name="M:Terrasoft.Common.DSACryptoServiceProvider.VerifyData(System.String,System.String,System.String)">
            <summary>
            Выполняет проверку заданного зашифрованного текста с заданным публичным ключом.
            </summary>
            <param name="data">Эталон проверки.</param>
            <param name="signedData">Зашифрованный текст в формате base64.</param>
            <param name="publicKey">Публичный ключ.</param>
            <returns></returns>
        </member>
        <member name="T:Terrasoft.Common.DynamicXml">
            <summary>
            Предоставляет методы работы с xml-документом.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.DynamicXml.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Common.DynamicXml"/>, используя заданный элемент 
            <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <param name="element">Элемент <see cref="T:System.Xml.Linq.XElement"/>.</param>
        </member>
        <member name="M:Terrasoft.Common.DynamicXml.#ctor(System.String)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Common.DynamicXml"/>, используя заданное имя файла.
            </summary>
            <param name="fileName">Имя файла.</param>
        </member>
        <member name="P:Terrasoft.Common.DynamicXml.Value">
            <summary>
            Возвращает значение текущего xml-элемента.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.DynamicXml.Item(System.String)">
            <summary>
            Индексатор для доступа к значению заданного атрибута текущего xml-элемента. 
            Возвращает и устанавливает строковое значение атрибута с заданным именем.
            </summary>
            <remarks>Индексатор перегружен.</remarks>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">
            При попытке установить значение атрибута неинициализированного xml-элемента.
            </exception>
        </member>
        <member name="P:Terrasoft.Common.DynamicXml.Item(System.String,System.Int32)">
            <summary>
            Индексатор доступа к дочернему xml-элементу по заданным имени элемента и индексу. Возвращает экземпляр 
            <see cref="T:Terrasoft.Common.DynamicXml"/> с заданным именем <paramref name="elementName"/> и
            индексом <paramref name="index"/>.
            </summary>
            <remarks>Индексатор перегружен.</remarks>
        </member>
        <member name="M:Terrasoft.Common.DynamicXml.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Реализация операции получения значения xml-элемента с заданным именем.
            </summary>
            <param name="binder">Имя xml-элемента.</param>
            <param name="result">Экземпляр <see cref="T:Terrasoft.Common.DynamicXml"/>, представляющий значение xml-элемента 
            именем <paramref name="binder"/></param>
            <returns>
            <c>true</c>, если операция получения значения xml-элемента была успешной; иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.DynamicXml.ToString">
            <summary>
            Возвращает строковое представление значения данного экземпляра <see cref="T:Terrasoft.Common.DynamicXml"/>.
            </summary>
            <returns>
            Экземпляр <see cref="T:System.String"/>, представляющий значение данного экземпляра <see cref="T:Terrasoft.Common.DynamicXml"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.DynamicXml.GetEnumerator">
            <summary>
            Возвращает перечислитель элементов типа <see cref="T:Terrasoft.Common.DynamicXml"/> для доступа к элементам 
            данного xml-документа.
            </summary>
            <returns>Экземпляр класса <see cref="T:System.Collections.Generic.IEnumerator`1"/> для доступа к 
            коллекции элементов <see cref="T:Terrasoft.Common.DynamicXml"/> данного xml-документа.</returns>
        </member>
        <member name="M:Terrasoft.Common.DynamicXml.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Возвращает перечислитель для доступа к элементам данного xml-документа.
            </summary>
            <returns>
            Экземпляр <see cref="T:System.Collections.IEnumerator"/> для доступа к коллекции элементов данного 
            xml-документа. </returns>
        </member>
        <member name="M:Terrasoft.Common.DynamicXml.Add(System.String)">
            <summary>
            Добавляет в данный xml-документ новый элемент с заданным именем.
            </summary>
            <param name="name">Имя элемента.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Common.DynamicXml"/>, представляющий добавленный элемент с именем
            <paramref name="name"/>.</returns>
        </member>
        <member name="M:Terrasoft.Common.DynamicXml.Save(System.String)">
            <summary>
            Сохраняет данный xml-документ в файл с заданным именем.
            </summary>
            <param name="fileName">Имя файла для сохранения.</param>
        </member>
        <member name="M:Terrasoft.Common.DynamicXml.Save">
            <summary>
            Сохраняет данный xml-документ в текущий файл (на основании которого был сформирован данный xml-документ).
            </summary>
        </member>
        <member name="T:Terrasoft.Common.MessageType">
            <summary>
            Тип сообщения.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.MessageType.Error">
            <summary>
            Ошибка.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.MessageType.Warning">
            <summary>
            Предупреждение.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.MessageType.Information">
            <summary>
            Информационное сообщение.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.ResourceItemType">
            <summary>
            Тип ресурса.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.ResourceItemType.None">
            <summary>
            Тип ресурса не определен.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.ResourceItemType.String">
            <summary>
            Строка.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.ResourceItemType.Image">
            <summary>
            Изображение.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.ResourceItemType.File">
            <summary>
            Файл.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.LocalizableResourceType">
            <summary>
            Type of localized resource.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.LocalizableResourceType.String">
            <summary>
            String.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.LocalizableResourceType.Image">
            <summary>
            Image.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.LocalizableResourceType.SvgImage">
            <summary>
            Image in SVG format.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.LogicalOperation">
            <summary>
            Логическая операция.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.LogicalOperation.None">
            <summary>
            Логическая операция не определена.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.LogicalOperation.And">
            <summary>
            Логическое И.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.LogicalOperation.Or">
            <summary>
            Логическое ИЛИ.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.LogicalOperationStrict">
            <summary>
            Логическая операция (не допускает значение None).
            </summary>
        </member>
        <member name="F:Terrasoft.Common.LogicalOperationStrict.And">
            <summary>
            Логическое И.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.LogicalOperationStrict.Or">
            <summary>
            Логическое ИЛИ.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.BitwiseOperation">
            <summary>
            Побитовая операция.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.BitwiseOperation.And">
            <summary>
            Побитовое И.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.BitwiseOperation.Or">
            <summary>
            Побитовое ИЛИ.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.BitwiseOperation.Xor">
            <summary>
            Побитовое исключающее ИЛИ.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.BitwiseOperation.Not">
            <summary>
            Побитовое НЕ.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.OrderDirection">
            <summary>
            Порядок сортировки (допускает значение None).
            </summary>
        </member>
        <member name="F:Terrasoft.Common.OrderDirection.None">
            <summary>
            Отключена.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.OrderDirection.Ascending">
            <summary>
            По возрастанию.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.OrderDirection.Descending">
            <summary>
            По убыванию.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.OrderDirectionStrict">
            <summary>
            Порядок сортировки (не допускает значение None).
            </summary>
        </member>
        <member name="F:Terrasoft.Common.OrderDirectionStrict.Ascending">
            <summary>
            По возрастанию.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.OrderDirectionStrict.Descending">
            <summary>
            По убыванию.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.AggregationType">
            <summary>
            Тип агрегирующей функции (допускает значение None).
            </summary>
        </member>
        <member name="F:Terrasoft.Common.AggregationType.None">
            <summary>
            Тип агрегирующей функции не определен.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.AggregationType.Count">
            <summary>
            Количество всех элементов.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.AggregationType.Sum">
            <summary>
            Сумма значений всех элементов.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.AggregationType.Avg">
            <summary>
            Среднее значение всех элементов.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.AggregationType.Min">
            <summary>
            Минимальное значение среди всех элементов.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.AggregationType.Max">
            <summary>
            Максимальное значение среди всех элементов.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.AggregationType.TopOne">
            <summary>
            Первое значение из выборки
            </summary>
        </member>
        <member name="T:Terrasoft.Common.AggregationTypeStrict">
            <summary>
            Тип агрегирующей функции (не допускает значение None).
            </summary>
        </member>
        <member name="F:Terrasoft.Common.AggregationTypeStrict.Count">
            <summary>
            Количество всех элементов.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.AggregationTypeStrict.Sum">
            <summary>
            Сумма значений всех элементов.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.AggregationTypeStrict.Avg">
            <summary>
            Среднее значение всех элементов.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.AggregationTypeStrict.Min">
            <summary>
            Минимальное значение среди всех элементов.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.AggregationTypeStrict.Max">
            <summary>
            Максимальное значение среди всех элементов.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.AggregationTypeStrict.TopOne">
            <summary>
            Первое значение из выборки
            </summary>
        </member>
        <member name="T:Terrasoft.Common.DateTimeValueKind">
            <summary>
            Дата и время.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.DateTimeValueKind.DateTime">
            <summary>
            Дата/Время.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.DateTimeValueKind.Date">
            <summary>
            Дата.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.DateTimeValueKind.Time">
            <summary>
            Время.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.ParameterDirection">
            <summary>
            Модификатор параметра. Определяет направление передачи значения параметра.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.ParameterDirection.Input">
            <summary>
            Входящий.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.ParameterDirection.Output">
            <summary>
            Исходящий.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.ParameterDirection.Var">
            <summary>
            Входящий / Исходящий.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.SessionEndMethod">
            <summary>
            Метод закрытия пользовательской сессии.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.SessionEndMethod.NotFinished">
            <summary>
            Сессия не закрыта.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.SessionEndMethod.Logout">
            <summary>
            Сессия закрыта в результате выхода пользователя.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.SessionEndMethod.Timeout">
            <summary>
            Сессия закрыта по таймауту на стороне сервера.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.SessionEndMethod.Terminate">
            <summary>
            Сессия закрыта принудительно.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.ArithmeticOperation">
            <summary>
            Арифметическая операция.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.ArithmeticOperation.Addition">
            <summary>
            Сложение.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.ArithmeticOperation.Subtraction">
            <summary>
            Вычитание.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.ArithmeticOperation.Multiplication">
            <summary>
            Умножение.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.ArithmeticOperation.Division">
            <summary>
            Деление.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.SourceControlSaveType">
            <summary>
            Тип операции фиксации в хранилище системы контроля версий.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.SourceControlSaveType.Commit">
            <summary>
            Фиксация в хранилище системы контроля версий изменений из существующей папки рабочей копии.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.SourceControlSaveType.Import">
            <summary>
            Фиксация в хранилище системы контроля версий дерево файлов и папок из неверсионной папки.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.QueryKind">
            <summary>
            Query kind, that is used to request special executor.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.QueryKind.General">
            <summary>
            Used as a default value.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.QueryKind.Limited">
            <summary>
            Used to show that the query can be sent to an executor with limited resources.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.CommitResult">
            <summary>
            Pre-commit validation result type.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.CommitResult.Success">
            <summary>
            Validation success.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.CommitResult.PackageNotFound">
            <summary>
            Package for validation not found.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.CommitResult.CustomPackage">
            <summary>
            A package is custom, and can't be commited to source control system.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.CommitResult.NotSourceControlInstallType">
            <summary>
            A package is not under a source control, and can't be commited.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.CommitResult.NoSourceControlStorage">
            <summary>
            A source control system for a package is not set.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.CommitResult.PackageUpdateNeed">
            <summary>
            A package needs update from source control system.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.CommitResult.PackageHasForeignLock">
            <summary>
            A package is locked in source control system by other user.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.PreUpdateValidationResult">
            <summary>
            Pre-update validation result type.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.PreUpdateValidationResult.Success">
            <summary>
            Validation success.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.PreUpdateValidationResult.CustomPackage">
            <summary>
            A package is custom, and can't be commited to source control system.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.AdminUnitRoleSources">
            <summary>
            SysAdminUnitInRole source type.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.AdminUnitRoleSources.None">
            <summary>
            Empty value.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.AdminUnitRoleSources.Self">
            <summary>
            Self.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.AdminUnitRoleSources.ExplicitEntry">
            <summary>
            Explicit entry into role.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.AdminUnitRoleSources.Delegated">
            <summary>
            Delegated role.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.AdminUnitRoleSources.FuncRoleFromOrgRole">
            <summary>
            Gets functional role from organisational role.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.AdminUnitRoleSources.UpHierarchy">
            <summary>
            Gets role up hierarchy from role.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.AdminUnitRoleSources.AsManager">
            <summary>
            Gets role as a manager.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.AdminUnitRoleSources.All">
            <summary>
            Gets all roles
            </summary>
        </member>
        <member name="T:Terrasoft.Common.EnumStrictUtilities">
            <summary>
            Содержит служебные методы для работы с перечислениями.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.EnumStrictUtilities.ToNormal(Terrasoft.Common.LogicalOperationStrict)">
            <summary>
            Преобразование перечисления типа <see cref="T:Terrasoft.Common.LogicalOperationStrict"/> в перечисление
            типа <see cref="T:Terrasoft.Common.LogicalOperation"/>.
            </summary>
            <param name="source">Перечисление типа <see cref="T:Terrasoft.Common.LogicalOperationStrict"/>.</param>
            <returns>Перечисление типа <see cref="T:Terrasoft.Common.LogicalOperation"/>.</returns>
        </member>
        <member name="M:Terrasoft.Common.EnumStrictUtilities.ToStrict(Terrasoft.Common.OrderDirection)">
            <summary>
            Преобразование перечисления типа <see cref="T:Terrasoft.Common.OrderDirection"/> в перечисления
            типа <see cref="T:Terrasoft.Common.OrderDirectionStrict"/>.
            </summary>
            <param name="source">Перечисление типа <see cref="T:Terrasoft.Common.OrderDirection"/>.</param>
            <returns>Перечисление типа <see cref="T:Terrasoft.Common.OrderDirectionStrict"/>.</returns>
            <exception cref="T:Terrasoft.Common.UnsupportedTypeException">При передаче в качестве параметра <paramref name="source"/>
            значения <see ref="OrderDirection.None"/>.</exception>
        </member>
        <member name="M:Terrasoft.Common.EnumStrictUtilities.ToStrict(Terrasoft.Common.AggregationType)">
            <summary>
            Преобразование перечисления типа <see cref="T:Terrasoft.Common.AggregationType"/> в перечисления типа
            <see cref="T:Terrasoft.Common.AggregationTypeStrict"/>.
            </summary>
            <param name="source">Перечисление типа <see cref="T:Terrasoft.Common.AggregationType"/>.</param>
            <returns>Перечисление типа <see cref="T:Terrasoft.Common.AggregationTypeStrict"/>.</returns>
            <exception cref="T:Terrasoft.Common.UnsupportedTypeException">При передаче в качестве параметра <paramref name="source"/>
            значения, не являющегося элементом перечисления <see ref="AggregationType"/>.</exception>
        </member>
        <member name="T:Terrasoft.Common.EnumUtilities">
            <summary>
            Provides utility methods for enumeration types.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.EnumUtilities.ToLocalizedString(System.Enum)">
            <summary>
            Converts enumeration value to localized string for current culture.
            </summary>
            <param name="source">Enumeration value to localize.</param>
            <returns>Localized string value for enumeration element.</returns>
            <remarks>Extension method for <see cref="T:System.Enum"/>.</remarks>
        </member>
        <member name="M:Terrasoft.Common.EnumUtilities.ToLocalizedString(System.Enum,System.Globalization.CultureInfo)">
            <summary>
            Converts enumeration value to localized string for provided <paramref name="cultureInfo"/>.
            </summary>
            <param name="source">Enumeration value to localize.</param>
            <param name="cultureInfo">Localization culture.</param>
            <returns>Localized string value for enumeration element.</returns>
            <remarks>Extension method for <see cref="T:System.Enum"/>.</remarks>
        </member>
        <member name="M:Terrasoft.Common.EnumUtilities.GetLocalizedNames(System.Type)">
            <summary>
            Gets dictionary of localized string values for provided enumeration type <paramref name="enumType"/>.
            </summary>
            <param name="enumType">Enumeration type.</param>
            <returns>Dictionary of localized string values for <paramref name="enumType"/>.</returns>
        </member>
        <member name="T:Terrasoft.Common.NameChangeEventArgs">
            <summary>
            Базовый класс для данных состояния события изменения имени.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.NameChangeEventArgs.Name">
            <summary>
            Новое имя.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.NameChangeEventArgs.OldName">
            <summary>
            Старое имя.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.BeforeNameChangeEventArgs">
            <summary>
            Предоставляет данные о состоянии до события изменения имени. 
            </summary>
        </member>
        <member name="M:Terrasoft.Common.BeforeNameChangeEventArgs.#ctor(System.String,System.String)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Common.BeforeNameChangeEventArgs"/>, используя 
            заданные новое и старое имя. 
            </summary>
            <param name="name">Новое имя.</param>
            <param name="oldName">Старое имя.</param>
        </member>
        <member name="P:Terrasoft.Common.BeforeNameChangeEventArgs.IsCanceled">
            <summary>
            Признак отмены изменения имени.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.AfterNameChangeEventArgs">
            <summary>
            Предоставляет данные о состоянии после события изменения имени.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.AfterNameChangeEventArgs.#ctor(System.String,System.String)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Common.AfterNameChangeEventArgs"/>, используя 
            заданные новое и старое имена.
            </summary>
            <param name="name">Новое имя.</param>
            <param name="oldName">Старое имя.</param>
        </member>
        <member name="T:Terrasoft.Common.NullOrEmptyException">
            <summary>
            Представляет исключение для пустых и <c>null</c> объектов типа <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.NullOrEmptyException.#ctor">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.NullOrEmptyException"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.NullOrEmptyException.#ctor(System.String)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.NullOrEmptyException"/>, используя заданное сообщение
            об ошибке. </summary>
            <param name="message">Сообщение об ошибке.</param>
        </member>
        <member name="M:Terrasoft.Common.NullOrEmptyException.#ctor(System.String,System.Exception)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.NullOrEmptyException"/>, используя заданное сообщение
            об ошибке и ссылку на внутреннее исключение, которое стало причиной данного исключения.
            </summary>
            <param name="message">Сообщение об ошибке.</param>
            <param name="innerException">Внутреннее исключение.</param>
        </member>
        <member name="M:Terrasoft.Common.NullOrEmptyException.#ctor(System.String,System.String)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.NullOrEmptyException"/>, используя заданное сообщение
            об ошибке.
            </summary>
            <param name="message">Сообщение об ошибке.</param>
            <param name="objectName">.</param>
        </member>
        <member name="T:Terrasoft.Common.AssemblyNotInitializedException">
            <summary>
            Exception class for error when assembly is not intialized.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.MetaPathNullOrEmptyException">
            <summary>
            Represents an exception for empty and <c>null</c> <see cref="T:System.String"/> objects, representing the path
            to the metadata.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.MetaPathNullOrEmptyException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Common.MetaPathNullOrEmptyException"/> class.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.MetaPathNullOrEmptyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Common.MetaPathNullOrEmptyException"/> class.
            </summary>
            <param name="parameterName">Name of the process parameter.</param>
        </member>
        <member name="M:Terrasoft.Common.MetaPathNullOrEmptyException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Common.MetaPathNullOrEmptyException"/> class.
            </summary>
            <param name="parameterName">Name of the user task parameter.</param>
            <param name="userTaskName">Name of the user task.</param>
        </member>
        <member name="M:Terrasoft.Common.MetaPathNullOrEmptyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes an instance of the <see cref = "T:Terrasoft.Common.MetaPathNullOrEmptyException" /> class
            using the specified error message and a link to the internal exception that caused the exception.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The internal exception.</param>
        </member>
        <member name="T:Terrasoft.Common.ArgumentNullOrEmptyException">
            <summary>
            The exception that is thrown when an argument of the string type is empty or <c>null</c>.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.ArgumentNullOrEmptyException.#ctor">
            <summary>
            Initializes an instance of the <see cref="T:Terrasoft.Common.ArgumentNullOrEmptyException"/> class.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.ArgumentNullOrEmptyException.#ctor(System.String)">
            <summary>
            Initializes an instance of the <see cref="T:Terrasoft.Common.ArgumentNullOrEmptyException"/> class for the specified parameter.
            </summary>
            <param name="argumentName">Argument name.</param>
        </member>
        <member name="M:Terrasoft.Common.ArgumentNullOrEmptyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes an instance of the <see cref="T:Terrasoft.Common.ArgumentNullOrEmptyException"/> class using the specified error
            message and the reference to inner exception which caused to exception.
            </summary>
            <param name="message">Error message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="P:Terrasoft.Common.ArgumentNullOrEmptyException.ArgumentName">
            <summary>
            Argument name.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.ArgumentEmptyException">
            <summary>
            The exception that is thrown when an argument of the value type is empty.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.ArgumentEmptyException.#ctor">
            <summary>
            Initializes an instance of the <see cref="T:Terrasoft.Common.ArgumentEmptyException"/> class.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.ArgumentEmptyException.#ctor(System.String)">
            <summary>
            Initializes an instance of the <see cref="T:Terrasoft.Common.ArgumentEmptyException"/> class for the specified parameter.
            </summary>
            <param name="argumentName">Argument name.</param>
        </member>
        <member name="M:Terrasoft.Common.ArgumentEmptyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes an instance of the <see cref="T:Terrasoft.Common.ArgumentEmptyException"/> class using the specified error
            message and the reference to inner exception which caused to exception.
            </summary>
            <param name="message">Error message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="P:Terrasoft.Common.ArgumentEmptyException.ArgumentName">
            <summary>
            Argument name.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.InvalidTypeCastException">
            <summary>
            Представляет исключение, которое создается при недопустимом преобразовании типов.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.InvalidTypeCastException.#ctor">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.InvalidTypeCastException"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.InvalidTypeCastException.#ctor(System.String)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.InvalidTypeCastException"/>, используя заданное сообщение
            об ошибке. </summary>
            <param name="message">Сообщение об ошибке.</param>
        </member>
        <member name="M:Terrasoft.Common.InvalidTypeCastException.#ctor(System.String,System.Exception)">
            <summary>
            Инициализирует экземпляр класса <see cref="T:Terrasoft.Common.InvalidTypeCastException"/>, используя заданное сообщение об
            ошибке и ссылку на внутреннее исключение, которое стало причиной данного исключения.
            </summary>
            <param name="message">Сообщение об ошибке.</param>
            <param name="innerException">Внутреннее исключение.</param>
        </member>
        <member name="M:Terrasoft.Common.InvalidTypeCastException.#ctor(System.Type,System.Type)">
            <summary>
            Инициализирует экземпляр класса <see cref="T:Terrasoft.Common.InvalidTypeCastException"/> для заданных преобразуемых типов.
            </summary>
            <param name="currentType">Тип, который преобразуется.</param>
            <param name="expectedType">Тип, к которому приводится.</param>
        </member>
        <member name="M:Terrasoft.Common.InvalidTypeCastException.#ctor(System.String,System.Type)">
            <summary>
            Инициализирует экземпляр класса <see cref="T:Terrasoft.Common.InvalidTypeCastException"/> для заданного типа для значения
            свойства.</summary>
            <param name="propertyName">Имя свойства.</param>
            <param name="expectedType">Тип, к которому приводится.</param>
        </member>
        <member name="T:Terrasoft.Common.InvalidNameException">
            <summary>
            Представляет исключение для некорректного имени.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.InvalidNameException.#ctor">
            <summary>
            Инициализирует экземпляр класса <see cref="T:Terrasoft.Common.InvalidNameException"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.InvalidNameException.#ctor(System.String)">
            <summary>
            Инициализирует экземпляр класса <see cref="T:Terrasoft.Common.InvalidNameException"/>, используя заданное сообщение об ошибке.
            </summary>
            <param name="message">Сообщение об ошибке.</param>
        </member>
        <member name="M:Terrasoft.Common.InvalidNameException.#ctor(System.String,System.Exception)">
            <summary>
            Инициализирует экземпляр класса <see cref="T:Terrasoft.Common.InvalidNameException"/>, используя заданное сообщение об ошибке
            и ссылку на внутреннее исключение, которое стало причиной данного исключения.
            </summary>
            <param name="message">Сообщение об ошибке.</param>
            <param name="innerException">Внутреннее исключение.</param>
        </member>
        <member name="T:Terrasoft.Common.InvalidUserTimeZoneException">
            <summary>
            Представляет исключение, которое создается, если у пользователя установлен некорректный часовой пояс.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.InvalidUserTimeZoneException.#ctor(System.String)">
            <summary>
            Инициализирует экземпляр класса <see cref="T:Terrasoft.Common.InvalidUserTimeZoneException"/>.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.MismatchItemsCountException">
            <summary>
            Представляет исключение, которое создается при несовпадении количества элементов коллекции.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.MismatchItemsCountException.#ctor">
            <summary>
            Инициализирует экземпляр класса <see cref="T:Terrasoft.Common.MismatchItemsCountException"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.MismatchItemsCountException.#ctor(System.String)">
            <summary>
            Инициализирует экземпляр класса <see cref="T:Terrasoft.Common.MismatchItemsCountException"/>, используя заданное сообщение об
            ошибке. </summary>
            <param name="message">Сообщение об ошибке.</param>
        </member>
        <member name="M:Terrasoft.Common.MismatchItemsCountException.#ctor(System.String,System.Exception)">
            <summary>
            Инициализирует экземпляр класса <see cref="T:Terrasoft.Common.MismatchItemsCountException"/>, используя заданное сообщение об
            ошибке и ссылку на внутреннее исключение, которое стало причиной данного исключения.
            </summary>
            <param name="message">Сообщение об ошибке.</param>
            <param name="innerException">Внутреннее исключение.</param>
        </member>
        <member name="T:Terrasoft.Common.ArgumentMismatchItemsCountException">
            <summary>
            Представляет исключение при несовпадении количества элементов коллекции аргумента.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.ArgumentMismatchItemsCountException.#ctor">
            <summary>
            Инициализирует экземпляр класса <see cref="T:Terrasoft.Common.ArgumentMismatchItemsCountException"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.ArgumentMismatchItemsCountException.#ctor(System.String)">
            <summary>
            Инициализирует экземпляр класса <see cref="T:Terrasoft.Common.ArgumentMismatchItemsCountException"/>, используя заданное
            сообщение об ошибке.
            </summary>
            <param name="message">Сообщение об ошибке.</param>
        </member>
        <member name="M:Terrasoft.Common.ArgumentMismatchItemsCountException.#ctor(System.String[])">
            <summary>
            Инициализирует экземпляр класса <see cref="T:Terrasoft.Common.ArgumentMismatchItemsCountException"/> для заданного списка
            параметров. </summary>
            <param name="parameterNames">Список имен параметров.</param>
        </member>
        <member name="M:Terrasoft.Common.ArgumentMismatchItemsCountException.#ctor(System.String,System.Exception)">
            <summary>
            Инициализирует экземпляр класса <see cref="T:Terrasoft.Common.ArgumentMismatchItemsCountException"/>, используя заданное
            сообщение об ошибке и ссылку на внутреннее исключение, которое стало причиной данного исключения.
            </summary>
            <param name="message">Сообщение об ошибке.</param>
            <param name="innerException">Внутреннее исключение.</param>
        </member>
        <member name="T:Terrasoft.Common.InvalidObjectStateException">
            <summary>
            Представляет исключение, возникающее при некорректном состоянии объекта.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.InvalidObjectStateException.#ctor">
            <summary>
            Инициализирует экземпляр класса <see cref="T:Terrasoft.Common.InvalidObjectStateException"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.InvalidObjectStateException.#ctor(System.String)">
            <summary>
            Инициализирует экземпляр класса <see cref="T:Terrasoft.Common.InvalidObjectStateException"/>, используя заданное сообщение об
            ошибке. </summary>
            <param name="message">Сообщение об ошибке.</param>
        </member>
        <member name="M:Terrasoft.Common.InvalidObjectStateException.#ctor(System.String,System.String)">
            <summary>
            Инициализирует экземпляр класса <see cref="T:Terrasoft.Common.InvalidObjectStateException"/> для заданного объекта, используя
            заданное сообщение об ошибке. </summary>
            <param name="message">Сообщение об ошибке.</param>
            <param name="objectName">Имя объекта.</param>
        </member>
        <member name="M:Terrasoft.Common.InvalidObjectStateException.#ctor(System.String,System.Exception)">
            <summary>
            Инициализирует экземпляр класса <see cref="T:Terrasoft.Common.InvalidObjectStateException"/>, используя заданное сообщение об
            ошибке и ссылку на внутреннее исключение, которое стало причиной данного исключения.
            </summary>
            <param name="message">Сообщение об ошибке.</param>
            <param name="innerException">Внутреннее исключение.</param>
        </member>
        <member name="T:Terrasoft.Common.ItemNotFoundException">
            <summary>
            Представляет исключение для не найденного элемента в коллекции.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.ItemNotFoundException.#ctor">
            <summary>
            Инициализирует экземпляр класса <see cref="T:Terrasoft.Common.ItemNotFoundException"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.ItemNotFoundException.#ctor(System.String)">
            <summary>
            Инициализирует экземпляр класса <see cref="T:Terrasoft.Common.ItemNotFoundException"/> для заданного объекта.
            </summary>
            <param name="objectName">Имя объекта.</param>
        </member>
        <member name="M:Terrasoft.Common.ItemNotFoundException.#ctor(System.String,System.String[])">
            <summary>
            Инициализирует экземпляр класса <see cref="T:Terrasoft.Common.ItemNotFoundException"/> для заданного объекта, используя
            заданное сообщение об ошибке. </summary>
            <param name="message">Сообщение об ошибке.</param>
            <param name="objectNames">Имя объекта.</param>
        </member>
        <member name="M:Terrasoft.Common.ItemNotFoundException.#ctor(System.String,Terrasoft.Common.MessageType)">
            <summary>
            Инициализирует экземпляр класса <see cref="T:Terrasoft.Common.ItemNotFoundException"/> для заданного объекта, используя
            заданное сообщение об ошибке. </summary>
            <param name="message">Сообщение об ошибке.</param>
            <param name="messageType">Тип сообщения.</param>
        </member>
        <member name="M:Terrasoft.Common.ItemNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Инициализирует экземпляр класс <see cref="T:Terrasoft.Common.ItemNotFoundException"/>, используя заданное сообщение об ошибке и
            ссылку на внутреннее исключение, которое стало причиной данного исключения.
            </summary>
            <param name="message">Сообщение об ошибке.</param>
            <param name="innerException">Внутреннее исключение.</param>
        </member>
        <member name="P:Terrasoft.Common.ItemNotFoundException.MessageType">
            <summary>
            Тип сообщения.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.ItemAlreadyExistException">
            <summary>
            Exception class for denoting that the same object exists in collection.
            </summary>
            <seealso cref="T:System.ApplicationException" />
        </member>
        <member name="M:Terrasoft.Common.ItemAlreadyExistException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Common.ItemAlreadyExistException"/> class.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.ItemAlreadyExistException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Common.ItemAlreadyExistException"/> class.
            </summary>
            <param name="objectId">The object identifier.</param>
        </member>
        <member name="M:Terrasoft.Common.ItemAlreadyExistException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Common.ItemAlreadyExistException"/> class.
            </summary>
            <param name="message">The error message.</param>
            <param name="objectId">The object identifier.</param>
        </member>
        <member name="M:Terrasoft.Common.ItemAlreadyExistException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Common.ItemAlreadyExistException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="P:Terrasoft.Common.ItemAlreadyExistException.ObjectId">
            <summary>Gets the object identifier.</summary>
            <value>The object identifier.</value>
        </member>
        <member name="T:Terrasoft.Common.UnsupportedTypeException">
            <summary>
            Представляет исключение для типов, которые не поддерживаются текущим контентом.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.UnsupportedTypeException.#ctor">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Common.UnsupportedTypeException"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.UnsupportedTypeException.#ctor(System.String)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.UnsupportedTypeException"/> для заданного имени типа.
            </summary>
            <param name="typeName">Имя тип.</param>
        </member>
        <member name="M:Terrasoft.Common.UnsupportedTypeException.#ctor(System.Type)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.UnsupportedTypeException"/> для заданного
            типа <see cref="T:System.Type"/>.
            </summary>
            <param name="type">Экземпляр <see cref="T:System.Type"/>.</param>
        </member>
        <member name="M:Terrasoft.Common.UnsupportedTypeException.#ctor(System.String,System.Object[])">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.UnsupportedTypeException"/> для заданного списка имен
            типов, используя заданное сообщение об ошибке.
            </summary>
            <param name="message">Сообщение об ошибке.</param>
            <param name="args">Список имен типов.</param>
        </member>
        <member name="M:Terrasoft.Common.UnsupportedTypeException.#ctor(System.String,System.Type)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.UnsupportedTypeException"/> для заданного экземпляра
            <see cref="T:System.Type"/>, используя заданное сообщение об ошибке.
            </summary>
            <param name="message">Сообщение об ошибке.</param>
            <param name="type">Экземпляр <see cref="T:System.Type"/>.</param>
        </member>
        <member name="M:Terrasoft.Common.UnsupportedTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Инициализирует экземпляр класса <see cref="T:Terrasoft.Common.UnsupportedTypeException"/>, используя заданное сообщение об
            ошибке и ссылку на внутреннее исключение, которое стало причиной данного исключения.
            </summary>
            <param name="message">Сообщение об ошибке.</param>
            <param name="innerException">Внутреннее исключение.</param>
        </member>
        <member name="T:Terrasoft.Common.ObjectIsReadOnlyException">
            <summary>
            Представляет исключение для объектов, открытых только для чтения.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.ObjectIsReadOnlyException.#ctor">
            <summary>
            Инициализирует экземпляр класса <see cref="T:Terrasoft.Common.ObjectIsReadOnlyException"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.ObjectIsReadOnlyException.#ctor(System.String)">
            <summary>
            Инициализирует экземпляр класса <see cref="T:Terrasoft.Common.ObjectIsReadOnlyException"/> для заданного объекта.
            </summary>
            <param name="objectName">Имя объекта.</param>
        </member>
        <member name="M:Terrasoft.Common.ObjectIsReadOnlyException.#ctor(System.String,System.String)">
            <summary>
            Инициализирует экземпляр класса <see cref="T:Terrasoft.Common.ObjectIsReadOnlyException"/> для заданного объекта, используя
            заданное сообщение об ошибке. </summary>
            <param name="message">Сообщение об ошибке.</param>
            <param name="objectName">Имя объекта.</param>
        </member>
        <member name="M:Terrasoft.Common.ObjectIsReadOnlyException.#ctor(System.String,System.Exception)">
            <summary>
            Инициализирует экземпляр класса <see cref="T:Terrasoft.Common.ObjectIsReadOnlyException"/>, используя заданное сообщение об
            ошибке и ссылку на внутреннее исключение, которое стало причиной данного исключения.
            </summary>
            <param name="message">Сообщение об ошибке.</param>
            <param name="innerException">Внутреннее исключение.</param>
        </member>
        <member name="M:Terrasoft.Common.ObjectIsReadOnlyException.#ctor(Terrasoft.Common.LocalizableString)">
            <summary>
            Инициализирует экземпляр класса <see cref="T:Terrasoft.Common.ObjectIsReadOnlyException"/>, используя заданное сообщение об
            ошибке. </summary>
            <param name="message">Сообщение об ошибке.</param>
        </member>
        <member name="T:Terrasoft.Common.DublicateDataException">
            <summary>
            Представляет исключение для дублируемых экземпляров данных.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.DublicateDataException.#ctor">
            <summary>
            Инициализирует экземпляр класса <see cref="T:Terrasoft.Common.DublicateDataException"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.DublicateDataException.#ctor(System.String)">
            <summary>
            Инициализирует экземпляр класса <see cref="T:Terrasoft.Common.DublicateDataException"/> для заданного объекта.
            </summary>
            <param name="objectName">Имя объекта.</param>
        </member>
        <member name="M:Terrasoft.Common.DublicateDataException.#ctor(Terrasoft.Common.LocalizableString,System.Object[])">
            <summary>
            Инициализирует экземпляр класса <see cref="T:Terrasoft.Common.DublicateDataException"/> для заданного перечня объектов,
            используя заданное сообщение об ошибке.
            </summary>
            <param name="exceptionMessage">Сообщение об ошибке.</param>
            <param name="args">Перечень объектов.</param>
        </member>
        <member name="M:Terrasoft.Common.DublicateDataException.#ctor(System.String,System.String)">
            <summary>
            Инициализирует экземпляр класса <see cref="T:Terrasoft.Common.DublicateDataException"/> для заданного объекта, используя
            заданное сообщение об ошибке. </summary>
            <param name="message">Сообщение об ошибке.</param>
            <param name="objectName">Имя объекта.</param>
        </member>
        <member name="M:Terrasoft.Common.DublicateDataException.#ctor(System.String,System.Exception)">
            <summary>
            Инициализирует экземпляр класса <see cref="T:Terrasoft.Common.DublicateDataException"/>, используя заданное сообщение об
            ошибке и ссылку на внутреннее исключение, которое стало причиной данного исключения.
            </summary>
            <param name="message">Сообщение об ошибке.</param>
            <param name="innerException">Внутреннее исключение.</param>
        </member>
        <member name="T:Terrasoft.Common.DuplicateItemException">
            <summary>
            Exception is thrown when there are duplicated items.
            </summary>
            <seealso cref="T:System.ApplicationException" />
        </member>
        <member name="M:Terrasoft.Common.DuplicateItemException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Common.DuplicateItemException"/> class.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.DuplicateItemException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Common.DuplicateItemException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Terrasoft.Common.DuplicateItemException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Common.DuplicateItemException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the
            <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in
            a <see langword="catch" /> block that handles the inner exception.</param>
        </member>
        <member name="T:Terrasoft.Common.CommonDbException">
            <summary>
            Provides the common exception for occurred errors while executing a database queries.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.DbOperationException">
            <summary>
            Provides the exception for operations in database.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.DbOperationException.#ctor">
            <summary>
            Initializes an instance of the <see cref="T:Terrasoft.Common.DbOperationException"/> class.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.DbOperationException.#ctor(System.String)">
            <summary>
            Initializes an instance of the <see cref="T:Terrasoft.Common.DbOperationException"/> class using the specified error
            message.
            </summary>
            <param name="message">Error message.</param>
        </member>
        <member name="M:Terrasoft.Common.DbOperationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes an instance of the <see cref="T:Terrasoft.Common.DbOperationException"/> class using the specified error
            message and the reference to inner exception which caused this exception.
            </summary>
            <param name="message">Error message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:Terrasoft.Common.DbOperationException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes an instance of the <see cref="T:Terrasoft.Common.DbOperationException"/> class using the specified error
            message, sql text and the reference to inner exception which caused this exception.
            </summary>
            <param name="message">Error message.</param>
            <param name="sqlText">Sql text.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="P:Terrasoft.Common.DbOperationException.SqlText">
            <summary>
            Sql text.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.AppStartupException">
            <summary>
            Представляет исключение об ошибке при запуске приложения <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.AppStartupException.#ctor">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.AppStartupException"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.AppStartupException.#ctor(System.String)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.AppStartupException"/>, используя заданное сообщение
            об ошибке. </summary>
            <param name="message">Сообщение об ошибке.</param>
        </member>
        <member name="M:Terrasoft.Common.AppStartupException.#ctor(System.String,System.Exception)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.AppStartupException"/>, используя заданное сообщение
            об ошибке и ссылку на внутреннее исключение, которое стало причиной данного исключения.
            </summary>
            <param name="message">Сообщение об ошибке.</param>
            <param name="innerException">Внутреннее исключение.</param>
        </member>
        <member name="M:Terrasoft.Common.AppStartupException.#ctor(System.String,System.String)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.AppStartupException"/>, используя заданное сообщение
            об ошибке.
            </summary>
            <param name="message">Сообщение об ошибке.</param>
            <param name="objectName">.</param>
        </member>
        <member name="T:Terrasoft.Common.SourceControlOperationException">
            <summary>
            Представляет исключение при работе с системой управления версиями.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.SourceControlOperationException.#ctor(System.String)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.SourceControlOperationException"/>, используя заданное
            сообщение об ошибке.
            </summary>
            <param name="message">Сообщение об ошибке.</param>
        </member>
        <member name="M:Terrasoft.Common.SourceControlOperationException.#ctor(System.String,System.Exception)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.SourceControlOperationException"/>, используя заданное
            сообщение об ошибке и ссылку на внутреннее исключение, которое стало причиной данного исключения.
            </summary>
            <param name="message">Сообщение об ошибке.</param>
            <param name="innerException">Внутреннее исключение.</param>
        </member>
        <member name="P:Terrasoft.Common.SourceControlOperationException.SvnErrorCode">
            <summary>
            Gets the raw subversion error code casted to a string.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.SourceControlOperationException.RootCause">
            <summary>
            Gets the root cause of the exception.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.SourceControlSecurityException">
            <summary>
            Представляет исключение ошибки безопасности при работе с системой управления версиями.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.SourceControlSecurityException.#ctor(System.String,System.String)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.SourceControlSecurityException"/>, используя заданное
            сообщение об ошибке и путь к хранилищу пакетов.
            </summary>
            <param name="message">Сообщение об ошибке.</param>
            <param name="sourceUrl">Путь к хранилищу пакетов.</param>
        </member>
        <member name="M:Terrasoft.Common.SourceControlSecurityException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.SourceControlSecurityException"/>, используя заданное
            сообщение об ошибке, путь к хранилищу пакетов и ссылку на внутреннее исключение, которое стало причиной
            данного исключения.
            </summary>
            <param name="message">Сообщение об ошибке.</param>
            <param name="sourceUrl">Путь к хранилищу пакетов.</param>
            <param name="innerException">Внутреннее исключение.</param>
        </member>
        <member name="T:Terrasoft.Common.SystemOperationRestrictedException">
            <summary>
            Exception for restricted action while SystemOperationRestricted mode activated.
            </summary>
            <seealso cref="T:System.Security.SecurityException" />
        </member>
        <member name="M:Terrasoft.Common.SystemOperationRestrictedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Common.SystemOperationRestrictedException"/> class.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.SystemOperationRestrictedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Common.SystemOperationRestrictedException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Terrasoft.Common.SourceControlOutOfDateException.#ctor(System.String)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.SourceControlOutOfDateException"/>, используя заданное
            сообщение об ошибке.
            </summary>
            <param name="message">Сообщение об ошибке.</param>
        </member>
        <member name="M:Terrasoft.Common.SourceControlOutOfDateException.#ctor(System.String,System.Exception)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.SourceControlOutOfDateException"/>, используя заданное
            сообщение об ошибке и ссылку на внутреннее исключение, которое стало причиной данного исключения.
            </summary>
            <param name="message">Сообщение об ошибке.</param>
            <param name="innerException">Внутреннее исключение.</param>
        </member>
        <member name="M:Terrasoft.Common.SourceControlServerIsBusyException.#ctor(System.String)">
            <summary>
            Инициализирует новый экземпляр класс <see cref="T:Terrasoft.Common.SourceControlServerIsBusyException"/>, используя заданное
            сообщение об ошибке.
            </summary>
            <param name="message">Сообщение об ошибке.</param>
        </member>
        <member name="M:Terrasoft.Common.SourceControlServerIsBusyException.#ctor(System.String,System.Exception)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.SourceControlServerIsBusyException"/>, используя заданное
            сообщение об ошибке и ссылку на внутреннее исключение, которое стало причиной данного исключения.
            </summary>
            <param name="message">Сообщение об ошибке.</param>
            <param name="innerException">Внутреннее исключение.</param>
        </member>
        <member name="T:Terrasoft.Common.SourceControlLockException">
            <summary>
            Исключение ошибки блокирования элементов системы в системе контроля версий.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.SourceControlLockException.#ctor(System.String,System.String,System.String)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.SourceControlLockException"/>, с заданными сообщением об
            ошибке, именем заблокированного элемента системы и именем пользователя, заблокировавшего этот элемент.
            </summary>
            <param name="message">Текст ошибки.</param>
            <param name="itemName">Имя элемента, вызвавшего ошибку.</param>
            <param name="userName">Имя пользователя, заблокировавшего элемент.</param>
        </member>
        <member name="P:Terrasoft.Common.SourceControlLockException.ItemName">
            <summary>
            Имя элемента, вызвавшего ошибку.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.SourceControlLockException.UserName">
            <summary>
            Имя пользователя, заблокировавшего элемент.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.SvnLockException.#ctor(System.String,System.String)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.SvnLockException"/>, используя имя заблокированой схемы и
            имя пользователя заблокировавшего эту схему.
            </summary>
            <param name="schemaName">Имя заблокированой схемы.</param>
            <param name="userName">Имя пользователя заблокировавшего схему.</param>
        </member>
        <member name="M:Terrasoft.Common.SvnHookException.#ctor(System.Exception)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.SvnHookException"/>, используя заданное исключение
            </summary>
            <param name="innerException">Внутреннее исключение.</param>
        </member>
        <member name="M:Terrasoft.Common.SvnLockPackageException.#ctor(System.String)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.SvnLockPackageException"/>, используя заданное сообщение
            об ошибке. </summary>
            <param name="message">Сообщение об ошибке.</param>
        </member>
        <member name="T:Terrasoft.Common.DataTypeMismatchException">
            <summary>
            Представляет исключение, которое создается при попытке установть в свойсто значение не корректного типа.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.DataTypeMismatchException.#ctor">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.DataTypeMismatchException"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.DataTypeMismatchException.#ctor(System.String)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.DataTypeMismatchException"/>, используя заданное сообщение
            об ошибке. </summary>
            <param name="message">Сообщение об ошибке.</param>
        </member>
        <member name="M:Terrasoft.Common.DataTypeMismatchException.#ctor(System.String,System.Exception)">
            <summary>
            Инициализирует экземпляр класса <see cref="T:Terrasoft.Common.DataTypeMismatchException"/>, используя заданное сообщение об
            ошибке и ссылку на внутреннее исключение, которое стало причиной данного исключения.
            </summary>
            <param name="message">Сообщение об ошибке.</param>
            <param name="innerException">Внутреннее исключение.</param>
        </member>
        <member name="M:Terrasoft.Common.DataTypeMismatchException.#ctor(System.String,System.Type,System.Type)">
            <summary>
            Инициализирует экземпляр класса <see cref="T:Terrasoft.Common.DataTypeMismatchException"/> для заданного свойства.
            </summary>
            <param name="propertyName">Имя своства, в которое пытаются присвоить не корректный тип данных.</param>
            <param name="expectedType">Тип свойства.</param>
            <param name="currentType">Тип значения которое устанавливают.</param>
        </member>
        <member name="M:Terrasoft.Common.DataTypeMismatchException.#ctor(System.String,System.Type,System.Type,System.Exception)">
            <summary>
            Инициализирует экземпляр класса <see cref="T:Terrasoft.Common.DataTypeMismatchException"/>, для заданного свойства
            c использованием ссылки на внутреннее исключение, которое стало причиной данного исключения.
            </summary>
            <param name="propertyName">Имя своства, в которое пытаются присвоить не корректный тип данных.</param>
            <param name="expectedType">Тип свойства.</param>
            <param name="currentType">Тип значения которое устанавливают.</param>
            <param name="innerException">Внутреннее исключение.</param>
        </member>
        <member name="P:Terrasoft.Common.PasswordExpiredException.NeedReminding">
            <summary>
            Determines whether need password reminding.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.ValidateException">
            <summary>
            Base exception class for validation.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.ValidateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Context.</param>
        </member>
        <member name="M:Terrasoft.Common.ValidateException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Common.ValidateException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Terrasoft.Common.ValidateException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Common.ValidateException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Terrasoft.Common.TopologicalSorterLoopsException">
            <summary>
            Класс исключения для передачи информации о цикле зависимостей между элементами списка.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.TopologicalSorterLoopsException`1">
            <summary>
            Класс (обобщенный) исключения для передачи информации о цикле зависимостей между элементами списка.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.FeatureUtilities.GetVersionWithRequiredPrefix">
            <summary>
            Возвращаето версию продукта с обязательным префиксом для всех типов элементов.
            </summary>
            <returns>Версия продукта с обязательным префиксом для всех типов элементов.</returns>
        </member>
        <member name="T:Terrasoft.Common.FileUtilities">
            <summary>
            Предоставляет методы работы с файлами.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.FileUtilities.CreateRegexFilters(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Transform string filters to <see cref="T:System.Text.RegularExpressions.Regex"/> filters.
            </summary>
            <remarks>
            <see cref="M:System.Text.RegularExpressions.Regex.Escape(System.String)"/> escapes the symbol "*",
            which is not desirable, and string replace fix it.
            </remarks>
            <param name="filters">String filters.</param>
            <returns><see cref="T:System.Text.RegularExpressions.Regex"/> filters.</returns>
        </member>
        <member name="M:Terrasoft.Common.FileUtilities.CompleteDirectoryName(System.String)">
            <summary>
            Формирует имя заданного каталога в формате [Имя каталога][Разделитель].
            </summary>
            <param name="directoryName">Имя каталога.</param>
            <returns>Строка, представляющая имя заданного каталога в формате [Имя каталога][Разделитель].</returns>
            <remarks>[Разделитель] - символ, задаваемый платформой (ОС) для разделения уровней папок в строке пути.
            </remarks>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">При передаче в качестве 
            параметра <paramref name="directoryName"/> пустой строки или <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Common.FileUtilities.GetCompleteParentDirectoryName(System.String)">
            <summary>
            Для заданного каталога возвращает полный путь родительского каталога.
            </summary>
            <param name="directoryName">Имя каталога.</param>
            <returns>Строка, представляющая полный путь к родительскому каталогу.</returns>
        </member>
        <member name="M:Terrasoft.Common.FileUtilities.CombineFileName(System.String,System.String)">
            <summary>
            Формирует имя файла в формате [Путь к каталогу][Имя файла].
            </summary>
            <param name="directoryPath">Путь к каталогу.</param>
            <param name="fileName">Имя файла.</param>
            <returns>Строка, представляющая путь к файлу в формате [Путь к каталогу][Имя файла].</returns>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">При передаче в качестве параметра <paramref name="fileName"/>
            пустой строки или <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Common.FileUtilities.MakeRelativePath(System.String,System.String)">
            <summary>
            Формирует относительный путь к файлу.
            </summary>
            <param name="baseDirectoryPath">Базовый путь к каталогу, относительно которого строится путь к файлу.
            </param>
            <param name="absoluteFilePath">Абсолютный путь к файлу.</param>
            <returns>Строка, представляющая путь к файлу <paramref name="absoluteFilePath"/> относительно каталога 
            <paramref name="baseDirectoryPath"/>.</returns>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">Если в качестве праметров 
            <paramref name="baseDirectoryPath"/> или <paramref name="absoluteFilePath"/> передается пустое значение или 
            <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Common.FileUtilities.MakeAbsolutePath(System.String,System.String)">
            <summary>
            Формирует абсолютный путь к файлу.
            </summary>
            <param name="baseDirectoryPath">Базовый путь к каталогу.</param>
            <param name="relativeFilePath">Относительный путь к файлу.</param>
            <returns>Строка, представляющая абсолютный путь к файлу</returns>
        </member>
        <member name="M:Terrasoft.Common.FileUtilities.CheckIsReadOnly(System.String)">
            <summary>
            Проверяет, является ли заданный файл доступным только для чтения.
            </summary>
            <param name="fileName">Имя файла.</param>
            <exception cref="T:System.IO.IOException">Если заданный файл <paramref name="fileName"/> является доступным только 
            для чтения.</exception>
        </member>
        <member name="M:Terrasoft.Common.FileUtilities.IsReadOnly(System.String)">
            <summary>
            Определяет, является ли заданный файл доступным только для чтения.
            </summary>
            <param name="fileName">Имя файла.</param>
            <returns>
            <c>true</c> если заданный файл доступен только для чтения; иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.FileUtilities.IsLocked(System.String)">
            <summary>
            Определяет, является ли заданный файл заблокированным.
            </summary>
            <param name="fileName">Имя файла.</param>
            <returns>
            <c>true</c>, если заданный файл является заблокированным; иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.FileUtilities.Delete(System.String)">
            <summary>
            Удаляет заданный файл.
            </summary>
            <param name="fileName">Имя файла.</param>
            <returns>
            <c>true</c>, если заданный файл успешно удален; <c>false</c> - если заданный файл не существует.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.FileUtilities.SetReadOnlyAttribute(System.String)">
            <summary>
            Устанавливает для заданного файла атрибут "Только для чтения".
            </summary>
            <param name="fileName">Имя файла.</param>
        </member>
        <member name="M:Terrasoft.Common.FileUtilities.ResetReadOnlyAttribute(System.String)">
            <summary>
            Сбрасывает для заданного файла атрибут "Только для чтения".
            </summary>
            <param name="fileName">Имя файла.</param>
        </member>
        <member name="M:Terrasoft.Common.FileUtilities.Replace(System.String,System.String,System.Boolean)">
            <summary>
            Заменяет заданный файл другим файлом.
            </summary>
            <param name="sourceFileName">Имя заменяемого файла.</param>
            <param name="destinationFileName">Имя заменяющего файла.</param>
            <param name="deleteSourceFile"><c>true</c>, если после замены заменяемый файл должен быть удален.</param>
            <returns><c>true</c>, если замена успешно произведена; <c>false</c> - если заменяемый файл не существует.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.FileUtilities.Replace(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Заменяет заданный файл другим файлом.
            </summary>
            <param name="sourceFileName">Имя заменяемого файла.</param>
            <param name="destinationFileName">Имя заменяющего файла.</param>
            <param name="deleteSourceFile"><c>true</c>, если после замены заменяемый файл должен быть удален.</param>
            <param name="forceReplace"><c>true</c>, если замена производится для файлов с атрибутом "Только для чтения".
            </param>
            <returns><c>true</c>, если замена успешно произведена; <c>false</c> - если заменяемый файл не существует.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.FileUtilities.GetUniqueFileName(System.String,System.String,System.String)">
            <summary>
            Формирует уникальное имя файла для заданного каталога.
            </summary>
            <param name="directory">Каталог.</param>
            <param name="fileName">Имя файла.</param>
            <param name="fileExtension">Расширение файла.</param>
            <returns>Строка, представляющая уникальное имя файла для заданного каталога <paramref name="directory"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.FileUtilities.CreateDirectory(System.IO.DirectoryInfo)">
            <summary>
            Создает каталог.
            </summary>
            <param name="directory">Экземпляр класса <see cref="T:System.IO.DirectoryInfo"/>, представляющий информацию о
            создаваемом каталоге.</param>
        </member>
        <member name="M:Terrasoft.Common.FileUtilities.CreateDirectoryByFilePath(System.String)">
            <summary>
            Создает каталог по заданному пути к файлу.
            </summary>
            <param name="filePath">Путь к файлу.</param>
        </member>
        <member name="M:Terrasoft.Common.FileUtilities.DeleteDirectory(System.String,System.Boolean)">
            <summary>
            Deletes the specified existing directory and, if indicated, any subdirectories and files in the directory.
            </summary>
            <param name="directoryPath">The name of the directory to remove.</param>
            <param name="isRecursive"><c>true</c> to remove directories, subdirectories, and files in path;
            otherwise, <c>false</c>. Default value: <c>false</c></param>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">In case if <c>null</c> or empty string passed as value of
            parameter <paramref name="directoryPath"/>.</exception>
        </member>
        <member name="M:Terrasoft.Common.FileUtilities.WriteInFile(System.String,System.String,System.Boolean)">
            <summary>
            Осуществляет запись в файл.
            </summary>
            <param name="filePath">Путь к файлу.</param>
            <param name="text">Текст для записи.</param>
            <param name="useWriteLine"><c>true</c>, если записывается текст с текущим признаком конца строки.</param>
        </member>
        <member name="M:Terrasoft.Common.FileUtilities.SetHiddenAttribute(System.String)">
            <summary>
            Устанавливает для заданного файла атрибут "Скрытый".
            </summary>
            <param name="fileName">Имя файла.</param>
        </member>
        <member name="M:Terrasoft.Common.FileUtilities.GetFiles(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Возвращает имена файлов из заданной директории.
            </summary>
            <param name="directoryPath">Путь к директории для поиска файлов.</param>
            <param name="searchPattern">Фильтр поиска файлов.</param>
            <param name="skipPaths">Перечислитель путей, которые необходимо исключить из поиска.</param>
            <returns>Перечислитель с именами файлов.</returns>
        </member>
        <member name="T:Terrasoft.Common.FormulaUtilities">
            <summary>
            Содержит статические математические функции, отсутствующие в System.Math.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.FormulaUtilities.Mod(System.Int32,System.Int32)">
            <summary>
            Деление по модулю двух целых чисел.
            </summary>
            <param name="dividend">Делимое.</param>
            <param name="divisor">Делитель.</param>
            <returns>Остаток от деления.</returns>
        </member>
        <member name="M:Terrasoft.Common.FormulaUtilities.Mod(System.Int64,System.Int64)">
            <summary>
            Деление по модулю двух 64-битных целых чисел.
            </summary>
            <param name="dividend">Делимое.</param>
            <param name="divisor">Делитель.</param>
            <returns>Остаток от деления.</returns>
        </member>
        <member name="M:Terrasoft.Common.FormulaUtilities.Mod(System.Single,System.Single)">
            <summary>
            Деление по модулю двух чисел с плавающей точкой.
            </summary>
            <param name="dividend">Делимое.</param>
            <param name="divisor">Делитель.</param>
            <returns>Остаток от деления.</returns>
        </member>
        <member name="M:Terrasoft.Common.FormulaUtilities.Mod(System.Double,System.Double)">
            <summary>
            Деление по модулю двух чисел с плавающей точкой двойной точности.
            </summary>
            <param name="dividend">Делимое.</param>
            <param name="divisor">Делитель.</param>
            <returns>Остаток от деления.</returns>
        </member>
        <member name="M:Terrasoft.Common.FormulaUtilities.Mod(System.Decimal,System.Decimal)">
            <summary>
            Деление по модулю двух чисел типа <see cref="T:System.Decimal"/>.
            </summary>
            <param name="dividend">Делимое.</param>
            <param name="divisor">Делитель.</param>
            <returns>Остаток от деления.</returns>
        </member>
        <member name="M:Terrasoft.Common.FormulaUtilities.Min(System.Int32[])">
            <summary>
            Возвращает меньшее из набора целых чисел.
            </summary>
            <param name="values">Набор сравниваемых чисел.</param>
            <returns>Минимальное число из набора целых чисел <paramref name="values"/>
            по результатам сравнения.</returns>
        </member>
        <member name="M:Terrasoft.Common.FormulaUtilities.Min(System.Int64[])">
            <summary>
            Возвращает меньшее из набора 64-битных целых чисел.
            </summary>
            <param name="values">Набор сравниваемых чисел.</param>
            <returns>Минимальное число из набора 64-битных целых чисел <paramref name="values"/>
            по результатам сравнения.</returns>
        </member>
        <member name="M:Terrasoft.Common.FormulaUtilities.Min(System.Single[])">
            <summary>
            Возвращает меньшее из набора чисел с плавающей точкой.
            </summary>
            <param name="values">Набор сравниваемых чисел.</param>
            <returns>Минимальное число из набора чисел с плавающей точкой <paramref name="values"/>
            по результатам сравнения.</returns>
        </member>
        <member name="M:Terrasoft.Common.FormulaUtilities.Min(System.Double[])">
            <summary>
            Возвращает меньшее из набора чисел с плавающей точкой двойной точности.
            </summary>
            <param name="values">Набор сравниваемых чисел.</param>
            <returns>Минимальное число из набора чисел с плавающей точкой двойной точности <paramref name="values"/>
            по результатам сравнения.</returns>
        </member>
        <member name="M:Terrasoft.Common.FormulaUtilities.Min(System.Decimal[])">
            <summary>
            Возвращает меньшее из набора чисел типа <see cref="T:System.Decimal"/>.
            </summary>
            <param name="values">Набор сравниваемых чисел.</param>
            <returns>Минимальное число из набора чисел <paramref name="values"/>
            по результатам сравнения.</returns>
        </member>
        <member name="M:Terrasoft.Common.FormulaUtilities.Min(System.DateTime[])">
            <summary>
            Возвращает меньшую из двух дат.
            </summary>
            <param name="values">Набор сравниваемых дат.</param>
            <returns>Минимальная дата из набора <paramref name="values"/>
            по результатам сравнения.</returns>
        </member>
        <member name="M:Terrasoft.Common.FormulaUtilities.Max(System.Int32[])">
            <summary>
            Возвращает большее из набора целых чисел.
            </summary>
            <param name="values">Набор сравниваемых чисел.</param>
            <returns>Максимальное число из набора целых чисел <paramref name="values"/>
            по результатам сравнения.</returns>
        </member>
        <member name="M:Terrasoft.Common.FormulaUtilities.Max(System.Int64[])">
            <summary>
            Возвращает большее из набора 64-битных целых чисел.
            </summary>
            <param name="values">Набор сравниваемых чисел.</param>
            <returns>Максимальное число из набора 64-битных целых чисел <paramref name="values"/>
            по результатам сравнения.</returns>
        </member>
        <member name="M:Terrasoft.Common.FormulaUtilities.Max(System.Single[])">
            <summary>
            Возвращает большее из набора чисел с плавающей точкой.
            </summary>
            <param name="values">Набор сравниваемых чисел.</param>
            <returns>Максимальное число из набора чисел с плавающей точкой <paramref name="values"/>
            по результатам сравнения.</returns>
        </member>
        <member name="M:Terrasoft.Common.FormulaUtilities.Max(System.Double[])">
            <summary>
            Возвращает большее из набора чисел с плавающей точкой двойной точности.
            </summary>
            <param name="values">Набор сравниваемых чисел.</param>
            <returns>Максимальное число из набора чисел с плавающей точкой двойной точности <paramref name="values"/>
            по результатам сравнения.</returns>
        </member>
        <member name="M:Terrasoft.Common.FormulaUtilities.Max(System.Decimal[])">
            <summary>
            Возвращает большее из набора чисел типа <see cref="T:System.Decimal"/>.
            </summary>
            <param name="values">Набор сравниваемых чисел.</param>
            <returns>Максимальное число из набора чисел <paramref name="values"/>
            по результатам сравнения.</returns>
        </member>
        <member name="M:Terrasoft.Common.FormulaUtilities.Max(System.DateTime[])">
            <summary>
            Возвращает большую из двух дат.
            </summary>
            <param name="values">Набор сравниваемых дат.</param>
            <returns>Максимальная дата из набора <paramref name="values"/>
            по результатам сравнения.</returns>
        </member>
        <member name="M:Terrasoft.Common.FormulaUtilities.Avg(System.Int32[])">
            <summary>
            Возвращает среднее арифметическое набора целых чисел.
            </summary>
            <param name="values">Набор сравниваемых чисел.</param>
            <returns>Среднее арифметическое</returns>
        </member>
        <member name="M:Terrasoft.Common.FormulaUtilities.Avg(System.Int64[])">
            <summary>
            Возвращает среднее арифметическое набора 64-битных целых чисел.
            </summary>
            <param name="values">Набор сравниваемых чисел.</param>
            <returns>Среднее арифметическое набора чисел <paramref name="values"/>.</returns>
        </member>
        <member name="M:Terrasoft.Common.FormulaUtilities.Avg(System.Double[])">
            <summary>
            Возвращает среднее арифметическое набора чисел с плавающей точкой.
            </summary>
            <param name="values">Набор сравниваемых чисел.</param>
            <returns>Среднее арифметическое набора чисел <paramref name="values"/>.</returns>
        </member>
        <member name="M:Terrasoft.Common.FormulaUtilities.Avg(System.Decimal[])">
            <summary>
            Возвращает среднее арифметическое набора чисел типа <see cref="T:System.Decimal"/>.
            </summary>
            <param name="values">Набор сравниваемых чисел.</param>
            <returns>Среднее арифметическое набора чисел <paramref name="values"/>.</returns>
        </member>
        <member name="T:Terrasoft.Common.GeneralResourceStorage">
            <summary>
            Provides operations for resource storage.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.GeneralResourceStorage.IsInitialized">
            <summary>
            Признак, является ли текущеее хранилище ресурсов проинициализированным. 
            </summary>
        </member>
        <member name="P:Terrasoft.Common.GeneralResourceStorage.Cultures">
            <summary>
            Current resource storage culture list.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.GeneralResourceStorage.DefCulture">
            <summary>
            Default culture for current thread.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.GeneralResourceStorage.AvailableManagers">
            <summary>
            Коллекция доступных менеджеров текущего хранилища ресурсов.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.GeneralResourceStorage.Managers">
            <summary>
            Коллекция менеджеров ресурсов текущего хранилища ресурсов.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.GeneralResourceStorage.CurrentCulture">
            <summary>
            Культура для текущего потока.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.GeneralResourceStorage.CustomResources">
            <summary>
            Список пользовательских ресурсов текущего хранилища ресурсов.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.GeneralResourceStorage.ResourceDirectory">
            <summary>
            Директория, в которой хранятся файлы ресурсов.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.GeneralResourceStorage.UseGregorianCalendarOnly">
            <summary>
            Flag, use only gregorian calendar for entire system.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.GeneralResourceStorage.CreateCultureScope(System.Globalization.CultureInfo)">
            <summary>
            Creates the scope that can be used to resolve scoped cultures.
            </summary>
            <returns>Instance, that implements the <see cref="T:System.IDisposable"/> interface.</returns>
        </member>
        <member name="M:Terrasoft.Common.GeneralResourceStorage.SetCurentCulture(System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Изменение текущей культуры
            </summary>
        </member>
        <member name="M:Terrasoft.Common.GeneralResourceStorage.Initialize(Terrasoft.Common.ResourceConfigurationSectionGroup)">
            <summary>
            Выполняет инициализацию хранилища ресурсов на основании заданной конфигурационной секции ресурсов.
            </summary>
            <param name="resourceConfiguration">Конфигурационная секция ресурсов.</param>
            <exception cref="T:Terrasoft.Common.NullOrEmptyException">Если в качестве параметра <paramref name="resourceConfiguration"/>
            передано значение <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Common.GeneralResourceStorage.FindManager(System.String)">
            <summary>
            Searches for resource manager with specified name in current resource storage.
            </summary>
            <param name="managerName">Name of resource manager.</param>
            <returns>
            Instance of <see cref="T:Terrasoft.Common.IResourceManager"/> with name <paramref name="managerName"/> or
            <c>null</c> if there are no manager with such name.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.GeneralResourceStorage.GetManager(System.String)">
            <summary>
            Returns resource manager from current storage or throws exception if there are no manager with such name.
            </summary>
            <param name="managerName">Name of resource manager.</param>
            <returns>
            Instance of <see cref="T:Terrasoft.Common.IResourceManager"/> with name <paramref name="managerName"/>.
            </returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">
            If the resource manager with the name <paramref name="managerName" /> was not found in the current
            resource store.
            </exception>
        </member>
        <member name="M:Terrasoft.Common.GeneralResourceStorage.RemoveManager(System.String)">
            <summary>
            Удаляет из текущего хранилища ресурсов менеджер ресурсов с заданным именем.
            </summary>
            <param name="managerName">Имя менеджера ресурсов, который необходимо удалить.</param>
            <returns>
            <c>true</c>, если менеджер ресурсов с именем <paramref name="managerName"/> успешно удален из текущего 
            хранилища ресурсов; иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.GeneralResourceStorage.GetObject(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Возвращает объект с заданными именем и культурой, принадлежащий указанному менеджеру ресурсов, либо 
            генерирует исключение, если такой объект не найден.
            </summary>
            <param name="managerName">Имя менеджера ресурсов.</param>
            <param name="objectName">Имя объекта.</param>
            <param name="culture">Культура объекта.</param>
            <returns>
            Объект с именем <paramref name="objectName"/> и культурой <paramref name="culture"/>, принадлежащий 
            менеджеру ресурсов с именем <paramref name="managerName"/>.
            </returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">
            Если в менеджере ресурсов <paramref name="managerName"/> не найден объект с именем 
            <paramref name="objectName"/> и культурой <paramref name="culture"/>.
            </exception>
        </member>
        <member name="M:Terrasoft.Common.GeneralResourceStorage.GetObject(System.String,System.String)">
            <summary>
            Возвращает объект с заданным именем, принадлежащий указанному менеджеру ресурсов, либо генерирует 
            исключение, если такой объект не найден.
            </summary>
            <param name="managerName">Имя менеджера ресурсов.</param>
            <param name="objectName">Имя объекта.</param>
            <returns>
            Объект с именем <paramref name="objectName"/>, принадлежащий менеджеру ресурсов с именем 
            <paramref name="managerName"/>.
            </returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Если менеджер ресурсов с именем <paramref name="managerName"/> не 
            найден в текущем хранилище ресурсов.</exception>
        </member>
        <member name="M:Terrasoft.Common.GeneralResourceStorage.TryGetObject(System.String,System.String,System.Object@)">
            <summary>
            Получает объект с именем <paramref name="objectName"/> менеджера ресурсов 
            <paramref name="managerName"/> в заданном параметре <paramref name="obj"/>. Возвращает значение, 
            указывающее, успешно ли получен объект <paramref name="objectName"/>.</summary>
            <param name="managerName">Имя менеджера ресурсов.</param>
            <param name="objectName">Имя объекта.</param>
            <param name="obj">Выходной параметр, в который помещается объект с именем <paramref name="objectName"/> 
            менеджера ресурсов <paramref name="managerName"/>.</param>
            <returns>
            <c>true</c>, если у менеджера ресурсов <paramref name="managerName"/> успешно получен объект с именем 
            <paramref name="objectName"/>; иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.GeneralResourceStorage.FindCulture(System.String)">
            <summary>
            Returns culture by specified name, if culture not exists it returns null.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.GeneralResourceStorage.AddCultureInfo(System.Globalization.CultureInfo)">
            <summary>
            Adds culture to current resource storage.
            </summary>
            <param name="culture">Instance of <see cref="T:System.Globalization.CultureInfo"/>.</param>
        </member>
        <member name="M:Terrasoft.Common.GeneralResourceStorage.RemoveCultureInfo(System.Globalization.CultureInfo)">
            <summary>
            Removes culture from current resource storage.
            </summary>
            <param name="culture">Instance of <see cref="T:System.Globalization.CultureInfo"/>.</param>
        </member>
        <member name="M:Terrasoft.Common.GeneralResourceStorage.AddCultureInfo(System.Collections.Generic.IEnumerable{System.Globalization.CultureInfo})">
            <summary>
            Adds culture collection to current resource storage.
            </summary>
            <param name="cultures">Collection of <see cref="T:System.Globalization.CultureInfo"/> instances.</param>
        </member>
        <member name="M:Terrasoft.Common.GeneralResourceStorage.SetDefCulture(System.Guid,System.Globalization.CultureInfo)">
            <summary>
            Sets default culture info.
            </summary>
            <param name="defCultureId">Id of the culture.</param>
            <param name="defCulture">The culture info.</param>
        </member>
        <member name="M:Terrasoft.Common.GeneralResourceStorage.GetAppropriateCulture(System.Globalization.CultureInfo)">
            <summary>
            Возвращает культуру, максимально соответствующую заданной культуре.
            </summary>
            <param name="culture"></param>
            <returns>Культура из коллекции культур хранилища ресурсов, максимально соотвутствующая 
            <paramref name="culture"/>. Если такой культуры в коллекции культур хранилища нет, то возвращается 
            инвариантная культура.</returns>
        </member>
        <member name="T:Terrasoft.Common.GraphicUtilities">
            <summary>
            Содержит служебные методы для работы с изображением.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.GraphicUtilities.GetImageFileExtension(System.Drawing.Image)">
            <summary>
            Возвращает строковое представление расширение файла данного изображения.
            </summary>
            <param name="source">Изображение.</param>
            <returns>Строка, представляющая расширение файла изображения в формате [.][расширение]</returns>
            <remarks>
            <para>Перегруженный метод.</para>
            <para>Метод расширения класса <see cref="T:System.Drawing.Image"/>.</para>
            </remarks>
        </member>
        <member name="M:Terrasoft.Common.GraphicUtilities.GetImageFileExtension(System.Drawing.Image,System.Boolean)">
            <summary>
            Возвращает строковое представление расширение файла данного изображения. 
            </summary>
            <param name="source">Изображение.</param>
            <param name="useDot"><c>true</c>, если результирующая строка содержит '.' перед расширением; 
            иначе - <c>false</c>.</param>
            <returns>Строка, представляющая расширение файла изображения.</returns>
            <remarks>
            <para>Перегруженный метод.</para>
            <para>Метод расширения класса <see cref="T:System.Drawing.Image"/>.</para>
            </remarks>
        </member>
        <member name="M:Terrasoft.Common.GraphicUtilities.GetImageFormat(System.Drawing.Imaging.ImageFormat)">
            <summary>
            Возвращает формат данного изображения.
            </summary>
            <param name="rawFormat">Формат.</param>
            <returns>Формат данного изображения.</returns>
        </member>
        <member name="M:Terrasoft.Common.GraphicUtilities.ToByteArray(System.Drawing.Image)">
            <summary>
            Преобразует данный экземпляр <see cref="T:System.Drawing.Image"/> в массив байтов.
            </summary>
            <param name="source">Изображение.</param>
            <returns>Массив байтов.</returns>
            <remarks>Метод расширения класса <see cref="T:System.Drawing.Image"/>.</remarks>
        </member>
        <member name="T:Terrasoft.Common.GuidUtilities">
            <summary>
            Содержит служебные методы для работы со структурой <see cref="T:System.Guid"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.GuidUtilities.IsEmpty(System.Guid)">
            <summary>
            Определяет, является ли <see cref="T:System.Guid"/> пустым.
            </summary>
            <param name="source">Экземпляр структуры <see cref="T:System.Guid"/>.</param>
            <returns>
            <c>true</c> если экземпляр <paramref name="source"/> пустой; 
            иначе - <c>false</c>.
            </returns>
            <remarks>Метод расширения класса <see cref="T:System.Guid"/>.</remarks>
        </member>
        <member name="M:Terrasoft.Common.GuidUtilities.Xor(System.Guid,System.Guid)">
            <summary>
            Generates a deterministic GUID, which is based on XOR operation.
            </summary>
            <param name="source">The first GUID.</param>
            <param name="guid2">The second GUID.</param>
            <returns>Instance of the <see cref="T:System.Guid"/> type.</returns>
        </member>
        <member name="T:Terrasoft.Common.Hash.IHashCombiner">
            <summary>
            Provides methods to combine hashes into single hash.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.Hash.IHashCombiner.Combine(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Combines hashes into single hash.
            </summary>
            <param name="hashes">Collection of hashes to combine into single hash.</param>
            <returns>Returns single hash.</returns>
        </member>
        <member name="M:Terrasoft.Common.Hash.IHashProvider.GetMD5HashByFile(System.String)">
            <summary>
            Returns file checksum as string.
            </summary>
            <param name="path">File path.</param>
            <returns>File checksum as string.</returns>
        </member>
        <member name="M:Terrasoft.Common.Hash.IHashProvider.GetMD5HashByByteArray(System.Byte[])">
            <summary>
            Returns byte array checksum as string.
            </summary>
            <param name="contentBytes">Byte array.</param>
            <returns>Byte array checksum as string.</returns>
        </member>
        <member name="T:Terrasoft.Common.ICompositeObject">
            <summary>
            Represents value which consists of multiple simple values.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.ICompositeObject.TryGetValue(System.String,System.Type,System.Object@)">
            <summary>Returns inner value by key.</summary>
            <param name="key">The key.</param>
            <param name="valueType">Type of the value.</param>
            <param name="value">Result value.</param>
        </member>
        <member name="M:Terrasoft.Common.ICompositeObject.TryGetValue``1(System.String,``0@)">
            <summary>Returns inner value by key.</summary>
            <typeparam name="TValueType">The type of the value.</typeparam>
            <param name="key">The key.</param>
            <param name="value">Result value.</param>
        </member>
        <member name="T:Terrasoft.Common.ICompositeObjectList`1">
            <summary>
            Represents list of composite values <see cref="T:Terrasoft.Common.ICompositeObject"/> which supports serialization.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.ICompositeObjectValues">
            <summary>
            Represents a set of methods for work with the composite object values.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.ICompositeObjectValues.Count">
            <summary>
            Gets the number of values contained in the collection.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.ICompositeObjectValues.Add(System.String,System.Object)">
            <summary>
            Adds an element of type <see cref="T:Terrasoft.Common.ICompositeObject"/> with the provided key and value.
            </summary>
            <param name="key">Key.</param>
            <param name="value">Value.</param>
        </member>
        <member name="T:Terrasoft.Common.IDns">
            <summary>
            Provides simple domain name resolution functionality.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.IDns.GetHostName">
            <summary>
            Gets the host name of the local computer.
            </summary>
            
            <returns>
            A string that contains the DNS host name of the local computer.
            </returns>
            <exception cref="T:System.Net.Sockets.SocketException">An error is encountered
            when resolving the local host name. </exception>
        </member>
        <member name="M:Terrasoft.Common.IDns.GetHostEntry(System.String)">
            <summary>
            Resolves a host name or IP address to an <see cref="T:System.Net.IPHostEntry"/> instance.
            </summary>
            <param name="hostNameOrAddress">The host name or IP address to resolve.</param>
            <returns>
            An <see cref="T:System.Net.IPHostEntry"/> instance that contains address information
            about the host specified in <paramref name="hostNameOrAddress"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="hostNameOrAddress"/> parameter is null.
            </exception><exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="hostNameOrAddress"/> parameter is greater than 255 characters.
            </exception><exception cref="T:System.Net.Sockets.SocketException">An error was encountered
            when resolving the <paramref name="hostNameOrAddress"/> parameter.
            </exception><exception cref="T:System.ArgumentException">
            The <paramref name="hostNameOrAddress"/> parameter is an invalid IP address. </exception>
        </member>
        <member name="T:Terrasoft.Common.ILazyProperty`1">
            <summary>
            Used to defer property value initialization. 
            </summary>
            <typeparam name="TInstance">The type of the instance.</typeparam>
        </member>
        <member name="M:Terrasoft.Common.ILazyProperty`1.InitValue(`0)">
            <summary>
            Initializes the value of instance property.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="T:Terrasoft.Common.ImageUrlBuilder">
            <summary>
            Предоставляет методы для формирования url графических объектов.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.ImageUrlBuilder.GetImageUrl(System.String,System.Guid,System.String)">
            <summary>
            Возвращает строку url графического объекта по заданным менеджеру схемы, идентификатору схемы и имени 
            графического объекта. </summary>
            <param name="schemaManager">Менеджер схемы.</param>
            <param name="schemaUId">Идентификатор схемы.</param>
            <param name="imageName">Имя графического объекта.</param>
            <returns>Строка, представляющая url графического объекта с именем <paramref name="imageName"/>, менеджером
            схемы <paramref name="schemaManager"/>, идентификатором схемы <paramref name="schemaUId"/>.</returns>
            <remarks>
            <para>Перегруженный метод.</para>
            </remarks>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">При передаче в качестве одного из параметров
            <paramref name="schemaManager"/>, <paramref name="schemaUId"/>, <paramref name="imageName"/> пустого 
            значения или <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Common.ImageUrlBuilder.GetImageUrl(System.String,System.String,System.String)">
            <summary>
            Возвращает строку url графического объекта по заданным списку графических объектов, имени графического 
            объекта, источнику. </summary>
            <param name="imageList">Список графических объектов.</param>
            <param name="imageName">Имя графического объекта.</param>
            <param name="source">Источник.</param>
            <returns>Строка, представляющая url графического объекта с именем <paramref name="imageName"/> из списка
            объектов <paramref name="imageList"/> источника <paramref name="source"/>.</returns>
        </member>
        <member name="M:Terrasoft.Common.ImageUrlBuilder.GetImageUrl(System.String,System.String,System.String,System.String)">
            <summary>
            Возвращает строку url графического объекта по заданным списку графических объектов, имени графического 
            объекта, источнику и хэшу. </summary>
            <param name="imageList">Список графических объектов.</param>
            <param name="imageName">Имя графического объекта.</param>
            <param name="source">Источник.</param>
            <param name="hash">Хэш.</param>
            <returns>Строка, представляющая url графического объекта с именем <paramref name="imageName"/> из списка
            объектов <paramref name="imageList"/> источника <paramref name="source"/> хэша <paramref name="hash"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.ImageUrlBuilder.GetClientUnitImageUrl(System.String,System.String)">
            <summary>
            Returns the url string of the graphical object given the client schema name and graphical object name.
            </summary>
            <param name="clientUnitName">Client schema name.</param>
            <param name="imageName">Graphical object name.</param>
            <returns>A string representing the url of a graphical object named <paramref name="imageName"/>, that
            is in the client schema <paramref name="clientUnitName"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.ImageUrlBuilder.GetClientUnitImageUrl(System.String,System.String,System.String)">
            <summary>
            Returns the url string of the graphical object given the client schema name and graphical object name.
            </summary>
            <param name="clientUnitName">Client schema name.</param>
            <param name="imageName">Graphical object name.</param>
            <param name="hash">Graphical object hash.</param>
            <returns>A string representing the url of a graphical object named <paramref name="imageName"/>, that
            is in the client schema <paramref name="clientUnitName"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.IMetaDataSerializable.ReadMetaData(Terrasoft.Common.DataReader)">
            <summary>
            Reads meta data values.
            </summary>
            <param name="reader">Instance of the <see cref="T:Terrasoft.Common.DataReader"/> type.</param>
        </member>
        <member name="M:Terrasoft.Common.IMetaDataSerializable.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Writes meta data values.
            </summary>
            <param name="writer">Instance of the <see cref="T:Terrasoft.Common.DataWriter"/> type.</param>
        </member>
        <member name="T:Terrasoft.Common.INodeIdGenerator">
            <summary>
            Provides a method for generating unique node identifier.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.INodeIdGenerator.GenerateNodeUniqueId">
            <summary>
            Generates unique node identifier.
            </summary>
            <returns>Node identifier.</returns>
        </member>
        <member name="T:Terrasoft.Common.IObjectList">
            <summary>
            Represents list of values which supports serialization.
            </summary>
            <seealso cref="T:System.Runtime.Serialization.ISerializable" />
            <seealso cref="T:System.Collections.IEnumerable" />
        </member>
        <member name="T:Terrasoft.Common.IO.DirectoryWrapper">
            <summary>
            Wrapper for <see cref="T:System.IO.Directory"/> class. Exposes methods for enumerating through directories and
            subdirectories. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.IO.DirectoryWrapper.EnumerateFileSystemEntries(System.String)">
            <summary>Returns an enumerable collection of file names and directory names in a specified path. </summary>
            <param name="path">The relative or absolute path to the directory to search.
            This string is not case-sensitive.</param>
            <returns>An enumerable collection of file-system entries in the directory specified
            by <paramref name="path" />.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="path" />is a zero-length string, contains only white space, or contains invalid
            characters. You can query for invalid characters by using the
            <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path" /> is <see langword="null" />. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            <paramref name="path" /> is invalid, such as referring to an unmapped drive. </exception>
            <exception cref="T:System.IO.IOException">
            <paramref name="path" /> is a file name.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed
            the system-defined maximum length. For example, on Windows-based platforms, paths must be less
            than 248 characters and file names must be less than 260 characters.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.
            </exception>
        </member>
        <member name="T:Terrasoft.Common.IO.FileStreamWrapper">
            <summary>
            Wrapper for <see cref="T:System.IO.FileStream"/> class. Provides a <see cref="T:System.IO.Stream"/> for a file.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.IO.FileStreamWrapper.Create(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified 
            path, creation mode, read/write permission, and sharing permission.</summary>
            <param name="path">A relative or absolute path for the file that the current 
            <see langword="FileStream" /> object will encapsulate. </param>
            <param name="mode">A constant that determines how to open or create the file. </param>
            <param name="access">A constant that determines how the file can be accessed by the 
            <see langword="FileStream" /> object. This also determines the values returned by 
            the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> 
            properties of the <see langword="FileStream" /> object. <see cref="P:System.IO.FileStream.CanSeek" /> 
            is <see langword="true" /> if <paramref name="path" /> specifies a disk file. </param>
            <param name="share">A constant that determines how the file will be shared by processes. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path" /> is <see langword="null" />. </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="path" /> is an empty string (""), contains only white space, or contains one or more 
            invalid characters. -or-
            <paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. 
            in an NTFS environment.</exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. 
            in a non-NTFS environment.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file cannot be found, such as when 
            <paramref name="mode" /> is <see langword="FileMode.Truncate" /> or <see langword="FileMode.Open" />, and 
            the file specified by <paramref name="path" /> does not exist. The file must already exist in these modes. 
            </exception>
            <exception cref="T:System.IO.IOException">An I/O error, such as specifying 
            <see langword="FileMode.CreateNew" /> when the file specified by <paramref name="path" /> already exists, 
            occurred. -or-The system is running Windows 98 or Windows 98 Second Edition and <paramref name="share" /> 
            is set to <see langword="FileShare.Delete" />.-or-The stream has been closed.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. 
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on 
            an unmapped drive. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The <paramref name="access" /> requested is not 
            permitted by the operating system for the specified <paramref name="path" />, such as when 
            <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file or 
            directory is set for read-only access. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed 
            the system-defined maximum length. For example, on Windows-based platforms, paths must be less 
            than 248 characters, and file names must be less than 260 characters. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="mode" /> contains an invalid value. </exception>
        </member>
        <member name="M:Terrasoft.Common.IO.FileStreamWrapper.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Common.IO.FileStreamWrapper"/> class on the 
            specified path.
            </summary>
            <param name="path">File path.</param>
            <param name="fileMode">Specifies how the operating system should open a file.</param>
            <param name="fileAccess">Defines constants for read, write, or read/write access to a file.</param>
            <param name="fileShare">Contains constants for controlling the kind of access other
            <see cref="T:System.IO.FileStream"/> objects can have to the same file.</param>
        </member>
        <member name="M:Terrasoft.Common.IO.FileStreamWrapper.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Common.IO.FileStreamWrapper"/> class on the 
            specified path.
            </summary>
            <param name="path">File path.</param>
            <param name="fileMode">Specifies how the operating system should open a file.</param>
            <param name="fileAccess">Defines constants for read, write, or read/write access to a file.</param>
        </member>
        <member name="M:Terrasoft.Common.IO.FileStreamWrapper.Open(System.String,System.IO.FileMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Common.IO.FileStreamWrapper"/> class on the 
            specified path.
            </summary>
            <param name="path">File path.</param>
            <param name="fileMode">Specifies how the operating system should open a file.</param>
        </member>
        <member name="T:Terrasoft.Common.IO.FileWrapper">
            <summary>
            Wrapper for <see cref="T:System.IO.File"/> class. Provides methods for the reading of a single file.
            This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.IO.FileWrapper.Copy(System.String,System.String)">
            <summary>
            Copies an existing file to a new file. Overwriting a file of the same name is not allowed.
            </summary>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destinationFileName">
            The name of the destination file. This cannot be a directory or an existing file.
            </param>
        </member>
        <member name="M:Terrasoft.Common.IO.FileWrapper.Copy(System.String,System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file. Overwriting a file of the same name is allowed.
            </summary>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destFileName">The name of the destination file. This cannot be a directory.</param>
            <param name="overwrite">true if the destination file can be overwritten; otherwise, false.</param>
        </member>
        <member name="M:Terrasoft.Common.IO.FileWrapper.Delete(System.String)">
            <summary>
            Deletes the specified file.
            </summary>
            <param name="path">The name of the file to be deleted. Wildcard characters are not supported.</param>
        </member>
        <member name="M:Terrasoft.Common.IO.FileWrapper.Exists(System.String)">
            <summary>
            Determines whether the specified file exists.
            </summary>
            <param name="path">The file to check.</param>
            <returns>
            <c>True</c> if the caller has the required permissions and path contains the name of an existing file.
            Otherwise returns <c>false</c>. Also returns <c>false</c> when path is <c>null</c>, contains wrong
            value or zero-length string. If the caller does not have sufficient permissions to read the specified file,
            no exception is thrown and the method returns <c>false</c> regardless of the path existence.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.IO.FileWrapper.GetAttributes(System.String)">
            <summary>Gets the <see cref="T:System.IO.FileAttributes" /> of the file on the path.</summary>
            <param name="path">The path to the file. </param>
            <returns>The <see cref="T:System.IO.FileAttributes" /> of the file on the path.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="path" /> is empty, contains only white spaces, or contains invalid characters. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed 
            the system-defined maximum length. For example, on Windows-based platforms, paths must be 
            less than 248 characters, and file names must be less than 260 characters. </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="path" /> is in an invalid format. </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            <paramref name="path" /> represents a file and is invalid, such as being on an unmapped drive, or the file 
            cannot be found. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            <paramref name="path" /> represents a directory and is invalid, such as being on an unmapped drive, or the 
            directory cannot be found.</exception>
            <exception cref="T:System.IO.IOException">This file is being used by another process.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:Terrasoft.Common.IO.FileWrapper.Move(System.String,System.String)">
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="sourceFileName">The name of the file to move. Can include a relative or absolute path.</param>
            <param name="destFileName">The new path and name for the file.</param>
        </member>
        <member name="M:Terrasoft.Common.IO.FileWrapper.Open(System.String,System.IO.FileMode)">
            <summary>Opens a <see cref="T:System.IO.FileStream" /> on the specified path with read/write access.
            </summary>
            <param name="path">The file to open. </param>
            <param name="mode">A <see cref="T:System.IO.FileMode" /> value that specifies whether a file is created 
            if one does not exist, and determines whether the contents of existing files are retained or overwritten. 
            </param>
            <returns>A <see cref="T:System.IO.Stream" /> opened in the specified mode and path, with read/write 
            access and not shared.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more 
            invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />. </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path" /> is <see langword="null" />. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the 
            system-defined maximum length. For example, on Windows-based platforms, paths must be 
            less than 248 characters, and file names must be less than 260 characters. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, 
            (for example, it is on an unmapped drive). </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path" /> specified a file that is read-only.-or- This operation is not supported on 
            the current platform.-or-
            <paramref name="path" /> specified a directory.-or- The caller does not have the required permission. -or-
            <paramref name="mode" /> is <see cref="F:System.IO.FileMode.Create" /> and the specified file 
            is a hidden file.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="mode" /> specified an invalid value. </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in 
            <paramref name="path" /> was not found. </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="path" /> is in an invalid format. </exception>
        </member>
        <member name="M:Terrasoft.Common.IO.FileWrapper.OpenRead(System.String)">
            <summary>
            Opens an existing file for reading.
            </summary>
            <param name="path">The file to be opened for reading.</param>
            <returns>A read-only <see cref="T:System.IO.Stream"/> on the specified path.</returns>
        </member>
        <member name="M:Terrasoft.Common.IO.FileWrapper.ReadAllLines(System.String)">
            <summary>
            Opens a text file, reads all lines of the file, and then closes the file.
            </summary>
            <param name="path">The file to read from.</param>
        </member>
        <member name="M:Terrasoft.Common.IO.FileWrapper.ReadAllBytes(System.String)">
            <summary>
            Opens a binary file, reads the contents of the file into a byte array, and then closes the file.
            </summary>
            <param name="path">The file to open for reading. </param>
            <returns>
            A byte array containing the data of the file.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.IO.FileWrapper.ReadAllText(System.String,System.Text.Encoding)">
            <summary>Opens a file, reads all lines of the file with the specified encoding, and then closes the 
            file.</summary>
            <param name="path">The file to open for reading. </param>
            <param name="encoding">The encoding applied to the contents of the file. </param>
            <returns>A string containing all lines of the file.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more 
            invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />. </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path" /> is <see langword="null" />. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed 
            the system-defined maximum length. For example, on Windows-based platforms, paths must be less 
            than 248 characters, and file names must be less than 260 characters. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid 
            (for example, it is on an unmapped drive). </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path" /> specified a file that is read-only.-or- This operation is not supported on the 
            current platform.-or-
            <paramref name="path" /> specified a directory.-or- The caller does not have the required permission. 
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> 
            was not found. </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="path" /> is in an invalid format. </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. 
            </exception>
        </member>
        <member name="M:Terrasoft.Common.IO.FileWrapper.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>Sets the specified <see cref="T:System.IO.FileAttributes" /> of the file on the specified path.
            </summary>
            <param name="path">The path to the file. </param>
            <param name="fileAttributes">A bitwise combination of the enumeration values. </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="path" /> is empty, contains only white spaces, contains invalid characters, 
            or the file attribute is invalid. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed 
            the system-defined maximum length. For example, on Windows-based platforms, paths must 
            be less than 248 characters, and file names must be less than 260 characters. </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="path" /> is in an invalid format. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, 
            (for example, it is on an unmapped drive). </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file cannot be found.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path" /> specified a file that is read-only.-or- This operation is not supported 
            on the current platform.-or-
            <paramref name="path" /> specified a directory.-or- The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:Terrasoft.Common.IO.FileWrapper.SetCreationTime(System.String,System.DateTime)">
            <summary>Sets the date and time the file was created.
            </summary>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="creationTime">A <see cref="T:System.DateTime" /> containing the value to set for the creation
            date and time of path. This value is expressed in local time.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="path" /> is a zero-length string, contains only white space,
            or contains one or more invalid characters as defined by InvalidPathChars.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path" /> is null. </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length. For example,
            on Windows-based platforms, paths must be less than 248 characters, and file names must be less
            than 260 characters. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while
            performing the operation. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="creationTime" /> specifies a value outside the range of dates, times,
            or both permitted for this operation.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="path" /> is in an invalid format.</exception>
        </member>
        <member name="M:Terrasoft.Common.IO.FileWrapper.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the specified file was last written to.
            </summary>
            <param name="path">The file for which to set the date and time information.</param>
            <param name="lastWriteTimeUtc">A DateTime containing the value to set 
            for the last write date and time of path. This value is expressed in UTC time.</param>
        </member>
        <member name="M:Terrasoft.Common.IO.FileWrapper.WriteAllBytes(System.String,System.Byte[])">
            <summary>
            Creates a new file, writes the specified byte array to the file, and then closes
            the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="bytes">The bytes to write to the file.</param>
        </member>
        <member name="M:Terrasoft.Common.IO.FileWrapper.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new file, writes a collection of strings <paramref name="contents"/> to the file, 
            and then closes the file.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
        </member>
        <member name="M:Terrasoft.Common.IO.FileWrapper.WriteAllText(System.String,System.String)">
            <summary>Creates a new file, writes the specified string to the file, 
            and then closes the file. If the target file already exists, it is overwritten.</summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="path" /> is a zero-length string, contains only white space,
            or contains one or more invalid characters 
            as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path" /> is null or <paramref name="contents" /> is empty.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, 
            or both exceed the system-defined maximum length. For example, on Windows-based platforms, 
            paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path
            is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path" /> specified a file that is read-only.-or-
            This operation is not supported on the current platform.-or- <paramref name="path" /> 
            specified a directory.-or- The caller does not have the required permission.</exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="path" /> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have 
            the required permission.</exception>
        </member>
        <member name="M:Terrasoft.Common.IO.FileWrapper.WriteAllText(System.String,System.String,System.Text.Encoding)">
            <summary>Creates a new file, writes the specified string to the file, and then closes the file. 
            If the target file already exists, it is overwritten.</summary>
            <param name="path">The file to write to. </param>
            <param name="contents">The string to write to the file. </param>
            <param name="encoding">The encoding to apply to the string.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more 
            invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />. </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path" /> is <see langword="null" /> or <paramref name="contents" /> is empty. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed 
            the system-defined maximum length. For example, on Windows-based platforms, paths must 
            be less than 248 characters, and file names must be less than 260 characters. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid 
            (for example, it is on an unmapped drive). </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path" /> specified a file that is read-only.-or- This operation is not supported on 
            the current platform.-or-
            <paramref name="path" /> specified a directory.-or- The caller does not have the required permission. 
            </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="path" /> is in an invalid format. </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. 
            </exception>
        </member>
        <member name="T:Terrasoft.Common.IO.IFileStream">
            <summary>
            Provides a <see cref="T:System.IO.Stream"/> for a file.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.IO.IFileStream.Create(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified 
            path, creation mode, read/write permission, and sharing permission.</summary>
            <param name="path">A relative or absolute path for the file that the current 
            <see langword="FileStream" /> object will encapsulate. </param>
            <param name="mode">A constant that determines how to open or create the file. </param>
            <param name="access">A constant that determines how the file can be accessed by the 
            <see langword="FileStream" /> object. This also determines the values returned by 
            the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> 
            properties of the <see langword="FileStream" /> object. <see cref="P:System.IO.FileStream.CanSeek" /> 
            is <see langword="true" /> if <paramref name="path" /> specifies a disk file. </param>
            <param name="share">A constant that determines how the file will be shared by processes. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path" /> is <see langword="null" />. </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="path" /> is an empty string (""), contains only white space, or contains one or more 
            invalid characters. -or-
            <paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. 
            in an NTFS environment.</exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. 
            in a non-NTFS environment.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file cannot be found, such as when 
            <paramref name="mode" /> is <see langword="FileMode.Truncate" /> or <see langword="FileMode.Open" />, and 
            the file specified by <paramref name="path" /> does not exist. The file must already exist in these modes. 
            </exception>
            <exception cref="T:System.IO.IOException">An I/O error, such as specifying 
            <see langword="FileMode.CreateNew" /> when the file specified by <paramref name="path" /> already exists, 
            occurred. -or-The system is running Windows 98 or Windows 98 Second Edition and <paramref name="share" /> 
            is set to <see langword="FileShare.Delete" />.-or-The stream has been closed.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. 
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on 
            an unmapped drive. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The <paramref name="access" /> requested is not 
            permitted by the operating system for the specified <paramref name="path" />, such as when 
            <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file or 
            directory is set for read-only access. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed 
            the system-defined maximum length. For example, on Windows-based platforms, paths must be less 
            than 248 characters, and file names must be less than 260 characters. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="mode" /> contains an invalid value. </exception>
        </member>
        <member name="M:Terrasoft.Common.IO.IFileStream.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Common.FileStreamWrapper"/>
            class on the specified path.
            </summary>
            <param name="path">File path.</param>
            <param name="fileMode">Specifies how the operating system should open a file.</param>
            <param name="fileAccess">Defines constants for read, write, or read/write access to a file.</param>
            <param name="fileShare">Contains constants for controlling the kind of access other
            <see cref="T:System.IO.FileStream"/> objects can have to the same file.</param>
        </member>
        <member name="M:Terrasoft.Common.IO.IFileStream.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Common.IO.FileStreamWrapper"/> class on the 
            specified path.
            </summary>
            <param name="path">File path.</param>
            <param name="fileMode">Specifies how the operating system should open a file.</param>
            <param name="fileAccess">Defines constants for read, write, or read/write access to a file.</param>
        </member>
        <member name="M:Terrasoft.Common.IO.IFileStream.Open(System.String,System.IO.FileMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Common.IO.FileStreamWrapper"/> class on the 
            specified path.
            </summary>
            <param name="path">File path.</param>
            <param name="fileMode">Specifies how the operating system should open a file.</param>
        </member>
        <member name="M:Terrasoft.Common.IO.ZipFileWrapper.CreateFromDirectory(System.String,System.String)">
            <summary>
            <inheritdoc />
            </summary>
        </member>
        <member name="T:Terrasoft.Common.IResourceManager">
            <summary>
            Provides methods for convenient access to culture-specific resources at run time.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.IResourceManager.BaseName">
            <summary>
            Gets the root name of the resources.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.IResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns the value of the specified non-string resource localized for the specified culture.
            </summary>
            <param name="objectName">The name of the resource to retrieve.</param>
            <param name="culture">An object that represents the culture for which the resource is localized.</param>
            <returns>Value of the specified non-string resource.</returns>
        </member>
        <member name="M:Terrasoft.Common.IResourceManager.GetObject(System.String)">
            <summary>
            Returns the value of the specified non-string resource.
            </summary>
            <param name="objectName">The name of the resource to get.</param>
            <returns>Value of the specified resource.</returns>
        </member>
        <member name="M:Terrasoft.Common.IResourceManager.GetObjectWithCultureFallback(System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns the value of the specified non-string resource localized for the specified culture. If value
            for the specified culture is absent, returns value for the default culture.
            </summary>
            <param name="objectName">The name of the resource to retrieve.</param>
            <param name="culture">An object that represents the culture for which the resource is localized.</param>
            <returns>Value of the specified non-string resource.</returns>
        </member>
        <member name="M:Terrasoft.Common.IResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns the value of the string resource localized for the specified culture.
            </summary>
            <param name="itemName">The name of the resource to retrieve.</param>
            <param name="culture">An object that represents the culture for which the resource is localized.</param>
            <returns>Value of the resource localized for the specified culture.</returns>
        </member>
        <member name="M:Terrasoft.Common.IResourceManager.GetString(System.String)">
            <summary>
            Returns the value of the specified string resource.
            </summary>
            <param name="itemName">The name of the resource to retrieve.</param>
            <returns>Value of the specified string resource.</returns>
        </member>
        <member name="M:Terrasoft.Common.IResourceManager.GetStringWithCultureFallback(System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns the value of the string resource localized for the specified culture. If value for the specified
            culture is absent, returns value for the default culture.
            </summary>
            <param name="itemName">The name of the resource to retrieve.</param>
            <param name="culture">An object that represents the culture for which the resource is localized.</param>
            <returns>Value of the resource localized for the specified culture.</returns>
        </member>
        <member name="M:Terrasoft.Common.IResourceManager.GetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
            <summary>
            Retrieves the resource set for a particular culture.
            </summary>
            <param name="culture">The culture whose resources are to be retrieved.</param>
            <param name="createIfNotExist"><c>true</c> to load the resource set, if it has not been loaded yet;
            otherwise, <c>false</c>.</param>
            <param name="tryParents"><c>true</c> to use resource fallback to load an appropriate resource if the
            resource set cannot be found; <c>false</c> to bypass the resource fallback process.</param>
            <returns>The resource set for the specified culture.</returns>
        </member>
        <member name="M:Terrasoft.Common.IResourceManager.ReleaseAllResources">
            <summary>
            Tells the resource manager to release all resources.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.IResourceStorage">
            <summary>
            Provides functionality for storing and retrieving resource managers.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.IResourceStorage.GetManager(System.String)">
            <summary>
            Returns resource manager from current storage.
            </summary>
            <param name="managerName">Name of resource manager.</param>
            <returns>
            Instance of <see cref="T:Terrasoft.Common.IResourceManager"/> with name <paramref name="managerName"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.IResourceStorage.Invalidate(System.String)">
            <summary>
            Invalidates resource manager specified by <paramref name="managerName"/>
            </summary>
            <param name="managerName">Name of resource manager.</param>
        </member>
        <member name="T:Terrasoft.Common.ISerializableObject">
            <summary>
            Represents object which can serialize it's state using provided <see cref="T:Terrasoft.Common.DataWriter"/> and restore it using
            provided <see cref="T:Terrasoft.Common.DataReader"/>.
            <remarks>Type should have public parameterless constructor.</remarks>
            </summary>
        </member>
        <member name="M:Terrasoft.Common.ISerializableObject.Serialize(Terrasoft.Common.DataWriter)">
            <summary>Serializes own state using specified data writer.</summary>
            <param name="dataWriter">The data writer.</param>
        </member>
        <member name="M:Terrasoft.Common.ISerializableObject.Deserialize(Terrasoft.Common.DataReader)">
            <summary>Deserializes own state using specified data reader.</summary>
            <param name="dataReader">The data reader.</param>
        </member>
        <member name="T:Terrasoft.Common.IServerInfoUtilities">
            <summary>
            Contains methods to obtain server information.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.IServerInfoUtilities.GetServerIPAddress">
            <summary>
            Returns IP address of server. If application is running in web farm,
            returns different IP addresses for each node.
            </summary>
            <returns> IP address of server.
            </returns>
        </member>
        <member name="T:Terrasoft.Common.ITimer">
            <summary>
            Represents a mechanism for executing a method on a thread pool thread at specified intervals. 
            </summary>
        </member>
        <member name="M:Terrasoft.Common.ITimer.IsRunning">
            <summary>
            Returns a value indicating whether the timer is running.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terrasoft.Common.ITimer.Start(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Starts timer.
            </summary>
            <param name="callback">An action representing a method to be executed.</param>
            <param name="state">State object</param>
            <param name="dueTime">The amount of time to delay before the <paramref name="callback" />
            parameter invokes its methods. Specify negative one (-1) milliseconds to prevent the timer from starting.
            Specify zero (0) to start the timer immediately.</param>
            <param name="period">The time interval between invocations of the methods referenced by
            <paramref name="callback" />. Specify negative one (-1) milliseconds to disable periodic signaling.</param>
            <param name="isOverlappingTimerCall">Determines to use overlapping timer call algorithm.</param>
        </member>
        <member name="M:Terrasoft.Common.JsonDataDifferencePackage.RemoveMatchedDifferences(System.Predicate{Terrasoft.Common.JsonDataDifferenceItem})">
            <summary>
            Removes differences that matches specified <paramref name="predicate"/>.
            </summary>
            <param name="predicate">The predicate function to apply to each entry.</param>
        </member>
        <member name="T:Terrasoft.Common.JsonDataReader">
            <summary>
            Предоставляет методы для чтения данных в формате Json.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.JsonDataReader.#ctor(System.IO.TextReader)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.JsonDataReader"/>, используя заданный 
            <see cref="T:System.IO.TextReader"/>.
            </summary>
            <param name="input"><see cref="T:System.IO.TextReader"/>, из которого следует считывать данные в формате 
            Json.</param>
        </member>
        <member name="M:Terrasoft.Common.JsonDataReader.#ctor(System.IO.Stream)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.JsonDataReader"/>, используя заданный поток.
            </summary>
            <param name="input">Поток, содержащий данные в формате Json.</param>
        </member>
        <member name="F:Terrasoft.Common.JsonDataReader._currentName">
            <summary>
            Возвращает имя текущего свойства.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.JsonDataReader._currentValue">
            <summary>
            Возвращает значение текущего свойства. 
            </summary>
        </member>
        <member name="M:Terrasoft.Common.JsonDataReader.Dispose(System.Boolean)">
            <summary>
            Выполняет удаление, высвобождение и сброс управляемых и неуправляемых ресурсов.
            </summary>
            <param name="disposing">
            <c>true</c>, если необходимо высвободить и управляемые, и неуправляемые ресурсы; <c>false</c>, если 
            необходимо высвободить только неуправляемые ресурсы.
            </param>
        </member>
        <member name="M:Terrasoft.Common.JsonDataReader.Close">
            <summary>
            Закрывает текущий экземпляр <see cref="T:Terrasoft.Common.JsonDataReader"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.JsonDataReader.Read">
            <summary>
            Перемещает текущую позицию в наборе данных к следующему свойству текущего уровня вложенности.
            </summary>
            <returns>
            Строка с именем текущего свойства после выполнения метода либо пустая строка, если достигнут конец 
            набора данных.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.JsonDataReader.ReadInto">
            <summary>
            Перемещает текущую позицию в наборе данных на один уровень вложенности вниз.
            </summary>
            <returns>
            Строка с именем текущего свойства после выполнения метода либо
            пустая строка, если на текущем уровне нет вложенных свойств.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.JsonDataReader.ReadOut">
            <summary>
            Перемещает текущую позицию в наборе данных на один уровень вложенности вверх.
            </summary>
            <returns>
            Пустая строка. Чтобы получить имя следующего свойства, необходимо вызывать
            <see cref="M:Terrasoft.Common.DataReader.Read"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.JsonDataReader.ReadNextCollectionItem">
            <summary>
            Перемещается к следующему элементу в коллекции элементов.
            </summary>
            <returns>
            <c>true</c>, если перемещение к следующему элементу коллекции было успешным; иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.JsonDataReader.GetStringValue">
            <summary>
            Возвращает значение текущего свойства типа <see cref="T:System.String"/>.
            </summary>
            <returns>
            Текущее значение свойства типа <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.JsonDataReader.GetGuidValue">
            <summary>
            Возвращает значение текущего свойства типа <see cref="T:System.Guid"/>.
            </summary>
            <returns>
            Текущее значение свойства типа <see cref="T:System.Guid"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.JsonDataReader.GetIntValue">
            <summary>
            Возвращает значение текущего свойства типа <see cref="T:System.Int32"/>.
            </summary>
            <returns>
            Текущее значение свойства типа <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.JsonDataReader.GetDoubleValue">
            <summary>
            Возвращает значение текущего свойства типа <see cref="T:System.Double"/>.
            </summary>
            <returns>
            Текущее значение свойства типа <see cref="T:System.Double"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.JsonDataReader.GetDateTimeValue">
            <summary>
            Возвращает значение текущего свойства типа <see cref="T:System.DateTime"/>.
            </summary>
            <returns>
            Текущее значение свойства типа <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.JsonDataReader.GetBoolValue">
            <summary>
            Возвращает значение текущего свойства типа <see cref="T:System.Boolean"/>.
            </summary>
            <returns>
            Текущее значение свойства типа <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.JsonDataReader.GetLocalizableStringValue">
            <summary>
            Возвращает значение текущего свойства типа <see cref="T:Terrasoft.Common.LocalizableString"/>.
            </summary>
            <returns>
            Текущее значение свойства типа <see cref="T:Terrasoft.Common.LocalizableString"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.JsonDataReader.GetStreamValue">
            <summary>
            Возвращает значение текущего свойства типа <see cref="T:System.IO.Stream"/>.
            </summary>
            <returns>
            Текущее значение свойства типа <see cref="T:System.IO.Stream"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.JsonDataReader.GetStreamValue(System.IO.Stream)">
            <summary>
            Записывает в заданный поток значение текущего свойства.
            </summary>
            <param name="stream">Поток, в который осуществляется запись.</param>
        </member>
        <member name="M:Terrasoft.Common.JsonDataReader.GetEnumValue``1">
            <summary>
            Возвращает элемент перечисления, соответствующий значению текущего свойства.
            </summary>
            <typeparam name="TValue">Любой тип.</typeparam>
            <returns>
            Элемент перечисления, соответствующий значению текущего свойства.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.JsonDataReader.GetValue(Terrasoft.Common.DataConverter)">
            <summary>
            Возвращает объект, представляющий значение текущего свойства, преобразованный с помощью переданного 
            экземпляра <see cref="T:Terrasoft.Common.DataConverter"/>.
            </summary>
            <param name="converter">Экземпляр <see cref="T:Terrasoft.Common.DataConverter"/>, с помощью которого осуществляется 
            преобразование.</param>
            <returns>
            Значение текущего свойства типа <see cref="T:System.Object"/>,
            преобразованное в соответствии с <paramref name="converter"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.JsonDataReader.GetValue(System.Type)">
            <summary>
            Возвращает значение текущего свойства, преобразованное к заданному типу.
            </summary>
            <param name="valueType">Тип.</param>
            <returns>
            Значение текущего свойства, преобразованное к типу <paramref name="valueType"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.JsonDataReader.GetValue``1">
            <summary>
            Возвращает значение данного типа текущего свойства, преобразовывая его
            к данному типу.
            </summary>
            <typeparam name="TValue">Любой тип.</typeparam>
            <returns>
            Значение свойства, преобразованное к данному типу.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.JsonDataReader.GetSerialazebleObjectValue(System.Type)">
            <summary>
            Возвращает значение текущего десериализированного свойства, приведенное к заданному типу.
            </summary>
            <param name="objectType">Тип значения десериализируемого свойства.</param>
            <returns>
            Значение десериализированного свойства типа <paramref name="objectType"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.JsonDataReader.GetDeserializedObjectValue(System.Type)">
            <inheritdoc cref="T:Terrasoft.Common.DataReader"/>
        </member>
        <member name="M:Terrasoft.Common.JsonDataReader.GetSerializableObjectValue``1">
            <summary>
            Возвращает значение текущего десериализированного свойства данного типа.
            </summary>
            <typeparam name="TValue">Тип значения десериализированного свойства.</typeparam>
            <returns>
            Значение текущего десериализированного свойства типа <typeparamref name="TValue"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.JsonDataReader.GetSerializableObjectValue">
            <summary>
            Возвращает значение текущего десериализированного свойства.
            </summary>
            <returns>
            Значение сериализуемого свойства типа <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Terrasoft.Common.JsonDataWriterSettings">
            <summary>
            Предоставляет методы и свойства настроек <see cref="T:Terrasoft.Common.JsonDataWriter"/>. 
            </summary>
        </member>
        <member name="M:Terrasoft.Common.JsonDataWriterSettings.#ctor">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.JsonDataWriterSettings"/> настройками
            по умолчанию.
            </summary>
            <remarks>
            Настройки по умолчанию для нового экземпляра <see cref="T:Terrasoft.Common.JsonDataWriterSettings"/>:
            <list type="table">
            <item><term>Кодировка</term><description><see cref="P:System.Text.Encoding.UTF8"/></description></item>
            <item><term>Форматирование:</term><description><see cref="F:Newtonsoft.Json.Formatting.None"/></description>
            </item>
            <item>><term>Использовать кавычки в имени объекта</term><description>true</description></item>
            <item>><term>Автоматически поставить открывающую фигурную скобку в поток, используемый для записи</term>
            <description>true</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Terrasoft.Common.JsonDataWriterSettings.Encoding">
            <summary>
            Возвращает и устанавливает кодировку экземпляра <see cref="T:Terrasoft.Common.JsonDataWriter"/>.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.JsonDataWriterSettings.Formatting">
            <summary>
            Возвращает и устанавливает форматирование для экземпляра <see cref="T:Terrasoft.Common.JsonDataWriter"/>.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.JsonDataWriterSettings.QuoteName">
            <summary>
            Возвращает и устанавливает признак использования кавычек в имени объектов Json экземпляра 
            <see cref="T:Terrasoft.Common.JsonDataWriter"/>.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.JsonDataWriterSettings.AutoStartObject">
            <summary>
            Возвращает и устанавливает признак автоматического проставления открывающей фигурной скобки в поток, 
            используемый для записи.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.JsonDataWriterSettings.WriteStringNullAsValue">
            <summary>
            If defined as true, string values with value <c>null</c> will be written as <c>"null"</c> string.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.JsonDataWriter">
            <summary>
            Представляет методы для последовательной записи данных в формате Json.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.JsonDataWriter.#ctor(Terrasoft.Common.JsonDataWriterSettings,System.IO.TextWriter)">
            <summary>
            Инициализирует экземпляр класса <see cref="T:Terrasoft.Common.JsonDataWriter"/>, используя заданные настройки экземпляра и
            <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="settings">Настройки для нового экземпляра <see cref="T:Terrasoft.Common.JsonDataWriter"/>.
            </param>
            <param name="output">Экземпляр <see cref="T:System.IO.TextWriter"/>, с помощью которого осуществляется 
            запись.</param>
        </member>
        <member name="M:Terrasoft.Common.JsonDataWriter.#ctor(Terrasoft.Common.JsonDataWriterSettings,System.IO.Stream)">
            <summary>
            Инициализирует экземпляр класса <see cref="T:Terrasoft.Common.JsonDataWriter"/>, используя заданные настройки экземпляра и 
            поток вывода.
            </summary>
            <param name="settings">Настройки для нового экземпляра <see cref="T:Terrasoft.Common.XmlDataWriter"/>.
            </param>
            <param name="output">Поток, в который осуществляется запись.</param>
        </member>
        <member name="P:Terrasoft.Common.JsonDataWriter.Settings">
            <summary>
            Возвращает настройки данного экземпляра <see cref="T:Terrasoft.Common.JsonDataWriter"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.JsonDataWriter.Dispose(System.Boolean)">
            <summary>
            Выполняет удаление, высвобождение и сброс ресурсов. Отменяет вызов Finalize() для данного экземпляра.
            </summary>
            <param name="disposing">
            <c>true</c>, если необходимо высвободить и управляемые, и неуправляемые ресурсы; <c>false</c>, если 
            необходимо высвободить только неуправляемые ресурсы.
            </param>
        </member>
        <member name="M:Terrasoft.Common.JsonDataWriter.Close">
            <summary>
            Закрывает текущий экземпляр <see cref="T:Terrasoft.Common.JsonDataWriter"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.JsonDataWriter.WriteStartObject">
            <summary>
            Осуществляет запись открывающей фигурной скобки в поток вывода.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.JsonDataWriter.WriteStartObject(System.String)">
            <summary>
            Начинает запись объекта с заданным именем в поток вывода.
            </summary>
            <param name="name">Имя объекта.</param>
            <remarks>Метод записывает в поток вывода имя объекта и открывающую фигурную скобку.</remarks>
        </member>
        <member name="M:Terrasoft.Common.JsonDataWriter.WriteFinishObject">
            <summary>
            Завершает запись текущего объекта.
            </summary>
            <remarks>Метод запиcывает в поток вывода закрывающую фигурную скобку.</remarks>
        </member>
        <member name="M:Terrasoft.Common.JsonDataWriter.WriteValue(System.String,System.String,System.String)">
            <summary>
            Осуществляет запись значения типа <see cref="T:System.String"/> для свойства с заданными именем и
            значением по умолчанию.
            </summary>
            <param name="name">Имя свойства.</param>
            <param name="value">Значение свойства типа <see cref="T:System.String"/>.</param>
            <param name="defValue">Значение по умолчанию для свойства.</param>
        </member>
        <member name="M:Terrasoft.Common.JsonDataWriter.WriteValue(System.String,System.Guid,System.Guid)">
            <summary>
            Осуществляет запись значения типа <see cref="T:System.Guid"/> для свойства с заданными именем и 
            значением по умолчанию.
            </summary>
            <param name="name">Имя свойства.</param>
            <param name="value">Значение свойства типа <see cref="T:System.Guid"/>.</param>
            <param name="defValue">Значение по умолчанию.</param>
        </member>
        <member name="M:Terrasoft.Common.JsonDataWriter.WriteValue(System.String,System.Int32,System.Int32)">
            <summary>
            Осуществляет запись значения типа <see cref="T:System.Int32"/> для свойства с заданными именем и значением
            по умолчанию.
            </summary>
            <param name="name">Имя свойства.</param>
            <param name="value">Значение свойства типа <see cref="T:System.Int32"/>.</param>
            <param name="defValue">Значение по умолчанию.</param>
        </member>
        <member name="M:Terrasoft.Common.JsonDataWriter.WriteValue(System.String,System.Decimal,System.Decimal)">
            <summary>
            Осуществляет запись значения типа <see cref="T:System.Decimal"/> для свойства с заданными именем и 
            значением по умолчанию.
            </summary>
            <param name="name">Имя свойства.</param>
            <param name="value">Значение свойства типа <see cref="T:System.Decimal"/>.</param>
            <param name="defValue">Значение по умолчанию.</param>
        </member>
        <member name="M:Terrasoft.Common.JsonDataWriter.WriteValue(System.String,System.Double,System.Double)">
            <summary>
            Осуществляет запись значения типа <see cref="T:System.Double"/> для свойства с заданными именем и 
            значением по умолчанию.
            </summary>
            <param name="name">Имя свойства.</param>
            <param name="value">Значение свойства типа <see cref="T:System.Double"/>.</param>
            <param name="defValue">Значение по умолчанию.</param>
        </member>
        <member name="M:Terrasoft.Common.JsonDataWriter.WriteValue(System.String,System.Enum,System.Enum)">
            <summary>
            Осуществляет запись значения типа <see cref="T:System.Enum"/> для свойства с заданными именем и 
            значением по умолчанию.
            </summary>
            <param name="name">Имя свойства.</param>
            <param name="value">Значение свойства типа <see cref="T:System.Enum"/>.</param>
            <param name="defValue">Значение по умолчанию.</param>
        </member>
        <member name="M:Terrasoft.Common.JsonDataWriter.WriteValue(System.String,System.DateTime,System.DateTime)">
            <summary>
            Осуществляет запись значения типа <see cref="T:System.DateTime"/> для свойства с заданными именем и 
            значением по умолчанию.
            </summary>
            <param name="name">Имя свойства.</param>
            <param name="value">Значение свойства типа <see cref="T:System.DateTime"/>.</param>
            <param name="defValue">Значение по умолчанию.</param>
        </member>
        <member name="M:Terrasoft.Common.JsonDataWriter.WriteValue(System.String,System.Boolean,System.Boolean)">
            <summary>
            Осуществляет запись значения типа <see cref="T:System.Boolean"/> для свойства с заданными именем и 
            значением по умолчанию.
            </summary>
            <param name="name">Имя свойства.</param>
            <param name="value">Значение свойства типа <see cref="T:System.Boolean"/>.</param>
            <param name="defValue">Значение по умолчанию.</param>
        </member>
        <member name="M:Terrasoft.Common.JsonDataWriter.WriteValue(System.String,Terrasoft.Common.LocalizableString,Terrasoft.Common.LocalizableString)">
            <summary>
            Осуществляет запись значения типа <see cref="T:Terrasoft.Common.LocalizableString"/> для свойства с 
            заданными именем и значением по умолчанию.
            </summary>
            <param name="name">Имя свойства.</param>
            <param name="value">Значение свойства типа <see cref="T:Terrasoft.Common.LocalizableString"/>.</param>
            <param name="defValue">Значение по умолчанию.</param>
        </member>
        <member name="M:Terrasoft.Common.JsonDataWriter.WriteValue(System.String,System.IO.Stream)">
            <summary>
            Осуществляет запись значения из заданного потока для свойства с заданным именем.
            </summary>
            <param name="name">Имя свойства.</param>
            <param name="value">Поток, из которого осуществляется запись.</param>
        </member>
        <member name="M:Terrasoft.Common.JsonDataWriter.WriteValue(System.String,Terrasoft.Common.DataConverter,System.Object,System.Object)">
            <summary>
            Осуществляет запись значения свойства с заданными именем и значением <paramref name = "value"/>, 
            преобразованным заданным <paramref name = "converter"/>.
            </summary>
            <param name="name">Имя свойства.</param>
            <param name="converter">Преобразователь типов данных.</param>
            <param name="value">Значение.</param>
            <param name="defValue">Значение по умолчанию.</param>
        </member>
        <member name="M:Terrasoft.Common.JsonDataWriter.WriteValue(System.String,System.Type,System.Object,System.Object)">
            <summary>
            Осуществляет запись значения заданного типа для свойства с заданными именем и значением по умолчанию.
            </summary>
            <param name="name">Имя свойства.</param>
            <param name="valueType">Тип значения.</param>
            <param name="value">Значение.</param>
            <param name="defValue">Значение по умолчанию.</param>
            <exception cref="T:Terrasoft.Common.UnsupportedTypeException">При передаче в качестве параметра <paramref name="valueType"/> 
            не поддерживаемого типа.</exception>
            <exception cref="T:System.ArgumentNullException">При передаче в качестве параметров <paramref name="name"/> и 
            <paramref name="value"/> пустого значения либо <c>null</c>.</exception>
            <exception cref="T:Terrasoft.Common.InvalidTypeCastException">При попытке преобразовать значение
            свойства <paramref name="name"/> в недопустимый тип данных <paramref name="valueType"/>.</exception>
        </member>
        <member name="M:Terrasoft.Common.JsonDataWriter.WriteStartCollection(System.String)">
            <summary>
            Начинает запись коллекции с заданным именем.
            </summary>
            <param name="name">Имя коллекции.</param>
        </member>
        <member name="M:Terrasoft.Common.JsonDataWriter.WriteFinishCollection">
            <summary>
            Завершает запись текущей коллекции.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.JsonDataWriter.WriteValue(System.Object[])">
            <summary>
            Осуществляет запись заданного массива значений.
            </summary>
            <param name="values">Массив значений.</param>
        </member>
        <member name="M:Terrasoft.Common.JsonDataWriter.WriteSerializableObjectValue(System.String,System.Object,System.Object)">
            <summary>
            Осуществляет запись заданного сериализуемого значения свойства с заданным именем и заданным значением 
            по умолчанию.
            </summary>
            <param name="name">Имя свойства.</param>
            <param name="value">Сериализуемое значение свойства.</param>
            <param name="defValue">Значение по умолчанию.</param>
        </member>
        <member name="T:Terrasoft.Common.Json.Json">
            <summary>
            Serializes and deserializes objects into and from JSON documents.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.Json.Json.Deserialize(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to an object without date and time parsing.
            </summary>
            <param name="value">The JSON string.</param>
            <param name="settings">Specifies the settings on a JSON serializer object.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Terrasoft.Common.Json.Json.Serialize(System.Object,Newtonsoft.Json.JsonConverter,System.Boolean,System.Boolean,Newtonsoft.Json.TypeNameHandling)">
            <summary>
            Serializes the specified object and writes the JSON structure.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="converter">Instance that converts an object to and from JSON.</param>
            <param name="formatting">A value indicating whether JSON text output will be formatted.</param>
            <param name="quoteName">A value indicating whether object names will be surrounded with quotes.</param>
            <param name="typeNameHandling">A value of <see cref="T:Newtonsoft.Json.TypeNameHandling"/>.</param>
            <returns>The serialized object.</returns>
        </member>
        <member name="M:Terrasoft.Common.Json.Json.Serialize(System.Object,Newtonsoft.Json.JsonConverter,System.Boolean,System.Boolean)">
            <summary>
            Serializes the specified object and writes the JSON structure.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="converter">Instance that converts an object to and from JSON.</param>
            <param name="formatting">A value indicating whether JSON text output will be formatted.</param>
            <param name="quoteName">A value indicating whether object names will be surrounded with quotes.</param>
            <returns>The serialized object.</returns>
        </member>
        <member name="M:Terrasoft.Common.Json.Json.SerializeObject(System.Object)">
            <summary>
            Serializes the specified object to a JSON
            string using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <param name="value">The object to serialize.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:Terrasoft.Common.Json.Json.SerializeObject(System.Object,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON
            string using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />
            used to serialize the object.
            If this is <c>null</c>, default serialization settings will be used.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:Terrasoft.Common.Json.Json.DeserializeObject(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to a .NET object using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Terrasoft.Common.Json.Json.DeserializeObject(System.String,System.Type)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The <see cref="T:System.Type" /> of object being deserialized.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Terrasoft.Common.Json.Json.DeserializeObject``1(System.String)">
            <summary>
            Deserializes the JSON to the specified .NET type using
            <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The object to deserialize.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Terrasoft.Common.Json.Json.DeserializeObject``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the specified .NET type using
            <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The object to deserialize.</param>
            <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Terrasoft.Common.Json.Json.ToJson``1(``0)">
            <summary>
            Serializes <paramref name="source"/> to JSON format.
            </summary>
            <typeparam name="T">Value type.</typeparam>
            <param name="source">Value.</param>
            <returns>Serialized value.</returns>
        </member>
        <member name="M:Terrasoft.Common.Json.Json.Serialize(System.Object,Newtonsoft.Json.JsonConverter)">
            <summary>
            Serializes the specified object and writes the JSON structure.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="converter">Instance that converts an object to and from JSON.</param>
            <returns>The serialized object.</returns>
        </member>
        <member name="M:Terrasoft.Common.Json.Json.Serialize(System.Object,System.Boolean,Newtonsoft.Json.TypeNameHandling)">
            <summary>
            Serializes the specified object and writes the JSON structure with quoteName flag
            and specified type name handling.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="quoteName">A value indicating whether object names will be surrounded with quotes.</param>
            <param name="typeNameHandling">A value of <see cref="T:Newtonsoft.Json.TypeNameHandling"/>.</param>
            <returns>The serialized object.</returns>
        </member>
        <member name="M:Terrasoft.Common.Json.Json.Serialize(System.Object,System.Boolean)">
            <summary>
            Serializes the specified object and writes the JSON structure with quoteName flag.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="quoteName">A value indicating whether object names will be surrounded with quotes.</param>
            <returns>The serialized object.</returns>
        </member>
        <member name="M:Terrasoft.Common.Json.Json.Serialize(System.Object)">
            <summary>
            Serializes the specified object and writes the JSON structure.
            </summary>
            <param name="obj">The object to serialize.</param>
            <returns>The serialized object.</returns>
        </member>
        <member name="M:Terrasoft.Common.Json.Json.Serialize(System.Guid)">
            <summary>
            Serializes the specified unique identifier and writes the JSON structure.
            </summary>
            <param name="obj">The unique identifier.</param>
            <returns>The serialized object.</returns>
        </member>
        <member name="M:Terrasoft.Common.Json.Json.Serialize(System.String)">
            <summary>
            Serializes the specified string value and writes the JSON structure.
            </summary>
            <param name="obj">The string value.</param>
            <returns>The serialized object.</returns>
        </member>
        <member name="M:Terrasoft.Common.Json.Json.Serialize(System.Int32)">
            <summary>
            Serializes the specified integer value and writes the JSON structure.
            </summary>
            <param name="obj">The integer value.</param>
            <returns>The serialized object.</returns>
        </member>
        <member name="M:Terrasoft.Common.Json.Json.Serialize(System.Boolean)">
            <summary>
            Serializes the specified logical value and writes the JSON structure.
            </summary>
            <param name="obj">The logical value.</param>
            <returns>The serialized object.</returns>
        </member>
        <member name="M:Terrasoft.Common.Json.Json.Deserialize(System.String)">
            <summary>
            Deserializes the JSON to an object.
            </summary>
            <param name="value">The JSON string.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Terrasoft.Common.Json.Json.Deserialize(System.String,System.Type)">
            <summary>
            Deserializes the JSON to an object.
            </summary>
            <param name="value">The JSON string.</param>
            <param name="type">Type of the deserialized object.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Terrasoft.Common.Json.Json.Deserialize(System.String,System.Type,System.Collections.Generic.IList{Newtonsoft.Json.JsonConverter})">
            <summary>
            Deserializes the JSON to an object.
            </summary>
            <param name="value">The JSON string.</param>
            <param name="type">Type of the deserialized object.</param>
            <param name="converters">Json converters that will be used during serialization.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Terrasoft.Common.Json.Json.Deserialize``1(System.String)">
            <summary>
            Deserializes the JSON to the specified type.
            </summary>
            <param name="value">The JSON string.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Terrasoft.Common.Json.Json.DeserializeXmlNode(System.String)">
            <summary>
            Deserializes the XmlNode from a JSON string.
            </summary>
            <param name="value">The JSON string.</param>
            <returns>Instance of the <see cref="T:System.Xml.XmlNode"/> type.</returns>
        </member>
        <member name="M:Terrasoft.Common.Json.Json.DeserializeJsonDate(System.String)">
            <summary>
            Deserializes json date.
            </summary>
            <param name="jsonDateTime">Json date time string.</param>
            <returns>Deserialized DateTime value.</returns>
        </member>
        <member name="M:Terrasoft.Common.Json.Json.FormatJsonString(System.String,Newtonsoft.Json.Formatting)">
            <summary>
            Returns formatted JSON string.
            </summary>
            <param name="source">The JSON string.</param>
            <param name="formatting">Formatting information.</param>
            <returns>Formatted JSON string.</returns>
        </member>
        <member name="M:Terrasoft.Common.Json.Json.Deserialize``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the specified .NET type using
            <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The object to deserialize.</param>
            <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="T:Terrasoft.Common.KeyValueCollection">
            <summary>
            This key value collection is used to serialize a dictionary into JSON format and back.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.KeyValueCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Common.KeyValueCollection"/> class.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.KeyValueCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Common.KeyValueCollection"/> class.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.KeyValueCollection.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Common.KeyValueCollection"/> class.
            </summary>
            
        </member>
        <member name="P:Terrasoft.Common.KeyValueCollection.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.String"/> with the specified key.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.KeyValueCollection.Count">
            <summary>
            Gets the number of key/value pairs contained in the <see cref="T:Terrasoft.Common.KeyValueCollection" />
            .</summary>
            <returns>
            The number of key/value pairs contained in the <see cref="T:Terrasoft.Common.KeyValueCollection" />.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.KeyValueCollection.Add(System.String,System.Object)">
            <summary>
            Adds the item with the specified key.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.KeyValueCollection.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.LazyProperty`2.GetValue(`0,System.Func{`0})">
            <summary>
            Returns the value of instance property.
            </summary>
            <param name="instance">The instance.</param>
            <param name="initFunc">The delegate that returns instance. Used when <paramref name="instance"/> is null.
            </param>
            <returns></returns>
        </member>
        <member name="M:Terrasoft.Common.LazyProperty`2.SetValue(`0,`1)">
            <summary>
            Sets the value of specified instance property of stores it for delayed initialization.
            </summary>
            <param name="instance">The instance.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Terrasoft.Common.LazyProperty`2.InitValue(`0)">
            <inheritdoc />
        </member>
        <member name="T:Terrasoft.Common.IGraphNode">
            <summary>
            Represents a graph node.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.IGraphNode.LinkedNodes">
            <summary>
            Graph nodes linked to this node.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.ListGraphNodeUtilities">
            <summary>
            Provides methods for graph manipulation.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.ListGraphNodeUtilities.GraphNodeWrapper`1">
            <summary>
            Wraps graph node to provide changed linked nodes.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Terrasoft.Common.ListGraphNodeUtilities.GraphNodeWrapper`1.OriginalNode">
            <summary>
            Wrapped node.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.ListGraphNodeUtilities.GraphNodeWrapper`1.LinkedNodes">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.ListGraphNodeUtilities.OrderByTopology``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns collection of graph nodes ordered by topology.
            </summary>
            <typeparam name="T">Type of graph nodes.</typeparam>
            <param name="source">Unordered collection of graph nodes.</param>
            <returns>Graph nodes ordered by topology.</returns>
        </member>
        <member name="M:Terrasoft.Common.ListGraphNodeUtilities.OrderByTopologyAndSkipNotFoundNodes``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns collection of graph nodes ordered by topology. In ordering process ignores nodes which
            are linked to any node but not found in the source collection.
            </summary>
            <typeparam name="T">Type of graph nodes.</typeparam>
            <param name="source">Unordered collection of graph nodes.</param>
            <returns>Graph nodes ordered by topology.</returns>
        </member>
        <member name="M:Terrasoft.Common.TerrasoftImage.op_Implicit(System.Drawing.Image)~Terrasoft.Common.TerrasoftImage">
            <summary>
            Выполняет явное преобразование типа <see cref="T:System.Drawing.Image"/> к типу
            <see cref="T:Terrasoft.Common.TerrasoftImage"/>.
            </summary>
            <param name="value">Экземпляр <see cref="T:System.Drawing.Image"/> для преобразования.</param>
            <returns>
            Экземпляр <see cref="T:Terrasoft.Common.TerrasoftImage"/>, эквивалентный изображению
            <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.TerrasoftImage.FromSvgStream(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Common.TerrasoftImage"/> class using <paramref name="stream"/>.
            </summary>
            <param name="stream">Image stream.</param>
            <returns>An instance of the <see cref="T:Terrasoft.Common.TerrasoftImage"/> class.</returns>
        </member>
        <member name="T:Terrasoft.Common.LocalizableImage">
            <summary>
            Предоставляет методы работы с локализуемым изображением.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.LocalizableImage.#ctor">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.LocalizableImage"/>
            </summary>
        </member>
        <member name="M:Terrasoft.Common.LocalizableImage.#ctor(Terrasoft.Common.TerrasoftImage)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.LocalizableImage"/>, используя заданное
            изображение.
            </summary>
            <param name="value">
            Изображение для инициализации экземпляра <see cref="T:Terrasoft.Common.LocalizableImage"/>.
            </param>
        </member>
        <member name="M:Terrasoft.Common.LocalizableImage.#ctor(System.String,System.String)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.LocalizableImage"/>, используя заданный
            менеджер ресурсов и заданный элемент ресурсов.
            </summary>
            <param name="resourceManagerName">Имя менеджера ресурсов.</param>
            <param name="resourceItemName">Имя элемента ресурсов.</param>
        </member>
        <member name="M:Terrasoft.Common.LocalizableImage.#ctor(Terrasoft.Common.IResourceStorage,System.String,System.String)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.LocalizableImage"/>, используя заданные
            хранилище ресурсов, менеджер ресурсов и элемент ресурсов.
            </summary>
            <param name="storage">Хранилище ресурсов - класс, реализующий интерфейс
            <see cref="T:Terrasoft.Common.IResourceStorage"/>.</param>
            <param name="resourceManagerName">Имя менеджера ресурсов.</param>
            <param name="resourceItemName">Имя элемента ресурсов.</param>
        </member>
        <member name="M:Terrasoft.Common.LocalizableImage.#ctor(Terrasoft.Common.LocalizableImage)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.LocalizableImage"/>, используя заданное
            локализуемое изображение.
            </summary>
            <param name="source">Локализуемое изображение.</param>
            <remarks>Конструктор создает новый объект, который является копией <paramref name="source"/>.</remarks>
        </member>
        <member name="P:Terrasoft.Common.LocalizableImage.Empty">
            <summary>
            Возвращает пустое локализуемое изображение.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.LocalizableImage.op_Implicit(Terrasoft.Common.TerrasoftImage)~Terrasoft.Common.LocalizableImage">
            <summary>
            Выполняет неявное преобразование типа <see cref="T:System.Drawing.Image"/> к типу
            <see cref="T:Terrasoft.Common.LocalizableImage"/>.
            </summary>
            <param name="value">Экземпляр <see cref="T:System.Drawing.Image"/> для преобразования.</param>
            <returns>
            Экземпляр <see cref="T:Terrasoft.Common.LocalizableImage"/>, эквивалентный изображению
            <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.LocalizableImage.op_Implicit(Terrasoft.Common.LocalizableImage)~Terrasoft.Common.TerrasoftImage">
            <summary>
            Выполняет неявное преобразование типа <see cref="T:Terrasoft.Common.LocalizableImage"/> к типу
            <see cref="T:System.Drawing.Image"/>.
            </summary>
            <param name="localizableImage">
            Экземпляр <see cref="T:Terrasoft.Common.LocalizableImage"/> для преобразования.
            </param>
            <returns>
            Экземпляр <see cref="T:System.Drawing.Image"/>, эквивалентный локализуемому изображению
            <paramref name="localizableImage"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.LocalizableImage.op_Implicit(System.String)~Terrasoft.Common.LocalizableImage">
            <summary>
            Выполняет неявное преобразование типа <see cref="T:System.String"/> к типу
            <see cref="T:Terrasoft.Common.LocalizableImage"/>.
            </summary>
            <param name="value">Экземпляр <see cref="T:System.String"/> для преобразования.</param>
        </member>
        <member name="M:Terrasoft.Common.LocalizableImage.op_Implicit(Terrasoft.Common.LocalizableImage)~System.String">
            <summary>
            Выполняет неявное преобразование типа <see cref="T:Terrasoft.Common.LocalizableImage"/> к типу
            <see cref="T:System.String"/>.
            </summary>
            <param name="localizableImage">
            Экземпляр <see cref="T:Terrasoft.Common.LocalizableImage"/> для преобразования.
            </param>
        </member>
        <member name="M:Terrasoft.Common.LocalizableImage.Merge(Terrasoft.Common.LocalizableImage,Terrasoft.Common.LocalizableImage)">
            <summary>
            Выполняет объединение заданных локализуемых значений.
            </summary>
            <param name="target">Локализуемое изображение, с которым осуществляется объединение.</param>
            <param name="source">Локализуемое изображение, объединяемое с <paramref name="target"/>.</param>
            <returns>
            Экземпляр <see cref="T:Terrasoft.Common.LocalizableImage"/>, представляющий результат объединения
            локализуемых изображений <paramref name="target"/> и <paramref name="source"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.LocalizableImage.ToString">
            <summary>
            Выполняет неявное преобразование текущего экземпляра <see cref="T:Terrasoft.Common.LocalizableImage"/> к
            строковому типу.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.LocalizableImage.Equals(System.Object)">
            <summary>
            Определяет, равны ли данный экземпляр <see cref="T:Terrasoft.Common.LocalizableImage"/> и заданный
            экземпляр <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">Экземпляр <see cref="T:System.Object"/> для сравнения с данным экземпляром
            <see cref="T:Terrasoft.Common.LocalizableImage"/>.</param>
            <returns>
            <c>true</c>, если <paramref name="obj"/> имеет тип <see cref="T:Terrasoft.Common.LocalizableImage"/> и его
            значение совпадает со значением данного экземпляра <see cref="T:Terrasoft.Common.LocalizableImage"/>;
            иначе - <c>false</c>.
            </returns>
            <remarks>Перегруженный метод.</remarks>
        </member>
        <member name="M:Terrasoft.Common.LocalizableImage.GetHashCode">
            <summary>
            Возвращает хэш-код для данного локализуемого изображения.
            </summary>
            <returns>
            Хэш-код для данного экземпляра <see cref="T:Terrasoft.Common.LocalizableImage"/> в виде 32-битового целого
            числа со знаком.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.LocalizableImage.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Common.LocalizableImage"/>.
            </summary>
            <returns>
            Новый экземпляр <see cref="T:Terrasoft.Common.LocalizableImage"/>, представляющий копию текущего экземпляра.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.LocalizableImage.GetCultureValue(System.Globalization.CultureInfo)">
            <summary>
            Возвращает значение типа <see cref="T:System.Drawing.Image"/>, соответствующее текущему экземпляру
            <see cref="T:Terrasoft.Common.LocalizableImage"/> в заданной культуре либо генерирует исключение,
            если такого изображения нет.
            </summary>
            <param name="culture">Культура.</param>
            <returns>
            Изображение, локализованное в соответствии с культурой, заданной <paramref name="culture"/>.
            </returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Если для текущего экземпляра
            <see cref="T:Terrasoft.Common.LocalizableImage"/> нет изображения для культуры <paramref name="culture"/>.
            </exception>
        </member>
        <member name="T:Terrasoft.Common.LocalizableString">
            <summary>
            Предоставляет методы работы с локализуемой строкой.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.LocalizableString.EmptyLocalizableString">
            <summary>
            Представляет пустую локализуемую строку.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.LocalizableString.EmptyLocalizableString.Value">
            <summary>
            Возвращает значение пустой локализуемой строки. 
            </summary>
            <exception cref="T:Terrasoft.Common.ObjectIsReadOnlyException">Возникает при попытке установить значение свойства.
            </exception>
        </member>
        <member name="M:Terrasoft.Common.LocalizableString.EmptyLocalizableString.SetCultureValue(System.Globalization.CultureInfo,System.String)">
            <summary>
            Устанавливает пустое локализуемое значение данного типа для заданной культуры.
            </summary>
            <param name="culture">Культура.</param>
            <param name="value">Локализуемое значение.</param>
            <exception cref="T:Terrasoft.Common.ObjectIsReadOnlyException">
            Генерируется при вызове данного метода. Для пустой строки нельзя установить локализуемое значение.
            </exception>
            <remarks>
            Перегрузка базового метода 
            <see cref="M:Terrasoft.Common.LocalizableValue`1.SetCultureValue(System.Globalization.CultureInfo,`0)"/>.
            </remarks>
        </member>
        <member name="M:Terrasoft.Common.LocalizableString.EmptyLocalizableString.HasCultureValue(System.Globalization.CultureInfo)">
            <summary>
            Определяет, существует ли локализуемое значение для заданной культуры.
            </summary>
            <param name="culture">Культура.</param>
            <returns>
            Метод возвращает <c>false</c>, так как пустая локализуемая строка не может иметь значения для разных 
            культур.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.LocalizableString.#ctor">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.LocalizableString"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.LocalizableString.#ctor(System.String)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.LocalizableString"/>, используя заданное 
            строковое значение.
            </summary>
            <param name="value">Значение.</param>
        </member>
        <member name="M:Terrasoft.Common.LocalizableString.#ctor(System.String,System.String)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.LocalizableString"/>, используя заданные имя менеджера 
            ресурсов и имя элемента ресурса.
            </summary>
            <param name="resourceManagerName">Имя менеджера ресурсов.</param>
            <param name="resourceItemName">Имя элемента ресурсов.</param>
        </member>
        <member name="M:Terrasoft.Common.LocalizableString.#ctor(Terrasoft.Common.IResourceStorage,System.String,System.String)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.LocalizableString"/>, используя заданные хранилище 
            ресурсов, имя менеджера ресурсов и имя элемента ресурса.
            </summary>
            <param name="storage">Хранилище ресурсов.</param>
            <param name="resourceManagerName">Имя менеджера ресурсов.</param>
            <param name="resourceItemName">Имя элемента ресурса.</param>
        </member>
        <member name="M:Terrasoft.Common.LocalizableString.#ctor(Terrasoft.Common.LocalizableString)">
            <summary>
            Инициализирует копию <see cref="T:Terrasoft.Common.LocalizableString"/>, переданной в качестве параметра 
            <paramref name="source"/>.
            </summary>
            <param name="source">Локализуемая строка.</param>
            <remarks>Конструктор создает новый объект, который является копией <paramref name="source"/>.</remarks>
        </member>
        <member name="P:Terrasoft.Common.LocalizableString.Empty">
            <summary>
            Возвращает пустую локализуемую строку.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.LocalizableString.op_Implicit(System.String)~Terrasoft.Common.LocalizableString">
            <summary>
            Выполняет неявное преобразование типа <see cref="T:System.String"/> к типу 
            <see cref="T:Terrasoft.Common.LocalizableString"/>.
            </summary>
            <param name="value">Экземпляр типа <see cref="T:System.String"/> для преобразования.</param>
            <returns>
            Экземпляр <see cref="T:Terrasoft.Common.LocalizableString"/>, эквивалентный строке <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.LocalizableString.op_Implicit(Terrasoft.Common.LocalizableString)~System.String">
            <summary>
            Выполняет неявное преобразование типа <see cref="T:Terrasoft.Common.LocalizableString"/> к типу 
            <see cref="T:System.String"/>.
            </summary>
            <param name="localizableString">Экземпляр типа <see cref="T:Terrasoft.Common.LocalizableString"/>
            для преобразования.</param>
            <returns>
            Экземпляр <see cref="T:System.String"/>, эквивалентный локализуемой строке 
            <paramref name="localizableString"/>, либо <c>null</c>, если <paramref name="localizableString"/> равна
            <c>null</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.LocalizableString.op_Equality(Terrasoft.Common.LocalizableString,Terrasoft.Common.LocalizableString)">
            <summary>
            Реализует оператор равенства (==) двух локализуемых строк.
            </summary>
            <param name="op1">Операнд 1.</param>
            <param name="op2">Операнд 2.</param>
            <returns>
            <c>true</c>, если оба операнда являются эквивалентыми; иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.LocalizableString.op_Inequality(Terrasoft.Common.LocalizableString,Terrasoft.Common.LocalizableString)">
            <summary>
            Реализует оператор неравенства (!=) для двух локализуемых строк.
            </summary>
            <param name="op1">Операнд 1.</param>
            <param name="op2">Операнд 2.</param>
            <returns>
            <c>true</c>, если операнды не являются эквивалентыми; иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.LocalizableString.IsNullOrEmpty(Terrasoft.Common.LocalizableString)">
            <summary>
            Определяет, является ли заданная локализуемая строка пустой или <c>null</c>.
            </summary>
            <param name="localizableString">Локализуемая строка.</param>
            <returns>
            <c>true</c>, если локализуемая строка <paramref name="localizableString"/> является пустой или
            <c>null</c>; иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.LocalizableString.Merge(Terrasoft.Common.LocalizableString,Terrasoft.Common.LocalizableString)">
            <summary>
            Выполняет объединение заданных локализуемых строк.
            </summary>
            <param name="target">Локализуемая строка, с которой осуществляется объединение.</param>
            <param name="source">Локализуемая строка, объединяемая с <paramref name="target"/>.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Common.LocalizableString"/>, представляющий результат объединения локализуемых строк
            <paramref name="target"/> и <paramref name="source"/>.</returns>
        </member>
        <member name="M:Terrasoft.Common.LocalizableString.Equals(System.Object)">
            <summary>
            Определяет, равны ли данный экземпляр <see cref="T:Terrasoft.Common.LocalizableString"/> и заданный
            экземпляр <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">Экземпляр <see cref="T:System.Object"/> для сравнения с данным экземпляром.</param>
            <returns>
            <c>true</c>, если <paramref name="obj"/> имеет тип <see cref="T:Terrasoft.Common.LocalizableString"/> и его
            значение совпадает со значением данного экземпляра; иначе - <c>false</c>.
            </returns>
            <remarks>Перегруженный метод.</remarks>
        </member>
        <member name="M:Terrasoft.Common.LocalizableString.GetHashCode">
            <summary>
            Возвращает хэш-код для данной локализуемой строки.
            </summary>
            <returns>
            Хэш-код для данного экземпляра <see cref="T:Terrasoft.Common.LocalizableString"/> в виде 32-битового целого 
            числа со знаком. 
            </returns>
        </member>
        <member name="M:Terrasoft.Common.LocalizableString.ToString">
            <summary>
            Преобразует локализуемое строковое значение данного экземпляра в эквивалентный ему
            экземпляр <see cref="T:System.String"/>.
            </summary>
            <returns>
            Экземпляр класса <see cref="T:System.String"/> эквивалентный данной локализуемой строке.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.LocalizableString.Clone">
            <summary>
            Создает копию текущего экземпляра <see cref="T:Terrasoft.Common.LocalizableString"/>.
            </summary>
            <returns>
            Новый экземпляр <see cref="T:Terrasoft.Common.LocalizableString"/>, представляющий копию текущего экземпляра.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.LocalizableString.EqualsByValue(Terrasoft.Common.LocalizableString)">
            <summary>
            Определяет, равны ли по значению текущий и заданный экземпляры 
            <see cref="T:Terrasoft.Common.LocalizableString"/>.
            </summary>
            <param name="caption">Экземпляр <see cref="T:Terrasoft.Common.LocalizableString"/> для сравнения с данным 
            экземпляром <see cref="T:Terrasoft.Common.LocalizableString"/>.</param>
            <returns>
            <c>true</c>, если значение данного экземпляра <see cref="T:Terrasoft.Common.LocalizableString"/> совпадает с
            <paramref name="caption"/>; иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.LocalizableString.GetCultureValue(System.Globalization.CultureInfo)">
            <summary>
            Возвращает строковое значение текущего экземпляра <see cref="T:Terrasoft.Common.LocalizableString"/> в 
            соответствии с заданной культурой. Если для заданной культуры локализуемое значение не определено, 
            генерируется исключение <see cref="T:Terrasoft.Common.ItemNotFoundException"/>.
            </summary>
            <param name="culture">Языковые и региональные параметры.</param>
            <returns>Строка, локализованная в соответствии с культурой, заданной <paramref name="culture"/>.
            </returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">
            Если для заданной культуры не определено локализуемое значение. 
            </exception>
        </member>
        <member name="T:Terrasoft.Common.LocalizableStringConverter">
            <summary>
            Предоставляет методы преобразования типа <see cref="T:Terrasoft.Common.LocalizableString"/> в другие типы и 
            наоборот.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.LocalizableStringConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Определяет, можно ли преобразовать объект заданного типа в тип 
            <see cref="T:Terrasoft.Common.LocalizableString"/>, используя заданный контекст.
            </summary>
            <param name="context">Экземпляр класса, реализующего интерфейс 
            <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>, представляющий контекст формата.</param>
            <param name="sourceType">Экземпляр <see cref="T:System.Type"/>, представляющий тип, из которого требуется 
            выполнить преобразование.</param>
            <returns>
            <c>true</c>, если преобразование можно выполнить; иначе <c>false</c>.
            </returns>
            <remarks>Перегрузка базового метода <see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)"/>
            </remarks>
        </member>
        <member name="M:Terrasoft.Common.LocalizableStringConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Определяет, можно ли преобразовать экземпляр <see cref="T:Terrasoft.Common.LocalizableString"/> в экземпляр
            заданного типа, используя заданный контекст.
            </summary>
            <param name="context">Экземпляр класса, реализующего интерфейс 
            <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> представляющий контекст формата.</param>
            <param name="destinationType">Экземпляр <see cref="T:System.Type"/>, представляющий тип, к которому 
            требуется выполнить приведение.</param>
            <returns>
            <c>true</c>, если преобразование можно выполнить; иначе - <c>false</c>.
            </returns>
            <remarks>Перегрузка базового метода <see cref="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)"/>.
            </remarks>
        </member>
        <member name="M:Terrasoft.Common.LocalizableStringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Преобразует заданный объект в тип <see cref="T:Terrasoft.Common.LocalizableString"/>, используя заданные 
            контекст и информацию о культуре.
            </summary>
            <param name="context">Экземпляр класса, реализующего интерфейс 
            <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>, представляющий контекст формата.</param>
            <param name="culture">Языковой стандарт.</param>
            <param name="value">Преобразуемый объект.</param>
            <returns><c>true</c>, если преобразование можно выполнить; иначе <c>false</c>.
            </returns>
            <remarks>
            Перегрузка базового метода 
            <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Если в качестве параметра <paramref name="value"/> передано значение <c>null</c>.
            </exception>
        </member>
        <member name="M:Terrasoft.Common.LocalizableStringConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Преобразует заданный объект в указанный тип, используя заданные контекст и информацию о культуре.
            </summary>
            <param name="context">Экземпляр класса, реализующего интерфейс 
            <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>, представляющий контекст формата. </param>
            <param name="culture">Культура.</param>
            <param name="value">Преобразуемый объект.</param>
            <param name="destinationType">Тип <see cref="T:System.Type"/>, к которому преобразуется
            <paramref name="value"/>.</param>
            <returns>
            Экземпляр <see cref="T:System.Object"/>, представляющий преобразованное значение.
            </returns>
            <remarks>
            Перегрузка базового метода 
            <see cref="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Если в качестве параметра <paramref name="destinationType"/> передано значение <c>null</c>.
            </exception>
        </member>
        <member name="T:Terrasoft.Common.LocalizableValue">
            <summary>
            Базовый класс для локализуемого значения.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.LocalizableValue.#ctor">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.LocalizableValue"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.LocalizableValue.#ctor(System.String,System.String)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.LocalizableValue"/>, используя заданный
            менеджер ресурсов и заданный элемент ресурса.
            </summary>
            <param name="resourceManagerName">Имя менеджера ресурсов.</param>
            <param name="resourceItemName">Имя элемента ресурсов.</param>
        </member>
        <member name="M:Terrasoft.Common.LocalizableValue.#ctor(Terrasoft.Common.IResourceStorage,System.String,System.String)">
            <summary>
            Инициализирует новый зкземпляр класса <see cref="T:Terrasoft.Common.LocalizableValue"/>, используя заданные
            хранилище ресурсов, менеджер ресурсов, элемент ресурсов.
            </summary>
            <param name="storage">Хранилище ресурсов - класс, реализующий интерфейс
            <see cref="T:Terrasoft.Common.IResourceStorage"/>.</param>
            <param name="resourceManagerName">Имя менеджера ресурсов.</param>
            <param name="resourceItemName">Имя элемента ресурсов.</param>
        </member>
        <member name="M:Terrasoft.Common.LocalizableValue.#ctor(Terrasoft.Common.LocalizableValue)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.LocalizableValue"/>, используя заданное
            локализуемое значение.
            </summary>
            <param name="source">Локализуемое значение.</param>
        </member>
        <member name="P:Terrasoft.Common.LocalizableValue.Storage">
            <summary>
            Возвращает и устанавливает хранилище ресурсов для данного локализуемого значения.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.LocalizableValue.ResourceManager">
            <summary>
            Возвращает менеджер ресурсов для данного локализуемого значения.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.LocalizableValue.ResourceManagerName">
            <summary>
            Возвращает и устанавливает имя менеджера ресурсов для данного локализуемого значения.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.LocalizableValue.ResourceItemName">
            <summary>
            Возвращает и устанавливает имя элемента ресурсов для данного локализуемого значения.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.LocalizableValue.ResetCultureValues">
            <summary>
            Выполняет сброс значения языкового стандарта для данного локализуемого значения.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.LocalizableValue.SetResourceInfo(System.String,System.String,System.Boolean)">
            <summary>
            Устанавливает сведения о менеджере ресурсов и элементе ресурсов для данного локализуемого значения.
            </summary>
            <param name="resourceManagerName">Имя менеджера ресурсов.</param>
            <param name="resourceItemName">Имя элемента ресурсов.</param>
            <param name="resetValue">Признак, определяющий необходимость сброса значения культуры.
            </param>
            <remarks>Перегруженный метод.</remarks>
        </member>
        <member name="M:Terrasoft.Common.LocalizableValue.SetResourceInfo(Terrasoft.Common.IResourceStorage,System.String,System.String,System.Boolean)">
            <summary>
            Устанавливает информацию о хранилище ресурсов, менеджере ресурсов и элементе ресурсов для данного
            локализуемого значения.
            </summary>
            <param name="storage">Хранилище ресурсов.</param>
            <param name="resourceManagerName">Имя менеджера ресурсов.</param>
            <param name="resourceItemName">Элемент ресурса.</param>
            <param name="resetValue">Признак, определяющий необходимость сброса значения культуры.
            </param>
        </member>
        <member name="T:Terrasoft.Common.LocalizableValue`1">
            <summary>
            Шаблон для локализуемых значений различных типов, предоставляющий методы работы с ними.
            </summary>
            <typeparam name="T">Локализуемые значения типа <see cref="T:System.String"/>,
            <see cref="T:System.Drawing.Image"/>.</typeparam>
        </member>
        <member name="M:Terrasoft.Common.LocalizableValue`1.#ctor">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.LocalizableValue"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.LocalizableValue`1.#ctor(`0)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.LocalizableValue"/> заданным значением
            конкретного типа. </summary>
            <param name="value">Значение для инициализации.</param>
        </member>
        <member name="M:Terrasoft.Common.LocalizableValue`1.#ctor(System.String,System.String)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.LocalizableValue"/>, используя заданный
            менеджер ресурсов и заданный элемент ресурсов.
            </summary>
            <param name="resourceManagerName">Менеджер ресурсов.</param>
            <param name="resourceItemName">Элемент ресурсов.</param>
        </member>
        <member name="M:Terrasoft.Common.LocalizableValue`1.#ctor(Terrasoft.Common.IResourceStorage,System.String,System.String)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.LocalizableValue"/>, используя заданные
            хранилище ресурсов, менеджер ресурсов, элемент ресурсов.
            </summary>
            <param name="storage">Хранилище ресурсов.</param>
            <param name="resourceManagerName">Менеджер ресурсов.</param>
            <param name="resourceItemName">Элемент ресурсов.</param>
        </member>
        <member name="M:Terrasoft.Common.LocalizableValue`1.#ctor(Terrasoft.Common.LocalizableValue{`0})">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Common.LocalizableValue"/>, используя заданное
            локализуемое значение конкретного типа.
            </summary>
            <param name="source">Локализуемое значение конкретного типа.</param>
            <remarks>Конструктор создает новый объект, который является копией <paramref name="source"/>.</remarks>
        </member>
        <member name="P:Terrasoft.Common.LocalizableValue`1.Value">
            <summary>
            Возвращает и устанавливает локализуемое значение с учетом текущей культуры.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.LocalizableValue`1.HasValue">
            <summary>
            Возвращает признак, определяющий наличие локализуемого значения данного типа для текущей культуры.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.LocalizableValue`1.CultureValues">
            <summary>
            Возвращает справочник локализуемых значений текущего экземпляра для поддерживаемых культур.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.LocalizableValue`1.GetFromResourceManager(System.Globalization.CultureInfo,System.String)">
            <summary>
            Возвращает локализуемое значение заданного типа по имени ресурса и культуре.
            </summary>
            <param name="culture">Культура.</param>
            <param name="itemName">Имя элемента ресурсов.</param>
            <returns></returns>
        </member>
        <member name="M:Terrasoft.Common.LocalizableValue`1.ResetCultureValues">
            <summary>
            Выполняет сброс значения культуры для данного локализуемого значения.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.LocalizableValue`1.ClearCultureValues">
            <summary>
            Clears the localized values.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.LocalizableValue`1.ClearForeignCultureValues">
            <summary>
            Clears the foreign localized values.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.LocalizableValue`1.LoadCultureValues">
            <summary>
            Загружает список локализуемых значений данного типа для всех культур, которые
            определены в глобальном хранилище ресурсов.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.LocalizableValue`1.HasCultureValue(System.Globalization.CultureInfo)">
            <summary>
            Определяет, существует ли локализуемое значение для для заданной культуры.
            </summary>
            <param name="culture">Культура.</param>
            <returns>
            <c>true</c>, если для заданной культуры существует локализуемое значение;
            иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.LocalizableValue`1.SetCultureValue(System.Globalization.CultureInfo,`0)">
            <summary>
            Устанавливает заданное локализуемое значение для заданной культуры.
            </summary>
            <param name="culture">Культура.</param>
            <param name="value">Локализуемое значение.</param>
        </member>
        <member name="M:Terrasoft.Common.LocalizableValue`1.GetCultureValue(System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Gets the localized value of the specified type for the specified culture.
            Depending on the value of the <paramref name="throwIfNoManager"/> parameter method may generate an exception
            of type <see cref="T:Terrasoft.Common.ItemNotFoundException"/>, unless a resource manager is set for this localized value.
            </summary>
            <param name="culture">Culture.</param>
            <param name="throwIfNoManager">
            Flag that indicates if method has to throw exception <see cref="T:Terrasoft.Common.ItemNotFoundException"/>.
            </param>
            <returns>Localized value of specified type.</returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">
            If <paramref name="throwIfNoManager"/> equals <c>true</c> and manager is not set.
            </exception>
        </member>
        <member name="M:Terrasoft.Common.LocalizableValue`1.GetCultureValueWithFallback(System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Gets the localized value of the specified type for the specified culture. If value for the specified culture
            is not found, default culture value is returned.
            Depending on the value of the <paramref name="throwIfNoManager"/> parameter method may generate an exception
            of type <see cref="T:Terrasoft.Common.ItemNotFoundException"/>, unless a resource manager is set for this localized value.
            </summary>
            <param name="culture">Culture.</param>
            <param name="throwIfNoManager">
            Flag that indicates if method has to throw exception <see cref="T:Terrasoft.Common.ItemNotFoundException"/>.
            </param>
            <returns>Localized value of specified type.</returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">
            If <paramref name="throwIfNoManager"/> equals <c>true</c> and manager is not set.
            </exception>
        </member>
        <member name="M:Terrasoft.Common.LocalizableValue`1.ClearCultureValue(System.Globalization.CultureInfo)">
            <summary>
            Clears the localized value for the specified culture.
            </summary>
            <param name="culture">Culture.</param>
        </member>
        <member name="T:Terrasoft.Common.LocalizableValueCollection">
            <summary>
            Предоставляет методы работы с коллекцией локализуемых значений.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.LocalizableValueCollection.#ctor">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.LocalizableValueCollection"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.LocalizableValueCollection.#ctor(Terrasoft.Common.LocalizableValueCollection)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.LocalizableValueCollection"/>, используя
            заданную коллекцию локализуемых значений.
            </summary>
            <param name="source">Коллекция локализуемых значений.</param>
        </member>
        <member name="M:Terrasoft.Common.LocalizableValueCollection.FindByItemName(System.String)">
            <summary>
            Осуществляет поиск элемента по заданному имени.
            </summary>
            <param name="itemName">Имя искомого элемента.</param> 
            <returns>Найденное значение элемента с именем <paramref name="itemName"/> типа 
            <see cref="T:Terrasoft.Common.LocalizableValue"/>. Если элемента с именем <paramref name="itemName"/> 
            не найдено в данной коллекции, возвращается <c>null</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">. 
            При передаче в качестве параметра <paramref name="itemName"/> значения <c>null</c>.
            </exception>
        </member>
        <member name="M:Terrasoft.Common.LocalizableValueCollection.GetByItemName(System.String)">
            <summary>
            Возвращает элемент с заданным именем либо генерирует исключение, если
            элемент не найден.
            </summary>
            <param name="itemName">Имя искомого элемента.</param>
            <returns>
            Элемент коллекции с именем <paramref name="itemName"/> типа <see cref="T:Terrasoft.Common.LocalizableValue"/>.
            </returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Если элемент с именем <paramref name="itemName"/> в данной 
            коллекции не найден. </exception>
        </member>
        <member name="M:Terrasoft.Common.LocalizableValueCollection.GetDifferenceByName(Terrasoft.Common.LocalizableValueCollection)">
            <summary>
            Возвращает коллекцию элементов, которая представляет собой разницу по имени между текущей и заданной 
            коллекцией. 
            </summary>
            <param name="subtrahend">
            Коллекция локализуемых значений, которые сравниваются с элементами текущей коллекции.
            </param>
            <returns>
            Разница по имени элементов текущей и заданной коллекции <paramref name="subtrahend"/>.
            </returns>
            <remarks>Метод создает копию текущей коллекции и осуществляет поиск по имени элементов 
            <paramref name="subtrahend"/> в текущей коллекции. Если элемент найден, он удаляется из созданной копии 
            текущей коллекции.
            </remarks>
            <exception cref="T:Terrasoft.Common.ArgumentEmptyException">
            При передаче в качестве параметра <paramref name="subtrahend"/> значений <c>null</c>.
            </exception>
        </member>
        <member name="M:Terrasoft.Common.LocalizableValueCollection.GetDifferenceByValues(Terrasoft.Common.LocalizableValueCollection,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Returns the collection of elements that contains the difference by value between the current collection
            and the specified collection, given the specified culture.
            </summary>
            <param name="subtrahend">
            A collection of localizable values that are compared to elements of the current collection.
            </param>
            <param name="culture">Culture.</param>
            <param name="useLoadedCultureValues">Indicates whether to compare culture values that are already loaded
            or try loading from resource manager.</param>
            <returns>
            The difference by value between the current collection and the specified collection 
            <paramref name="subtrahend"/>, given the specified <paramref name="culture"/>.
            </returns>
            <exception cref="T:Terrasoft.Common.ArgumentEmptyException">Throws if <paramref name="subtrahend"/>
            or <paramref name="culture"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Common.LocalizableValueCollection.GetDifferenceByValues(Terrasoft.Common.LocalizableValueCollection,System.Globalization.CultureInfo)">
            <summary>
            Returns the collection of elements that contains the difference by value between the current collection
            and the specified collection, given the specified culture.
            </summary>
            <param name="subtrahend">
            A collection of localizable values that are compared to elements of the current collection.
            </param>
            <param name="culture">Culture.</param>
            <returns>
            The difference by value between the current collection and the specified collection 
            <paramref name="subtrahend"/>, given the specified <paramref name="culture"/>.
            </returns>
            <exception cref="T:Terrasoft.Common.ArgumentEmptyException">Throws if <paramref name="subtrahend"/>
            or <paramref name="culture"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Common.LocalizableValueCollection.RemoveByItemName(System.String)">
            <summary>
            Удаляет из текущей коллекции локализуемых значений элемент с именем <paramref name="itemName"/>.
            </summary>
            <param name="itemName">Имя удаляемого элемента коллекции.</param>
            <returns>
            <c>true</c>, если элемент с именем <paramref name="itemName"/> был успешно удален из коллекции;
            иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.LocalizableValueCollection.Clone">
            <summary>
            Создает копию текущей коллекции <see cref="T:Terrasoft.Common.LocalizableValueCollection"/>
            </summary>
            <returns>
            Новый экземпляр <see cref="T:Terrasoft.Common.LocalizableValueCollection"/>, представляющий собой копию 
            текущей коллекции. 
            </returns>
        </member>
        <member name="T:Terrasoft.Common.LoggingConfigurationSectionHandler">
            <inheritdoc />
            <summary>
            Class that is responsible for handling of Common.Logging configuration section.
            Fixes invalid behaviour with Common.Logging.NLog45 config path handling.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.LoggingConfigurationSectionHandler.#ctor">
            <summary>
            Creates an instance of <see cref="T:Terrasoft.Common.LoggingConfigurationSectionHandler"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.LoggingConfigurationSectionHandler.#ctor(Terrasoft.IO.IFile)">
            <summary>
            Creates an instance of <see cref="T:Terrasoft.Common.LoggingConfigurationSectionHandler"/>.
            </summary>
            <param name="fileWrapper">Instance of <see cref="T:Terrasoft.IO.IFile"/> to use.</param>
        </member>
        <member name="M:Terrasoft.Common.LoggingConfigurationSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <inheritdoc />
        </member>
        <member name="T:Terrasoft.Common.LoggingTimer">
            <summary>
            Represents a timer that supports logging.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.LoggingTimer.#ctor(Terrasoft.Common.ITimer,Common.Logging.ILog)">
            <summary>
            Creates a new instance of the <see cref="T:Terrasoft.Common.LoggingTimer"/> class.
            </summary>
            <param name="timer">Timer.</param>
            <param name="logger">Logger.</param>
        </member>
        <member name="M:Terrasoft.Common.LoggingTimer.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.LoggingTimer.IsRunning">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.LoggingTimer.Start(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Terrasoft.Common.LoggingUtilities">
            <summary>
            Provides utility methods for logging.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.LoggingUtilities.ErrorObject``1(Common.Logging.ILog,``0)">
            <summary>
            Logs <paramref name="message"/> as structured message object.
            </summary>
            <param name="source">Logger.</param>
            <param name="message">Message object.</param>
            <typeparam name="T">Message object type.</typeparam>
        </member>
        <member name="M:Terrasoft.Common.LoggingUtilities.ErrorObject``1(Common.Logging.ILog,``0,System.Exception)">
            <summary>
            Logs <paramref name="exception"/> and <paramref name="message"/> as structured message object.
            </summary>
            <param name="source">Logger.</param>
            <param name="message">Message object.</param>
            <param name="exception">Exception.</param>
            <typeparam name="T">Message object type.</typeparam>
        </member>
        <member name="T:Terrasoft.Common.Messaging.DistributedNotificationAttribute">
            <summary>
            Handlers for messages marked with this attribute will be invoked in all application nodes.
            </summary>
            <inheritdoc cref="T:System.Attribute" />
        </member>
        <member name="T:Terrasoft.Common.Messaging.IMessageHub">
            <summary>
            Represents an abstraction for publishing a message.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.Messaging.IMessageHub.PublishAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends a notification to multiple handlers.
            </summary>
            <param name="notification">Notification object.</param>
            <param name="cancellationToken">Optional cancellation token.</param>
            <returns>A task that represents the publish operation.</returns>
        </member>
        <member name="T:Terrasoft.Common.Messaging.INotification">
            <summary>
            Represents an abstraction of a notification.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.Messaging.INotificationHandler`1">
            <summary>
            Provides an abstraction for hooking in custom code to the notification hub registration process.
            </summary>
            <typeparam name="TNotification">Instance that implements <see cref="T:Terrasoft.Common.Messaging.INotification"/>.</typeparam>
        </member>
        <member name="M:Terrasoft.Common.Messaging.INotificationHandler`1.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles a notification.
            </summary>
            <param name="notification">Notification.</param>
            <param name="cancellationToken">Optional cancellation token.</param>
            <returns>A task that represents the handled operation.</returns>
        </member>
        <member name="T:Terrasoft.Common.Messaging.MessageHub">
            <inheritdoc cref="T:Terrasoft.Common.Messaging.IMessageHub"/>
        </member>
        <member name="P:Terrasoft.Common.Messaging.MessageHub.Instance">
            <summary>
            Singleton instance of <see cref="T:Terrasoft.Common.Messaging.IMessageHub"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.Messaging.MessageHub.Init(Terrasoft.Common.Messaging.IMessageHub)">
            <summary>
            Initializes message publisher.
            </summary>
            <param name="messageHub">Instance that implements the <see cref="T:Terrasoft.Common.Messaging.IMessageHub"/> interface.</param>
        </member>
        <member name="T:Terrasoft.Common.Messaging.MessageHubUtils">
            <summary>
            Provides extension methods for work with MessageHub.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.Messaging.MessageHubUtils.Publish``1(Terrasoft.Common.Messaging.IMessageHub,``0)">
            <summary>
            Sends a notification to multiple handlers.
            </summary>
            <param name="source">Message hub.</param>
            <param name="notification">Notification object.</param>
            <returns>A task that represents the publish operation.</returns>
        </member>
        <member name="T:Terrasoft.Common.Messaging.NotificationHandlerUtils">
            <summary>
            Provides extension methods for work with notification handler.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.Messaging.NotificationHandlerUtils.Handle``1(Terrasoft.Common.Messaging.INotificationHandler{``0},``0)">
            <summary>
            Sends a notification to multiple handlers.
            </summary>
            <param name="source">Notification handler.</param>
            <param name="notification">Notification object.</param>
            <returns>A task that represents the publish operation.</returns>
        </member>
        <member name="T:Terrasoft.Common.MimeTypeResult">
            <summary>
            MIME type detection result.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.MimeTypeResult.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.MimeDetector.MimeResult" /> class.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.MimeTypeResult.Type">
            <summary>
            The MIME type.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.MimeTypeResult.Error">
            <summary>
            Exception for MIME type detection.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.MimeTypeResult.HasError">
            <summary>
            Has error
            </summary>
        </member>
        <member name="T:Terrasoft.Common.MimeTypeDetector">
            <summary>
            MIME type detection.
            Initializes a new instance of the <see cref="T:Terrasoft.Core.MimeTypeDetector" /> class.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.MimeTypeDetector.GetMimeType(System.Byte[])">
            <summary>
            Determines the MIME type from the data provided.
            </summary>
            <param name="data">The byte array that is used to determine the MIME type.</param>
            <returns>
            Result of determine MIME type. <see cref="T:Terrasoft.Core.MimeDetector.MimeTypeResult"/>
            </returns>
            <remarks>
            If the file name with the extension is available in the code, use the method that 
            takes the file name as a parameter.
            </remarks>
        </member>
        <member name="M:Terrasoft.Common.MimeTypeDetector.GetMimeType(System.String)">
            <summary>
            Returns the MIME mapping for the specified file name.
            </summary>
            <param name="fileName">The file name that is used to determine the MIME type.</param>
            <returns>
            Result of determine MIME type. <see cref="T:Terrasoft.Core.MimeDetector.MimeTypeResult"/>
            </returns>
            <remarks>
            If the file name with the extension is available in the code, use the method that 
            takes the file name as a parameter.
            </remarks>
        </member>
        <member name="M:Terrasoft.Common.MimeTypes.GetMimeType(System.String)">
            <summary>
            Gets the MIME-type for the given file name,
            or <see cref="P:Terrasoft.Common.MimeTypes.FallbackMimeType"/> if a mapping doesn't exist.
            </summary>
            <param name="fileName">The name of the file.</param>
            <returns>The MIME-type for the given file name.</returns>
        </member>
        <member name="T:Terrasoft.Common.NodeIdGenerator">
            <inheritdoc />
        </member>
        <member name="P:Terrasoft.Common.NodeIdGenerator.NodeUniqueId">
            <summary>
            Lazy node unique id value.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.NodeIdGenerator.GenerateNodeUniqueId">
            <inheritdoc />
        </member>
        <member name="T:Terrasoft.Common.ObjectList">
            <summary>
            Provides utility methods to create <see cref="T:Terrasoft.Common.ObjectList`1"/> instances.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.ObjectList.Create(System.Collections.IEnumerable)">
            <summary>Creates the <see cref="T:Terrasoft.Common.ObjectList`1"/> instance where items has type <see cref="T:System.Boolean"/> using
            provided items.</summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Terrasoft.Common.ObjectList.Create(System.Type)">
            <summary>
            Creates <see cref="T:Terrasoft.Common.ObjectList`1"/> instance.
            </summary>.
            Supported types are: <see cref="T:System.String"/>,
            <see cref="T:System.Int32"/>, <see cref="T:System.DateTime"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Guid"/>, <see cref="T:System.Boolean"/>
        </member>
        <member name="M:Terrasoft.Common.ObjectList.Create``1">
            <summary>Creates <see cref="T:Terrasoft.Common.ObjectList`1"/> instance.</summary>. Supported types are: <see cref="T:System.String"/>,
            <see cref="T:System.Int32"/>, <see cref="T:System.DateTime"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Guid"/>, <see cref="T:System.Boolean"/>
            <typeparam name="T">Items type.</typeparam>
        </member>
        <member name="M:Terrasoft.Common.ObjectList.Create(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>Creates the <see cref="T:Terrasoft.Common.ObjectList`1"/> instance where items has type <see cref="T:System.Int32"/> using
            provided items.</summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Terrasoft.Common.ObjectList.Create(System.Int32[])">
            <summary>Creates the <see cref="T:Terrasoft.Common.ObjectList`1"/> instance where items has type <see cref="T:System.Int32"/> using
            provided items.</summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Terrasoft.Common.ObjectList.Create(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Creates the <see cref="T:Terrasoft.Common.ObjectList`1"/> instance where items has type <see cref="T:System.String"/> using
            provided items.</summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Terrasoft.Common.ObjectList.Create(System.String[])">
            <summary>Creates the <see cref="T:Terrasoft.Common.ObjectList`1"/> instance where items has type <see cref="T:System.String"/> using
            provided items.</summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Terrasoft.Common.ObjectList.Create(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>Creates the <see cref="T:Terrasoft.Common.ObjectList`1"/> instance where items has type <see cref="T:System.Decimal"/> using
            provided items.</summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Terrasoft.Common.ObjectList.Create(System.Decimal[])">
            <summary>Creates the <see cref="T:Terrasoft.Common.ObjectList`1"/> instance where items has type <see cref="T:System.Decimal"/> using
            provided items.</summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Terrasoft.Common.ObjectList.Create(System.Collections.Generic.IEnumerable{System.DateTime})">
            <summary>Creates the <see cref="T:Terrasoft.Common.ObjectList`1"/> instance where items has type <see cref="T:System.DateTime"/> using
            provided items.</summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Terrasoft.Common.ObjectList.Create(System.DateTime[])">
            <summary>Creates the <see cref="T:Terrasoft.Common.ObjectList`1"/> instance where items has type <see cref="T:System.DateTime"/> using
            provided items.</summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Terrasoft.Common.ObjectList.Create(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>Creates the <see cref="T:Terrasoft.Common.ObjectList`1"/> instance where items has type <see cref="T:System.Guid"/> using
            provided items.</summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Terrasoft.Common.ObjectList.Create(System.Guid[])">
            <summary>Creates the <see cref="T:Terrasoft.Common.ObjectList`1"/> instance where items has type <see cref="T:System.Guid"/> using
            provided items.</summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Terrasoft.Common.ObjectList.Create(System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>Creates the <see cref="T:Terrasoft.Common.ObjectList`1"/> instance where items has type <see cref="T:System.Boolean"/> using
            provided items.</summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Terrasoft.Common.ObjectList.Create(System.Boolean[])">
            <summary>Creates the <see cref="T:Terrasoft.Common.ObjectList`1"/> instance where items has type <see cref="T:System.Boolean"/> using
            provided items.</summary>
            <param name="items">The items.</param>
        </member>
        <member name="T:Terrasoft.Common.ObjectList`1">
            <summary>
            Generic collection that implements <see cref="T:Terrasoft.Common.IObjectList"/> interface.
            </summary>
            <typeparam name="T">Item type.</typeparam>
        </member>
        <member name="M:Terrasoft.Common.ObjectList`1.Terrasoft#Common#ISerializableObject#Serialize(Terrasoft.Common.DataWriter)">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.ObjectList`1.Terrasoft#Common#ISerializableObject#Deserialize(Terrasoft.Common.DataReader)">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.ObjectList`1.System#Collections#Generic#IEnumerable{System#Object}#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Terrasoft.Common.ObjectListUtilities">
            <summary>
            Provides helper utilities for using in <see cref="T:Terrasoft.Common.CompositeObject"/> and <see cref="T:Terrasoft.Common.ObjectList`1"/> classes.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.ObjectListUtilities.AllowedTypes">
            <summary>
            Collection of allowed types.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.ObjectListUtilities.IsTypeSupported(System.Type)">
            <summary>
            Checks whether the type described by the <paramref name="type"/> is supported or not.
            </summary>
            <param name="type">Type to look for.</param>
            <returns><c>true</c> if supported, otherwise <c>false</c></returns>
        </member>
        <member name="M:Terrasoft.Common.ObjectListUtilities.GetIndexOfType(System.Type)">
            <summary>
            Gets index of type.
            </summary>
            <param name="type">Type.</param>
            <returns>Index.</returns>
        </member>
        <member name="M:Terrasoft.Common.ObjectListUtilities.GetTypeByIndex(System.Int32)">
            <summary>
            Gets type by index.
            </summary>
            <param name="index">Type index.</param>
            <returns>Type by index.</returns>
        </member>
        <member name="T:Terrasoft.Common.Option">
            <summary>
            Provides helper methods for <see cref="T:Terrasoft.Common.Option`1"/> instances creation.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.Option.Some``1(``0)">
            <summary>
            Creates a new option from a specified value.
            </summary>
            <param name="value">The value to create an option for.</param>
            <returns>A new Option&lt;T&gt; whose value is set to <paramref name="value"/>.</returns>
        </member>
        <member name="M:Terrasoft.Common.Option.None``1">
            <summary>
            The Option indicating that there is no value.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.Option`1">
            <summary>
            A generic Option type that allows for an explicit difference
            between an intentionally set value, and a default value of None.
            </summary>
            <typeparam name="T">The type to create an option for.</typeparam>
        </member>
        <member name="M:Terrasoft.Common.Option`1.#ctor(`0)">
            <summary>
            Creates a new instance of the <see cref="T:Terrasoft.Common.Option`1"/> struct and initializes it with value provided by
            <paramref name="value"/>. 
            </summary>
            <param name="value">Value to initialize a new instance with.</param>
        </member>
        <member name="P:Terrasoft.Common.Option`1.None">
            <summary>
            The Option indicating that there is no value.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.Option`1.HasValue">
            <summary>
            <c>true</c> if the option has a value, <c>false</c> otherwise.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.Option`1.Value">
            <summary>
            Gets the value of the option.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.Option`1.Some(`0)">
            <summary>
            Creates a new option from a specified value.
            </summary>
            <param name="value">The value to create an option for.</param>
            <returns>A new Option&lt;T&gt; whose value is set to <paramref name="value"/>.</returns>
        </member>
        <member name="M:Terrasoft.Common.Option`1.ValueOr(`0)">
            <summary>
            Returns the value of the option if it has value or <paramref name="otherValue"/> otherwise.
            </summary>
            <param name="otherValue">A value to return if current value is empty.</param>
        </member>
        <member name="M:Terrasoft.Common.Option`1.ValueOr(System.Func{`0})">
            <summary>
            Returns the value of the option if it has value or result of <paramref name="otherValueFactory"/>
            otherwise.
            </summary>
            <param name="otherValueFactory">Factory to return a value from if current value is empty.</param>
        </member>
        <member name="M:Terrasoft.Common.Option`1.ExecuteIfHasValue(System.Action{`0})">
            <summary>
            Executes <paramref name="action"/> when value exists.
            </summary>
            <param name="action">Action to execute.</param>
        </member>
        <member name="M:Terrasoft.Common.Option`1.As``1">
            <summary>
            Returns options of <typeparamref name="TResult"/> type when value is instance of that type.
            </summary>
            <typeparam name="TResult">Resulting type.</typeparam>
        </member>
        <member name="M:Terrasoft.Common.Option`1.Map``1(System.Func{`0,``0})">
            <summary>
            Returns new option as result of <paramref name="converter"/> evaluation.
            </summary>
            <param name="converter">Function that convert value of type <typeparamref name="T"/> into
            <typeparamref name="TResult"/>.</param>
            <typeparam name="TResult">Resulting type.</typeparam>
        </member>
        <member name="M:Terrasoft.Common.Option`1.TryGetValue(`0@)">
            <summary>
            Returns <c>true</c> if this option contains value; otherwise, <c>false</c>.
            </summary>
            <param name="value">Current value.</param>
        </member>
        <member name="T:Terrasoft.Common.PasswordCryptoProvider">
            <summary>
            Provides methods for passwords hashing.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.PasswordCryptoProvider.GetIsPasswordHashFormatValid(System.String)">
            <summary>
            Validates that password hash format is valid.
            </summary>
            <param name="hash">Hash.</param>
            <returns><c>true</c>, if password hash format is valid. Otherwise returns <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Common.PasswordCryptoProvider.GetIsPasswordHashInSha256Format(System.String)">
            <summary>
            Validates that password hash is in SHA256 algorithm format.
            </summary>
            <param name="hash">Hash.</param>
            <returns><c>true</c>, if password hash is in previous version of hashing algorithm format.
            Otherwise returns <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Common.PasswordCryptoProvider.ValidateByPreviousAlgorithm(System.String,System.String)">
            <summary>
            Validates that password matches to hash, generated by previous versions algorithm.
            </summary>
            <param name="password">Password.</param>
            <param name="hash">Hash.</param>
            <returns><c>true</c>, if password matches to hash. Otherwise returns <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Common.PasswordCryptoProvider.Validate(System.String,System.String)">
            <summary>
            Validates that password matches to hash.
            </summary>
            <param name="password">Password.</param>
            <param name="hash">Hash.</param>
            <returns><c>true</c>, if password matches to hash. Otherwise returns <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Common.PasswordCryptoProvider.AddSalt(System.String)">
            <summary>
            Adds random salt to text value.
            </summary>
            <param name="value">Text value.</param>
            <returns>Text value with random salt.</returns>
        </member>
        <member name="M:Terrasoft.Common.PasswordCryptoProvider.RemoveSalt(System.String)">
            <summary>
            Removes salt from value with random salt.
            </summary>
            <param name="value">Text value with salt.</param>
            <returns>Text value without random salt.</returns>
        </member>
        <member name="M:Terrasoft.Common.PasswordCryptoProvider.GetHashByPassword(System.String)">
            <summary>
            Returns password hash by password.
            </summary>
            <param name="password">Password.</param>
            <returns>Hash.</returns>
        </member>
        <member name="T:Terrasoft.Common.PerformanceLogging.IPerformanceTimeLogger">
            <summary>
            Provides methods for logging of operation performance.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.PerformanceLogging.IPerformanceTimeLogger.LogStart">
            <summary>
            Logs operation start.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.PerformanceLogging.IPerformanceTimeLogger.LogTime(System.Int64)">
            <summary>
            Logs the time of an operation.
            </summary>
            <param name="milliseconds">Time in milliseconds.</param>
        </member>
        <member name="T:Terrasoft.Common.DefaultInstanceFactoryAttribute">
            <summary>
            Used to mark non public constructor which should be used by instance factory created using
            </summary>
            <remarks>Constructor should have no parameter.</remarks>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Terrasoft.Common.ReflectionUtilities">
            <summary>
            Provides methods for working with class and type information at runtime.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.ReflectionUtilities.GetPropertyDescriptor(System.Object,System.String)">
            <summary>
            Returns an abstraction of a property on the class.
            </summary>
            <param name="source">A component to get the properties for.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>Descriptor of the property.</returns>
        </member>
        <member name="M:Terrasoft.Common.ReflectionUtilities.IsAssignableTo(System.Object,System.Type)">
            <summary>
            Determines whether the specified value can be assigned to the specified type.
            </summary>
            <param name="source">The value to compare with the specified type.</param>
            <param name="destinationType">The type to compare with the type of the current value.</param>
            <returns>
            <see langword="true"/> if this value can be implicitly assigned to the specified type; otherwise,
            <see langword="false"/>.</returns>
        </member>
        <member name="M:Terrasoft.Common.ReflectionUtilities.GetInstanceFactory``2(System.Reflection.MethodInfo)">
            <summary>Returns delegate that create instance of specified type using specified
            <paramref name="factoryMethod"/> with single argument of type <typeparamref name="TArgument"/>.</summary>
            <typeparam name="TInstance">The type of the instance.</typeparam>
            <typeparam name="TArgument">Factory method argument type.</typeparam>
            <returns>Delegate that create instance of <typeparamref name="TInstance"/> using
            <typeparamref name="TArgument"/>.</returns>
        </member>
        <member name="M:Terrasoft.Common.ReflectionUtilities.GetDefConstructorInstanceFactory``1(System.Reflection.MethodInfo)">
            <summary>
            Returns delegate that create instance of specified type using specified
            <paramref name="factoryMethod"/> without arguments.
            </summary>
            <typeparam name="TInstance"> The type of the instance.</typeparam>
            <returns>
            Delegate that create instance of <typeparamref name="TInstance"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.ReflectionUtilities.ForceGetValue(System.Reflection.PropertyInfo,System.Object,System.Object[])">
            <summary>
            Возвращает значение текущего свойства либо значение метода get_[имя свойства <paramref name="source"/>]()
            заданного объекта <paramref name="obj"/>.
            </summary>
            <param name="source">Атрибуты и метаданные текущего свойства.</param>
            <param name="obj">Объект , значение которого возвращается, если свойство <paramref name="source"/>
            предназначено только для записи.</param>
            <param name="args"></param>
            <returns>Объект, содержащий значение свойства.</returns>
            <exception cref="T:System.ArgumentNullException">Если в качестве параметра <paramref name="obj"/> передано значение
            <c>null</c>.</exception>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если свойство <paramref name="obj"/> предназначено только для
            записи.</exception>
            <remarks>Метод расширения для класса <see cref="T:System.Reflection.PropertyInfo"/>.</remarks>
        </member>
        <member name="M:Terrasoft.Common.ReflectionUtilities.GetPropertyValue(System.Object,System.String)">
            <summary>
            Возвращает для экземпляра текущего типа значение свойства с заданным именем.
            </summary>
            <param name="source">Тип.</param>
            <param name="propertyName">Имя свойства.</param>
            <returns>Объект, содержащий значение свойства.</returns>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">Если в качестве параметра <paramref name="propertyName"/>
            передано пустое значение или <c>null</c>.</exception>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если экземпляр текущего тип не содержит свойство с именем
            <paramref name="propertyName"/> либо если свойство <paramref name="propertyName"/> предназначено только для
            записи.
            </exception>
            <remarks>Метод расширения класса <see cref="T:System.Object"/>.</remarks>
        </member>
        <member name="M:Terrasoft.Common.ReflectionUtilities.GetPropertyDefValue(System.Object,System.String,System.Object)">
            <summary>
            Возвращает для экземпляра текущего типа значение свойства с заданным именем либо заданное значение по
            умолчанию, если текущий тип не содержит свойства с таким именем.
            </summary>
            <param name="source">Тип.</param>
            <param name="propertyName">Имя свойства.</param>
            <param name="defValue">Значение по умолчанию.</param>
            <returns>Объект, содержащий значение свойства.</returns>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">Если в качестве параметра <paramref name="propertyName"/>
            передано пустое значение или <c>null</c>.</exception>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если свойство <paramref name="propertyName"/> предназначено
            только для записи.</exception>
        </member>
        <member name="M:Terrasoft.Common.ReflectionUtilities.TryGetPropertyValue(System.Object,System.String,System.Object@)">
            <summary>
            Определяет, возможно ли у экземпляра текущего типа получить значение свойства с заданным именем.
            </summary>
            <param name="source">Тип.</param>
            <param name="propertyName">Имя свойства.</param>
            <param name="value">Значение свойства.</param>
            <returns>
            <c>true</c>, если для свойства <paramref name="propertyName"/> успешно получено его значение; иначе -
            <c>false.</c>
            </returns>
            <remarks>Метод расширения класса <see cref="T:System.Object"/>.</remarks>
        </member>
        <member name="M:Terrasoft.Common.ReflectionUtilities.HasProperty(System.Object,System.String)">
            <summary>
            Indicates if object has property by the specified name.
            </summary>
            <param name="source">Object.</param>
            <param name="propertyName">Property name.</param>
            <returns>Flag that indicates if object has property or not.</returns>
        </member>
        <member name="M:Terrasoft.Common.ReflectionUtilities.GetPropertyValue(System.Object,System.String,System.Reflection.BindingFlags)">
            <summary>
            Возвращает для экземпляра текущего типа значение свойства с заданным именем либо генерирует исключение,
            если текущий экземпляр не содержит свойства с заданным именем.
            </summary>
            <param name="source">Тип.</param>
            <param name="propertyName">Имя свойства.</param>
            <param name="bindingFlags">Флаги привязки типа <see cref="T:System.Reflection.BindingFlags"/>.</param>
            <returns>
            Значение свойства <paramref name="propertyName"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.ReflectionUtilities.GetPropertyValueByPath(System.Object,System.String)">
            <summary>
            Возвращает для экземпляра текущего типа значение свойства по заданному пути к свойству.
            </summary>
            <param name="source">Тип.</param>
            <param name="propertyPath">Путь к свойству в формате
            [Имя свойства].[Имя вложенного свойства].&lt;...&gt;.[Имя результирующего свойства].</param>
            <returns>Значение свойства <paramref name="propertyPath"/>.</returns>
            <remarks>Метод расширения класса <see cref="T:System.Object"/>.</remarks>
        </member>
        <member name="M:Terrasoft.Common.ReflectionUtilities.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            Устанавливает для экземпляра текущего типа значение свойства с заданным именем.
            </summary>
            <param name="source">Тип.</param>
            <param name="propertyName">Имя свойства.</param>
            <param name="value">Значение свойства.</param>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">Если в качестве параметра <paramref name="propertyName"/>
            передано пустое значение либо <c>null</c>.</exception>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если экземпляр текущего типа не содержит свойство с именем
            <paramref name="propertyName"/> либо если свойство <paramref name="propertyName"/> только для записи.
            </exception>
            <exception cref="T:Terrasoft.Common.InvalidTypeCastException">Если тип свойства с именем
            <paramref name="propertyName"/> несовместим с типом присваиваемого значения <paramref name="value"/>.
            </exception>
            <remarks>Метод расширения для класса <see cref="T:System.Object"/>.</remarks>
        </member>
        <member name="M:Terrasoft.Common.ReflectionUtilities.TrySetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            Пытается установить для экземпляра текущего типа значение для заданного свойства.
            </summary>
            <param name="source">Тип.</param>
            <param name="propertyName">Имя свойства.</param>
            <param name="value">Значение свойства.</param>
            <returns>
            <c>true</c>, если для свойства <paramref name="propertyName"/> удалось успешно установить значение
            <paramref name="value"/>; иначе - <c>false</c>.
            </returns>
            <remarks>Метод расширения для класса <see cref="T:System.Object"/>.</remarks>
        </member>
        <member name="M:Terrasoft.Common.ReflectionUtilities.SetStaticPropertyValue(System.Type,System.String,System.Object)">
            <summary>
            Tries to set the value of a given static property of the type.
            </summary>
            <param name="source">Type.</param>
            <param name="propertyName">Property name.</param>
            <param name="value">Value.</param>
            <returns>
            <c>true</c>, if property <paramref name="propertyName"/> successfully set
            <paramref name="value"/>; else - <c>false</c>.
            </returns>
            <remarks>Extension method for <see cref="T:System.Type"/>.</remarks>
        </member>
        <member name="M:Terrasoft.Common.ReflectionUtilities.FindTypeByShortName(System.Reflection.Assembly,System.String)">
            <summary>
            Осуществляет поиск типа по заданному короткому имени в указанной сборке.
            </summary>
            <param name="assembly">Сборка, в которой осуществляется поиск.</param>
            <param name="name">Имя типа.</param>
            <returns>
            <c>true</c>, если в сборке <paramref name="assembly"/> успешно найден тип с именем <paramref name="name"/>;
            иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.ReflectionUtilities.IsTypeOf(System.Object,System.String,System.Boolean)">
            <summary>
            Проверяет, является ли заданный объект типом с указанным полным именем.
            </summary>
            <param name="obj">Объект для проверки.</param>
            <param name="typeFullName">Полное имя типа.</param>
            <param name="shallow">Признак проверки по всем уровням иерархии.</param>
            <returns>
            <c>true</c>, если объект <paramref name="obj"/> является типом <paramref name="typeFullName"/>;
            иначе - <c>false</c>.
            </returns>
            <remarks>Перегруженный метод.</remarks>
        </member>
        <member name="M:Terrasoft.Common.ReflectionUtilities.IsTypeOf(System.Object,System.Type,System.Boolean)">
            <summary>
            Проверяет, является ли заданный объект указанным типом.
            </summary>
            <param name="obj">Объект для проверки.</param>
            <param name="type">Тип - эталон.</param>
            <param name="shallow">Признак проверки по всем уровням иерархии.</param>
            <returns>
            <c>true</c>, если объект <paramref name="obj"/> является типом <paramref name="type"/>;
            иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.ReflectionUtilities.GetDefValue(System.Reflection.PropertyInfo)">
            <summary>
            Возвращает значение по умолчанию для заданного свойства.
            </summary>
            <param name="property">Свойство.</param>
            <returns>
            Объект значения по умолчанию для свойства <paramref name="property"/> либо пустая строка, если
            </returns>
        </member>
        <member name="M:Terrasoft.Common.ReflectionUtilities.GetDefValue(System.Type)">
            <summary>
            Возвращает значение по умолчанию для заданного value-типа.
            </summary>
            <param name="type">Value-тип.</param>
            <returns>
            Объект значения по умолчанию для value-типа <paramref name="type"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.ReflectionUtilities.GetPropertyInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the expression property name.
            </summary>
            <typeparam name="TSource">The property owner type.</typeparam>
            <typeparam name="TValue">The property type.</typeparam>
            <param name="source">The property access expression.</param>
            <returns>Property info instance.</returns>
        </member>
        <member name="M:Terrasoft.Common.ReflectionUtilities.GetIsOverriden(System.Type,System.Reflection.MethodInfo)">
            <summary>
            Gets the value indicating whether method have been overriden in the source type.
            </summary>
            <param name="source">The property access expression.</param>
            <param name="methodInfo">Method to check.</param>
            <returns>Property info instance.</returns>
        </member>
        <member name="M:Terrasoft.Common.ReflectionUtilities.GetHierarchy(System.Type,System.Type)">
            <summary>
            Gets hierarchy of types.
            </summary>
            <param name="source">Type from to check.</param>
            <param name="to">Type to check to.</param>
            <returns>Hierarchy types.</returns>
        </member>
        <member name="M:Terrasoft.Common.ReflectionUtilities.ApplyPropertyAction(System.Object,System.Type,System.Action{System.Object,System.Reflection.PropertyInfo})">
            <summary>
            Applies action for each property with given attribute.
            </summary>
            <param name="source">Object.</param>
            <param name="attributeType">Type of attribute to find.</param>
            <param name="action">Action to execute for found properties.</param>
        </member>
        <member name="M:Terrasoft.Common.ReflectionUtilities.GetInstanceFactory``1(System.Type)">
            <summary>Returns delegate that create instance of specified type using public parameterless
            constructor.</summary>
            <typeparam name="TInstance">The type of the instance.</typeparam>
            <param name="instanceType">Type of the instance.</param>
            <returns>Delegate that create instance of specified type if type has public parameterless
            constructor, otherwise <value>null</value>.</returns>
        </member>
        <member name="M:Terrasoft.Common.ReflectionUtilities.GetTypeNameWithoutAssemblyDetails(System.Type)">
            <summary>
            Returns the assembly qualified type name without assembly details such as version or culture.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Terrasoft.Common.ReflectionUtilities.GetPrivatePropertyValue(System.Object,System.Type,System.String)">
            <summary>
            Returns the value of a private property.
            </summary>
            <param name="instance">Instance.</param>
            <param name="type">Type.</param>
            <param name="propertyName">Property name.</param>
        </member>
        <member name="M:Terrasoft.Common.ReflectionUtilities.GetPrivateFieldValue(System.Object,System.String)">
            <summary>
            Returns the value of a private field.
            </summary>
            <param name="instance">Instance.</param>
            <param name="fieldName">Field name.</param>
        </member>
        <member name="M:Terrasoft.Common.ReflectionUtilities.SetPrivateFieldValue(System.Object,System.String,System.Object)">
            <summary>
            Sets the value of a private field.
            </summary>
            <param name="instance">Instance.</param>
            <param name="fieldName">Field name.</param>
            <param name="value">Field value.</param>
        </member>
        <member name="M:Terrasoft.Common.ReflectionUtilities.GetPrivateFieldValue(System.Object,System.Type,System.String)">
            <summary>
            Returns the value of a private field.
            </summary>
            <param name="instance">Instance.</param>
            <param name="type">Type.</param>
            <param name="fieldName">Field name.</param>
        </member>
        <member name="T:Terrasoft.Common.ResettableLazy`1">
            <summary>
            Provides support for thread-safe lazy initialization, cached value can be discarded.
            </summary>
            <typeparam name="T">Specifies the type of element being lazily initialized.</typeparam>
        </member>
        <member name="M:Terrasoft.Common.ResettableLazy`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Common.ResettableLazy`1"/> class.
            </summary>
            <param name="valueFactory">The value factory.</param>
        </member>
        <member name="P:Terrasoft.Common.ResettableLazy`1.Value">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="P:Terrasoft.Common.ResettableLazy`1.IsValueCreated">
            <summary>
            Flag, indicates whether a value has been created.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.ResettableLazy`1.Reset">
            <summary>Discards cached value.</summary>
        </member>
        <member name="T:Terrasoft.Common.ResourceBuilder">
            <summary>
            Предоставляет методы для построения ресурсов.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.ResourceBuilder.RootDirectory">
            <summary>
            Корневая директория.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.ResourceBuilder.BuildResources(Terrasoft.Common.ResourcePackage,System.IO.Stream)">
            <summary>
            Преобразует ресурсы заданного пакета ресурсов в двоичное представление и записывает их в заданный поток.
            </summary>
            <param name="resources">Пакет ресурсов.</param>
            <param name="resultStream">Поток, в который осуществляется запись.</param>
        </member>
        <member name="M:Terrasoft.Common.ResourceBuilder.BuildResources(Terrasoft.Common.ResourcePackage,System.String)">
            <summary>
            Преобразует ресурсы заданного пакета ресурсов в двоичное представление и записывает их в заданный файл.
            </summary>
            <param name="resources">Пакет ресурсов.</param>
            <param name="outputFilePath">Путь к файлу, в который осуществляется запись.</param>
        </member>
        <member name="M:Terrasoft.Common.ResourceBuilder.BuildJsResources(Terrasoft.Common.ResourcePackage,System.String,System.IO.Stream)">
            <summary>
            Преобразует ресурсы JavaScript файлов в двоичное представление и записывает их с заданным 
            именем в указанный поток.
            </summary>
            <param name="resources">Пакет ресурсов.</param>
            <param name="stringListName">Имя списка ресурсов.</param>
            <param name="resultStream">Поток, в который осуществляется запись.</param>
        </member>
        <member name="M:Terrasoft.Common.ResourceBuilder.BuildClientResources(Terrasoft.Common.ResourcePackage,System.String,System.IO.Stream)">
            <summary>
            Преобразует ресурсы заданного пакета ресурсов в двоичное представление и записывает их с 
            заданным именем в указанный поток.
            </summary>
            <param name="resources">Пакет ресурсов.</param>
            <param name="stringListName">Имя списка ресурсов.</param>
            <param name="resultStream">Поток, в который осуществляется запись.</param>
        </member>
        <member name="M:Terrasoft.Common.ResourceBuilder.BuildClientResources(Terrasoft.Common.ResourcePackage,System.String,System.String)">
            <summary>
            Преобразует ресурсы заданного пакета ресурсов в двоичное представление и записывает их с 
            заданным именем в указанный файл.
            </summary>
            <param name="resources">Пакет ресурсов.</param>
            <param name="stringListName">Имя списка ресурсов.</param>
            <param name="outputFilePath">Имя файла, в который осуществляется запись.</param>
        </member>
        <member name="T:Terrasoft.Common.BaseResource">
            <summary>
            Базовый класс для представления ресурса.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.BaseResource.Package">
            <summary>
            Пакет ресурсов, которому принадлежит ресурс.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.BaseResource.ParentGroup">
            <summary>
            Родительская группа ресурсов.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.BaseResource.Name">
            <summary>
            Имя ресурса.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.BaseResource.ActualName">
            <summary>
            Актуальное имя ресурса в формате 
            [Имя родительской группы_1].&lt;...&gt;.[Имя родительской группы_N].[Имя ресурса]
            </summary>
        </member>
        <member name="P:Terrasoft.Common.BaseResource.ItemType">
            <summary>
            Тип ресурса.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.BaseResource.FileExtension">
            <summary>
            Расширение файла
            </summary>
        </member>
        <member name="P:Terrasoft.Common.BaseResource.ActualItemType">
            <summary>
            Актуальный тип ресурса. Если для текущего ресурса не определен его тип, то возвращается тип родительской 
            группы ресурса.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.BaseResource.FilePath">
            <summary>
            Путь к файлу ресурса.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.BaseResource.ActualFilePath">
            <summary>
            Актуальный путь к файлу ресурса. Если для текущего ресурса не определен путь к файлу, то возвращается 
            путь к файлу родительской группы ресурса
            </summary>
        </member>
        <member name="M:Terrasoft.Common.BaseResource.ReadMetaData(Terrasoft.Common.DataReader)">
            <summary>
            Абстрактный метод десериализации ресурсов с помощью заданного экземпляра 
            <see cref="T:Terrasoft.Common.DataReader"/>.
            </summary>
            <param name="reader">
            Экземпляр <see cref="T:Terrasoft.Common.DataReader"/>, с помощью которого осуществляется десериализация.
            </param>
        </member>
        <member name="M:Terrasoft.Common.BaseResource.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Абстрактный метод сериализации ресурсов с помощью заданного экземпляра 
            <see cref="T:Terrasoft.Common.DataWriter"/>.
            </summary>
            Экземпляр <see cref="T:Terrasoft.Common.DataWriter"/>, с помощью которого осуществляется сериализация.
            <param name="writer">
            </param>
        </member>
        <member name="M:Terrasoft.Common.BaseResource.ReadXml(System.Xml.XmlReader)">
            <summary>
            Абстрактный метод десериализации ресурсов с помощью заданного экземпляра <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="reader">
            Экземпляр <see cref="T:System.Xml.XmlReader"/>, с помощью которого осуществляется десериализация.
            </param>
        </member>
        <member name="M:Terrasoft.Common.BaseResource.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Абстрактный метод сериализации ресурсов с помощью заданного экземпляра <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer">
            Экземпляр <see cref="T:System.Xml.XmlWriter"/>, с помощью которого осуществляется сериализация.
            </param>
        </member>
        <member name="M:Terrasoft.Common.BaseResource.GetSchema">
            <summary>
            Возвращает Xml-схему представления ресурса.
            </summary>
            <returns>
            Xml-схема представления ресурса.
            </returns>
        </member>
        <member name="T:Terrasoft.Common.ResourceGroup">
            <summary>
            Предоставляет методы для работы с группой ресурсов.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.ResourceGroup.Package">
            <summary>
            Пакет ресурсов, которому принадлежит текущая группа ресурсов.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.ResourceGroup.Groups">
            <summary>
            Подгруппы текущей группы ресурсов.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.ResourceGroup.HasGroups">
            <summary>
            Признак, определяющий наличие подгруппы у текущей группы ресурсов.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.ResourceGroup.Items">
            <summary>
            Коллекция элементов ресурсов текущей группы ресурсов.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.ResourceGroup.HasItems">
            <summary>
            <c>true</c>, если текущая группа ресурсов содержит элементы ресурсов; иначе - <c>false</c>.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.ResourceGroup.ReadMetaData(Terrasoft.Common.DataReader)">
            <summary>
            Выполняет десериализацию группы ресурсов с помощью заданного экземпляра 
            <see cref="T:Terrasoft.Common.DataReader"/>. 
            </summary>
            <param name="reader">
            Экземпляр <see cref = "T:Terrasoft.Common.DataReader"/>, с помощью которого осуществляется десериализация.
            </param>
            <exception cref="T:Newtonsoft.Json.JsonSerializationException">
            Если метаданные содержат неизвестный элемент. 
            </exception>
        </member>
        <member name="M:Terrasoft.Common.ResourceGroup.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Выполняет сериализацию группы ресурсов с помощью заданного экземпляра 
            <see cref="T:Terrasoft.Common.DataWriter"/>.
            </summary>
            <param name="writer">
            Экземпляр <see cref="T:Terrasoft.Common.DataWriter"/>, с помощью которого осуществляется сериализация.
            </param>
        </member>
        <member name="M:Terrasoft.Common.ResourceGroup.ReadXml(System.Xml.XmlReader)">
            <summary>
            Выполняет десериализацию группы ресурсов с помощью заданного экземпляра <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="reader">
            Экземпляр <see cref="T:System.Xml.XmlReader"/>, с помощью которого осуществляется десериализация.
            </param>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">
            Если для текущей группы ресурсов не определен пакет ресурсов.
            </exception>
        </member>
        <member name="M:Terrasoft.Common.ResourceGroup.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Выполняет сериализацию группы ресурсов с помощью заданного экземпляра <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer">
            Экземпляр <see cref="T:System.Xml.XmlWriter"/>, с помощью которого осуществляется сериализация.
            </param>
        </member>
        <member name="M:Terrasoft.Common.ResourceGroup.FindItemByName(System.String)">
            <summary>
            Выполняет поиск ресурса с заданным именем в текущей группе ресурсов и ее подгруппах.
            </summary>
            <param name="name">
            Имя искомого ресурса.
            </param>
            <returns>
            Первый найденный ресурс с именем <paramref name="name"/> в текущей группе ресурсов и в 
            ее подгруппах либо <c>null</c>, если элемент с таким именем не найден.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.ResourceGroup.GetItemByName(System.String)">
            <summary>
            Возвращает ресурс с заданным именем из текущей группы ресурсов и ее подгрупп либо 
            генерирует исключение, если ресурса с таким именем не найдено.
            </summary>
            <param name="name">
            Имя искомого ресурса.
            </param>
            <returns>
            Первый найденный ресурс с именем <paramref name="name"/> в текущей группе ресурсов и ее подгруппах.
            </returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Если в текущей группе ресурсов и ее подгруппах
            ресурс с именем <paramref name="name"/> не найден.</exception>
        </member>
        <member name="T:Terrasoft.Common.ResourceGroupCollection">
            <summary>
            Предоставляет методы для работы с коллекцией групп ресурсов.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.ResourceGroupCollection.Package">
            <summary>
            Пакет ресурсов для текущей коллекции групп ресурсов. 
            </summary>
        </member>
        <member name="P:Terrasoft.Common.ResourceGroupCollection.ParentGroup">
            <summary>
            Родительская группа для текущей коллекции групп ресурсов.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.ResourceGroupCollection.InsertItem(System.Int32,Terrasoft.Common.ResourceGroup)">
            <summary>
            Добавляет заданную группу ресурсов в текущую коллекцию по указанному индексу. 
            </summary>
            <param name="index">Индекс, по которому следует вставить группу ресурсов <paramref name="item"/>.</param>
            <param name="item">
            Группа ресурсов, которая добавляется в коллекцию.
            </param>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если для коллекции групп ресурсов не установлены 
            значения Package либо ParentGroup.</exception>
        </member>
        <member name="M:Terrasoft.Common.ResourceGroupCollection.SetItem(System.Int32,Terrasoft.Common.ResourceGroup)">
            <summary>
            Заменяет группу ресурсов в текущей коллекции по указанному индексу.
            </summary>
            <param name="index">
            Индекс элемента, который необходимо заменить.
            </param>
            <param name="item">
            Группа ресурсов, которая заменяет элемент коллекции по индексу <paramref name="index"/>.
            </param>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если для коллекции групп ресурсов не установлены 
            значения Package либо ParentGroup.</exception>
        </member>
        <member name="M:Terrasoft.Common.ResourceGroupCollection.RemoveItem(System.Int32)">
            <summary>
            Удаляет заданную группу из текущей коллекции по указанному индексу.
            </summary>
            <param name="index">
            Индекс элемента, который требуется удалить.
            </param>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если для коллекции групп ресурсов не установлены 
            значения Package либо ParentGroup.</exception>
        </member>
        <member name="M:Terrasoft.Common.ResourceGroupCollection.ClearItems">
            <summary>
            Удаляет все элементы из текущей коллекции.
            </summary>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если для коллекции группы ресурсов не установлены 
            значения Package либо ParentGroup.</exception>
        </member>
        <member name="M:Terrasoft.Common.ResourceGroupCollection.Add(System.String)">
            <summary>
            Добавляет в текущую коллекцию групп ресурсов новую группу с заданным именем.
            </summary>
            <param name="name">
            Имя добавляемой группы ресурсов.
            </param>
            <returns>
            Добавленная в текущую коллекцию группа с именем <paramref name="name"/>.
            </returns>
        </member>
        <member name="T:Terrasoft.Common.ResourceItem">
            <summary>
            Базовый класс для представления элемента ресурса.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.ResourceItem.Id">
            <summary>
            Идентификатор ресурса.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.ResourceItem.StringValue">
            <summary>
            Значение ресурса типа <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.ResourceItem.ImageValue">
            <summary>
            Значение ресурса типа <see cref="T:System.Drawing.Image"/>.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.ResourceItem.FileValue">
            <summary>
            Значение ресурса типа массива байтов.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.ResourceItem.ReadMetaData(Terrasoft.Common.DataReader)">
            <summary>
            Выполняет десериализацию ресурса с помощью заданного экземпляра <see cref="T:Terrasoft.Common.DataReader"/>.
            </summary>
            <param name="reader">
            Экземпляр <see cref="T:Terrasoft.Common.DataReader"/>, с помощью которого осуществляется десериализация.
            </param>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException"> 
            Если в метаданных указан недопустимый идентификатор ресурса.</exception>
            <exception cref="T:Newtonsoft.Json.JsonSerializationException">
            Если метаданные содержат неизвестный вложенный элемент.</exception>
        </member>
        <member name="M:Terrasoft.Common.ResourceItem.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Выполняет сериализацию ресурса с помощью заданного экземпляра <see cref="T:Terrasoft.Common.DataWriter"/>.
            </summary>
            <param name="writer">
            Экземпляр <see cref="T:Terrasoft.Common.DataWriter"/>, с помощью которого осуществляется сериализация.
            </param>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если для сериализуемого ресурса не указан его тип.</exception>
        </member>
        <member name="M:Terrasoft.Common.ResourceItem.ReadXml(System.Xml.XmlReader)">
            <summary>
            Выполняет десериализацию ресурса с помощью заданного экземпляра <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="reader">
            Экземпляр <see cref="T:System.Xml.XmlReader"/>, с помощью которого осуществляется десериализация.
            </param>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если в метаданных указан недопустимый идентификатор 
            ресурса.</exception>
        </member>
        <member name="M:Terrasoft.Common.ResourceItem.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Выполняет сериализацию ресурса с помощью заданного экземпляра <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer">
            Экземпляр <see cref="T:System.Xml.XmlWriter"/>, с помощью которого осуществляется сериализация.
            </param>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если не указан тип сериализуемого ресурса.</exception>
        </member>
        <member name="T:Terrasoft.Common.XmlResourceReader">
            <summary>
            Предоставляет методы для чтения метаданных ресурсов в формате Xml.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.XmlResourceReader.#ctor(System.IO.Stream)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Common.XmlResourceReader"/> с указанным потоком.
            </summary>
            <param name="source">Поток, содержащий метаданные ресурсов.</param>
        </member>
        <member name="P:Terrasoft.Common.XmlResourceReader.ResourcesDirectory">
            <summary>
            Директория, в которой расположены файлы ресурсов.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.XmlResourceWriter">
            <summary>
            Предоставляет методы для записи метаданных ресурсов в формат Xml.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.XmlResourceWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Common.XmlResourceWriter"/>, используя заданный 
            <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="textWriter">
            Экземпляр <see cref="T:System.IO.TextWriter"/>, с помощью которого осуществляется запись.</param>
        </member>
        <member name="M:Terrasoft.Common.XmlResourceWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Common.XmlResourceWriter"/>, используя заданные поток
            вывода и кодировку. 
            </summary>
            <param name="stream">Поток вывода.</param>
            <param name="encoding">Кодировка.</param>
        </member>
        <member name="M:Terrasoft.Common.XmlResourceWriter.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Common.XmlResourceWriter"/>, используя заданный путь к
            файлу и заданную кодировку.
            </summary>
            <param name="filePath">Путь к файлу.</param>
            <param name="encoding">Кодировка.</param>
        </member>
        <member name="P:Terrasoft.Common.XmlResourceWriter.OutputDirectory">
            <summary>
            Директория в которой располагаются файлы ресурсов.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.ResourceItemCollection">
            <summary>
            Предоставляет методы для работы с коллекцией элементов ресурсов.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.ResourceItemCollection.Package">
            <summary>
            Пакет ресурсов для текущей коллекции элементов ресурсов.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.ResourceItemCollection.ParentGroup">
            <summary>
            Родительская группа для текущей коллекции элементов ресурсов.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.ResourceItemCollection.InsertItem(System.Int32,Terrasoft.Common.ResourceItem)">
            <summary>
            Adds an element into the current collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The resource item to insert.</param>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Raises when the Package or ParentGroup properties are not set
            for current collection.</exception>
            <remarks>If the item with the same name exists in the collection, it is replaced with the inserted item,
            in this case passed index value is ignored. This behavior may be changed to throwing an exception
            in case of duplicated items in the next releases.</remarks>
        </member>
        <member name="M:Terrasoft.Common.ResourceItemCollection.SetItem(System.Int32,Terrasoft.Common.ResourceItem)">
            <summary>
            Заменяет элемент текущей коллекции элементов ресурсов по указанному индексу заданным ресурсом.
            </summary>
            <param name="index">
            Индекс элемента, который необходимо заменить.
            </param>
            <param name="item">
            Ресурс, который заменяет элемент коллекции элементов ресурсов по индексу <paramref name="index"/>.
            </param>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если для текущей коллекции элементов ресурсов не установлены 
            значения Package либо ParentGroup.</exception>
        </member>
        <member name="M:Terrasoft.Common.ResourceItemCollection.RemoveItem(System.Int32)">
            <summary>
            Удаляет ресурс по указанному индексу в текущей коллекции элементов ресурсов.
            </summary>
            <param name="index">
            Индекс ресурса, который требуется удалить.
            </param>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если для текущей коллекции элементов ресурсов не установлены 
            значения Package либо ParentGroup.</exception>
        </member>
        <member name="M:Terrasoft.Common.ResourceItemCollection.ClearItems">
            <summary>
            Удаляет все элементы из текущей коллекции элементов ресурсов.
            </summary>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если для текущей коллекции элементов ресурсов не установлены 
            значения Package либо ParentGroup.</exception>
        </member>
        <member name="M:Terrasoft.Common.ResourceItemCollection.AddIfNotExists(Terrasoft.Common.ResourceItem)">
            <summary>
            Добавляет ресурс в коллекцию элементов ресурсов, если он в нее не входит. 
            </summary>
            <param name="item">
            Добавляемый ресурс.
            </param>
        </member>
        <member name="M:Terrasoft.Common.ResourceItemCollection.GetSchema">
            <summary>
            Возвращает Xml-схему представления данного ресурса.
            </summary>
            <returns>
            Xml-схема представления данного ресурса.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.ResourceItemCollection.ReadMetaData(Terrasoft.Common.DataReader)">
            <summary>
            Выполняет десериализацию коллекции элементов ресурсов из заданного экземпляра 
            <see cref="T:Terrasoft.Common.DataReader"/> и добавляет ее в текущую коллекцию элементов ресурсов.
            </summary>
            <param name="reader">
            Экземпляр <see cref="T:Terrasoft.Common.DataReader"/>, из которого осуществляется десериализация.
            </param>
        </member>
        <member name="M:Terrasoft.Common.ResourceItemCollection.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Выполняет сериализацию коллекции элементов ресурсов в заданный экземпляр 
            <see cref="T:Terrasoft.Common.DataWriter"/>.
            </summary>
            <param name="writer">
            Экземпляр <see cref="T:Terrasoft.Common.DataWriter"/>, в который осуществляется сериализация.
            </param>
        </member>
        <member name="M:Terrasoft.Common.ResourceItemCollection.ReadXml(System.Xml.XmlReader)">
            <summary>
            Выполняет десериализацию коллекции элементов ресурсов из заданного экземпляра 
            <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="reader">
            Экземпляр <see cref="T:System.Xml.XmlReader"/>, из которого осуществляется десериализация.
            </param>
        </member>
        <member name="M:Terrasoft.Common.ResourceItemCollection.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Выполняет сериализацию коллекции элементов ресурсов в заданный экземпляр <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer">
            Экземпляр <see cref="T:System.Xml.XmlWriter"/>, в который осуществляется сериализация.
            </param>
        </member>
        <member name="T:Terrasoft.Common.ResourceManagerCollection">
            <summary>
            Представляет методы для работы с коллекцией менеджеров ресурсов.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.ResourceManagerCollection.Add(Terrasoft.Common.IResourceManager)">
            <summary>
            Добавляет заданный менеджер ресурсов в текущую коллекцию.
            </summary>
            <param name="manager">Добавляемый менеджер ресурсов.</param>
            <exception cref="T:System.ArgumentNullException">При передаче в качестве параметра <paramref name="manager"/> 
            значения типа <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Common.ResourceManagerCollection.Remove(System.String)">
            <summary>
            Удаляет менеджер ресурсов с заданным именем из текущей коллекции. 
            </summary>
            <param name="managerName">Имя удаляемого менеджера ресурсов.</param>
            <returns>
            <c>true</c>, если менеджер ресурсов <paramref name="managerName"/> успешно удален из текущей коллекции;
            иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.ResourceManagerCollection.FindByName(System.String)">
            <summary>
            Осуществляет поиск менеджера ресурсов с заданным именем в текущей коллекции.
            </summary>
            <param name="name">Имя менеджера ресурсов для поиска.</param>
            <returns>Менеджер ресурсов с именем <paramref name="name"/> либо <c>null</c>, если
            менеджер ресурсов с таким именем в текущей коллекции не найден.</returns>
        </member>
        <member name="M:Terrasoft.Common.ResourceManagerCollection.GetByName(System.String)">
            <summary>
            Возвращает менеджер ресурсов с заданным именем либо генерирует исключение, если 
            менеджер с таким именем в текущей коллекции не найден.
            </summary>
            <param name="name">Имя менеджера ресурсов.</param>
            <returns>
            Менеджер ресурсов с именем <paramref name="name"/>.
            </returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Если менеджер ресурсов с именем <paramref name="name"/> в текущей
            коллекции не найден.</exception>
        </member>
        <member name="M:Terrasoft.Common.ResourceManagerCollection.GetEnumerator">
            <summary>
            Возвращает перечислитель для итерации по элементам коллекции менеджеров ресурсов.
            </summary>
            <returns>
            Объект <see cref="T:System.Collections.Generic.IEnumerator`1"/> который может использоваться для итерации элементов 
            коллекции менеджеров ресурсов. 
            </returns>
        </member>
        <member name="T:Terrasoft.Common.ResourcePackage">
            <summary>
            Предоставляет методы работы с пакетом ресурсов.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.ResourcePackage.#ctor">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.ResourcePackage"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.ResourcePackage.#ctor(System.String)">
            <summary>
            Инициализирует экземпляр класса <see cref="T:Terrasoft.Common.ResourcePackage"/> для культуры с заданным 
            именем.
            </summary>
            <param name="cultureName">Имя культуры.</param>
            <exception cref="T:Terrasoft.Common.NullOrEmptyException">При передаче в качестве параметра <paramref name="cultureName"/>
            пустого значения или <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Common.ResourcePackage.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Инициализирует экземпляр класса <see cref="T:Terrasoft.Common.ResourcePackage"/> для заданной культуры.
            </summary>
            <param name="culture">Культура.</param>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">При передаче в качестве параметра <paramref name="culture"/>
            пустого значения или <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Common.ResourcePackage.#ctor(System.Collections.Generic.ICollection{Terrasoft.Common.LocalizableValue},System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Инициализирует экземпляр класса <see cref="T:Terrasoft.Common.ResourcePackage"/>, используя заданные коллекцию
            локализуемых значений, объект культуры и признак оптимизации коллекции.
            </summary>
            <param name="localizableValues">Коллекция локализуемых значений.</param>
            <param name="culture">Культура.</param>
            <param name="optimize">Признак оптимизации коллекции локализуемых значений.</param>
        </member>
        <member name="P:Terrasoft.Common.ResourcePackage.Culture">
            <summary>
            Культура текущего пакета ресурсов.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.ResourcePackage.RootGroup">
            <summary>
            Корневая группа ресурсов текущего пакета ресурсов.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.ResourcePackage.MoveItemToParentGroupAndRemoveGroup(Terrasoft.Common.ResourceGroup)">
            <summary>
            Перемещает первый ресурс из заданной группы ресурсов в текущую и удаляет заданную группу ресурсов.
            </summary>
            <param name="currentGroup">
            Имя группы ресурсов, откуда осуществляется перемещение.
            </param>
        </member>
        <member name="M:Terrasoft.Common.ResourcePackage.CreateFromStream(System.IO.Stream)">
            <summary>
            Creates resource package from stream.
            </summary>
            <param name="stream">Stream to create resource package from.</param>
            <returns>
            Resource package.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.ResourcePackage.CreateFromFile(System.String)">
            <summary>
            Формирует пакет ресурсов из файла, расположенного по заданному пути.
            </summary>
            <param name="filePath">
            Путь к файлу.
            </param>
            <returns>
            Сформированный пакет ресурсов.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.ResourcePackage.SaveToFile(System.String)">
            <summary>
            Выполняет сериализацию текущего пакета ресурсов в файл, расположенный по заданному пути.
            </summary>
            <param name="filePath">
            Путь к файлу.
            </param>
        </member>
        <member name="M:Terrasoft.Common.ResourcePackage.SaveToStream(Terrasoft.Common.XmlResourceWriter)">
            <summary>
            Выполняет сериализацию текущего пакета ресурсов с помощью заданного <see cref = "T:Terrasoft.Common.XmlResourceWriter"/>.
            </summary>
            <param name="xmlResourceWriter">
            Экземпляр <see cref = "T:Terrasoft.Common.XmlResourceWriter"/>, с помощью которого осущеcтвляется запись.
            </param>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если для текущего пакета ресурсов не установлено значение 
            культуры.</exception>
        </member>
        <member name="M:Terrasoft.Common.ResourcePackage.GetSchema">
            <summary>
            Возвращает Xml-схему представления пакета ресурсов.
            </summary>
            <returns>
            Xml-схема представления пакета ресурсов.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.ResourcePackage.ReadMetaData(Terrasoft.Common.DataReader)">
            <summary>
            Выполняет десериализацию текущего пакета ресурсов с помощью заданного 
            <see cref="T:Terrasoft.Common.DataReader"/>.
            </summary>
            <param name="reader">
            Экземпляр <see cref="T:Terrasoft.Common.DataReader"/>, с помощью которого осуществляется десериализация.
            </param>
        </member>
        <member name="M:Terrasoft.Common.ResourcePackage.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Выполняет сериализацию пакета ресурсов с помощью заданного экземпляра 
            <see cref="T:Terrasoft.Common.DataWriter"/>.
            </summary>
            <param name="writer">
            Экземпляр <see cref="T:Terrasoft.Common.DataWriter"/>, с помощью которого осуществляется сериализация.
            </param>
        </member>
        <member name="M:Terrasoft.Common.ResourcePackage.ReadXml(System.Xml.XmlReader)">
            <summary>
            Выполняет десериализацию пакета ресурсов с помощью заданного экземпляра 
            <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="reader">
            Экземпляр <see cref="T:System.Xml.XmlReader"/>, с помощью которого осуществляется десериализация.
            </param>
        </member>
        <member name="M:Terrasoft.Common.ResourcePackage.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Выполняет сериализацию пакета ресурсов с помощью заданного экземпляра <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer">
            Экземпляр <see cref="T:System.Xml.XmlWriter"/>, с помощью которого осуществляется сериализация.
            </param>
        </member>
        <member name="M:Terrasoft.Common.ResourcePackage.DeleteResource(System.String)">
            <summary>
            Выполняет удаление ресурса с заданным именем из текущего пакета ресурсов.
            </summary>
            <param name="name">Имя удаляемого ресурса.</param>
            <returns>
            <c>true</c>, если ресурс с именем <paramref name="name"/> был успешно удален из пакета ресурсов; 
            иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.ResourcePackage.RenameResource(System.String,System.String)">
            <summary>
            Переименовывает ресурс с заданным именем в текущем пакете ресурсов.
            </summary>
            <param name="oldName">
            Имя ресурса, который переименовывается.
            </param>
            <param name="name">
            Новое имя ресурса с именем <paramref name="oldName"/>.
            </param>
            <returns>
            <c>true</c>, если ресурсу с именем <paramref name="oldName"/> было успешно присвоено новое имя 
            <paramref name="name"/>; иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.ResourcePackage.SetResourceValue(System.String,System.String)">
            <summary>
            Устанавливает значение ресурсу с заданным именем в текущем пакете ресурсов.
            </summary>
            <param name="name">Имя ресурса.</param>
            <param name="value">Устанавливаемое значение ресурса.</param>
        </member>
        <member name="M:Terrasoft.Common.ResourcePackage.FindItemByName(System.String)">
            <summary>
            Выполняет поиск ресурса с заданным именем в текущем пакете ресурсов.
            </summary>
            <param name="name">
            Имя искомого ресурса.
            </param>
            <returns>
            Первый найденный ресурс с именем <paramref name="name"/> в текущем пакете ресурсов либо <c>null</c>, 
            если ресурс с таким именем не найден.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.ResourcePackage.GetItemByName(System.String)">
            <summary>
            Возвращает элемент ресурса с заданным именем из текущего пакета ресурсов.
            </summary>
            <param name="name">Имя искомого ресурса.</param>
            <returns>
            Найденный ресурс с именем <paramref name="name"/> в текущем пакете ресурсов.
            </returns>
        </member>
        <member name="T:Terrasoft.Common.ResultMessage">
            <summary>
            Содержит текст сообщения и его тип
            </summary>
        </member>
        <member name="M:Terrasoft.Common.ResultMessage.#ctor(Terrasoft.Common.MessageType,System.String)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Common.ResultMessage"/> с заданным типом и текстом сообщения.
            </summary>
            <param name="messageType">Тип сообщения.</param>
            <param name="message">Текст сообщения.</param>
        </member>
        <member name="P:Terrasoft.Common.ResultMessage.MessageType">
            <summary>
            Тип сообщения.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.ResultMessage.Message">
            <summary>
            Текст сообщения.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.ResultMessageCollection">
            <summary>
            Коллекция сообщений <see cref="T:Terrasoft.Common.ResultMessage"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.ResultMessageCollection.AddError(System.String)">
            <summary>
            Добавляет в коллекцию сообщение с типом <see cref="F:Terrasoft.Common.MessageType.Error"/>.
            </summary>
            <param name="message">Текст сообщения.</param>
        </member>
        <member name="M:Terrasoft.Common.ResultMessageCollection.AddInfo(System.String)">
            <summary>
            Добавляет в коллекцию сообщение с типом <see cref="F:Terrasoft.Common.MessageType.Information"/>.
            </summary>
            <param name="message">Текст сообщения.</param>
        </member>
        <member name="M:Terrasoft.Common.ResultMessageCollection.AddWarning(System.String)">
            <summary>
            Добавляет в коллекцию сообщение с типом <see cref="F:Terrasoft.Common.MessageType.Warning"/>.
            </summary>
            <param name="message">Текст сообщения.</param>
        </member>
        <member name="T:Terrasoft.Common.SerializationUtilities">
            <summary>
            Provides helper methods for serialization using <see cref="T:System.Runtime.Serialization.ISerializable"/> interface.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.SerializationUtilities.GetVersion(System.Runtime.Serialization.SerializationInfo)">
            <summary>
            Gets the contract version.
            </summary>
            <param name="source">The serialization info.</param>
            <returns>Version or <code>0</code> if provided serialization info does not contain version.</returns>
        </member>
        <member name="M:Terrasoft.Common.SerializationUtilities.AddVersion(System.Runtime.Serialization.SerializationInfo,System.UInt32)">
            <summary>
            Adds the version to <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.
            </summary>
            <param name="source">The serialization info.</param>
            <param name="version">The version value.</param>
        </member>
        <member name="T:Terrasoft.Common.Serialization.BinarySerializer">
            <summary>
            Serializes and deserializes an object, or an entire graph of connected objects, in binary format.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.Serialization.BinarySerializer.Serialize(System.Object)">
            <summary>
            Serializes an object, or graph of connected objects, to the byte array.
            </summary>
            <param name="value">The object at the root of the graph to serialize.</param>
            <returns>Byte array.</returns>
        </member>
        <member name="M:Terrasoft.Common.Serialization.BinarySerializer.Deserialize``1(System.Byte[])">
            <summary>
            Deserializes the specified byte array into an object graph.
            </summary>
            <typeparam name="T">The value of any type.</typeparam>
            <param name="data">Byte array.</param>
            <returns>Deserialized value.</returns>
        </member>
        <member name="M:Terrasoft.Common.Serialization.BinarySerializer.Deserialize(System.Byte[])">
            <summary>
            Deserializes the specified byte array into an object graph.
            </summary>
            <param name="data">Byte array.</param>
            <returns>Deserialized value.</returns>
        </member>
        <member name="T:Terrasoft.Common.Serialization.ConcurrentDictionarySerializationSurrogate">
            <summary>
            Implements a serialization surrogate selector that allows to perform serialization and deserialization
            instances of the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> type.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.Serialization.ConcurrentDictionarySerializationSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.Serialization.ConcurrentDictionarySerializationSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <inheritdoc />
        </member>
        <member name="T:Terrasoft.Common.Serialization.CultureInfoSerializationSurrogate">
            <summary>
            Implements a serialization surrogate selector that allows to perform serialization and deserialization
            instances of the <see cref="T:System.Globalization.CultureInfo"/> type.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.Serialization.CultureInfoSerializationSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.Serialization.CultureInfoSerializationSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <inheritdoc />
        </member>
        <member name="T:Terrasoft.Common.Serialization.SerializationModes">
            <summary>
            Serialization modes.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.Serialization.IBinarySerializer">
            <summary>
            Serializes and deserializes an object, or an entire graph of connected objects, in binary format.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.Serialization.IBinarySerializer.Serialize(System.Type,System.Object,Terrasoft.Common.Serialization.SerializationModes)">
            <summary>
            Serializes object with specified <paramref name="mode"/>.
            </summary>
            <param name="type">Type.</param>
            <param name="obj">Instance to serialize.</param>
            <param name="mode">Mode.</param>
            <returns>Byte[].</returns>
        </member>
        <member name="M:Terrasoft.Common.Serialization.IBinarySerializer.SerializeTypeless(System.Object)">
            <summary>
            Serializes object with embedding type names for object fields or collection items. Should be used when
            object structure is not well known.
            </summary>
            <param name="obj">The object to serialize.</param>
            <returns>The serialization result.</returns>
        </member>
        <member name="M:Terrasoft.Common.Serialization.IBinarySerializer.Deserialize(System.Type,System.ReadOnlyMemory{System.Byte},Terrasoft.Common.Serialization.SerializationModes)">
            <summary>
            Deserializes object, serialized with specified <paramref name="mode"/>.
            </summary>
            <param name="type">Type.</param>
            <param name="data">Data.</param>
            <param name="mode">Mode.</param>
            <returns>Object.</returns>
        </member>
        <member name="M:Terrasoft.Common.Serialization.IBinarySerializer.DeserializeTypeless``1(System.Byte[])">
            <summary>
            Deserializes the object using embedded into data type names. Should be used only for bytes received as
            result of <see cref="M:Terrasoft.Common.Serialization.IBinarySerializer.SerializeTypeless(System.Object)"/> method.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="bytes">The bytes.</param>
            <returns>Deserialized object casted to <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Terrasoft.Common.Serialization.IBinarySerializer.TrySerializeTypeless(System.Object,System.Byte[]@)">
            <summary>Tries to serialize object with <see cref="M:Terrasoft.Common.Serialization.IBinarySerializer.SerializeTypeless(System.Object)"/> method.</summary>
            <param name="obj">The object.</param>
            <param name="bytes">The serialization result.</param>
            <returns><c>true</c> if object was serialized, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Common.Serialization.IBinarySerializer.SerializeWithCompression``1(``0)">
            <summary>
            Serializes object with compression.
            </summary>
            <param name="obj">Object to serialize.</param>
            <typeparam name="T">Type of the object to serialize.</typeparam>
            <returns>The serialization result.</returns>
        </member>
        <member name="M:Terrasoft.Common.Serialization.IBinarySerializer.SerializeWithCompression(System.Type,System.Object)">
            <summary>
            Serializes object with compression.
            </summary>
            <param name="type">Type of the object to serialize.</param>
            <param name="obj">Object to serialize.</param>
            <returns>The serialization result.</returns>
        </member>
        <member name="M:Terrasoft.Common.Serialization.IBinarySerializer.DeserializeWithCompression``1(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Deserializes the object that was serialized with compression.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="data">The bytes.</param>
            <returns>Deserialized object casted to <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Terrasoft.Common.Serialization.IBinarySerializer.DeserializeWithCompression(System.Type,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Deserializes the object that was serialized with compression.
            </summary>
            <param name="type">The type of the object.</param>
            <param name="data">The bytes.</param>
        </member>
        <member name="T:Terrasoft.Common.Serialization.NonSerializableSurrogateSelector">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.Serialization.NonSerializableSurrogateSelector.ChainSelector(System.Runtime.Serialization.ISurrogateSelector)">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.Serialization.NonSerializableSurrogateSelector.GetSurrogate(System.Type,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector@)">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.Serialization.NonSerializableSurrogateSelector.GetNextSelector">
            <inheritdoc />
        </member>
        <member name="T:Terrasoft.Common.ServerInfoUtilities">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.ServerInfoUtilities.GetServerIPAddress">
            <summary>
            Returns server's IP address.
            </summary>
            <returns>IP address string.</returns>
        </member>
        <member name="M:Terrasoft.Common.ServerInfoUtilities.GetServerIP4Address">
            <summary>
            Returns server's IPv4 address.
            </summary>
            <returns>IPv4 address string.</returns>
        </member>
        <member name="M:Terrasoft.Common.ServiceStackTextHelper.DeserializeFromStream(System.IO.Stream,System.Type)">
            <summary>
            Deserializes stream content to required type.
            </summary>
            <param name="value">Instance of the <see cref="T:System.IO.Stream"/> to deserialize from.</param>
            <param name="type">Instance of the <see cref="T:System.Type"/> to deserialize to.</param>
            <returns>Deserialized instance of the <paramref name="type"/> type.</returns>
        </member>
        <member name="T:Terrasoft.Common.StreamUtilities">
            <summary>
            Содержит служебные методы для работы с потоками.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.StreamUtilities.CopiedStreamBufferLength">
            <summary>
            Максимальное количество байтов, которое должно быть считано из текущего потока.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.StreamUtilities.ReadStreamBufferLength">
            <summary>
            Количество байтов, которое должно быть считано из текущего потока.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.StreamUtilities.ConcatTwoStreams(System.IO.Stream,System.IO.Stream)">
            <summary>
            Concatenates two streams to a new one
            </summary>
            <param name="bufferContent">First stream to concatenate</param>
            <param name="content">Second stream to concatenate</param>
            <returns>New stream which contains two streams from parameters</returns>
        </member>
        <member name="M:Terrasoft.Common.StreamUtilities.GetStreamContent(System.IO.Stream)">
            <summary>
            Строковое представление содержимого потока.
            </summary>
            <param name="source">Поток.</param>
            <returns>Содержимое потока в виде строки (от текущего положения до конца).</returns>
            <remarks>Для чтения содержимого потока используется стандартный метод <c>ReadToEnd()</c>
            класса <see cref="T:System.IO.StreamReader"/>.</remarks>
        </member>
        <member name="M:Terrasoft.Common.StreamUtilities.Write(System.IO.Stream,System.IO.Stream)">
            <summary>
            Запись в поток.
            </summary>
            <param name="source">Поток - источник.</param>
            <param name="value">Поток - приемник.</param>
            <remarks>
            <para>Расширяемый метод</para>
            <para>Запись в поток - приемник осуществляется блоками по
            <see cref = "F:Terrasoft.Common.StreamUtilities.CopiedStreamBufferLength"/> байт. После записи текущая позиция в потоке -
            источнике возвращается в исходное положение.</para>
            </remarks>
        </member>
        <member name="M:Terrasoft.Common.StreamUtilities.WriteTo(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies all the data from one stream into another.
            </summary>
            <param name="source">Source stream.</param>
            <param name="targetStream">Target stream.</param>
        </member>
        <member name="M:Terrasoft.Common.StreamUtilities.ReadAllBytes(System.IO.Stream)">
            <summary>
            Reads all bytes from beginning of the stream, restores initial position.
            Please use <see cref="M:Terrasoft.Common.StreamUtilities.ReadToEnd(System.IO.Stream)"/> method when only reading stream content is required.
            This method should be used only in specific cases, and when source stream supports
            <see cref="P:System.IO.Stream.Position"/> and <see cref="P:System.IO.Stream.Length"/> properties.
            </summary>
            <param name="source">Source stream.</param>
            <returns>Stream bytes.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Terrasoft.Common.StreamUtilities.ReadToEnd(System.IO.Stream)">
            <summary>
            Reads all bytes from stream.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.StreamUtilities.GetAllBytes(System.IO.Stream)">
            <summary>
            Reads all bytes from stream, restores initial position.
            Please use <see cref="M:Terrasoft.Common.StreamUtilities.ReadToEnd(System.IO.Stream)"/> method when only reading stream content is required.
            </summary>
            <param name="source">Source stream.</param>
            <returns>Stream bytes.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Terrasoft.Common.StreamUtilities.IsNullOrEmpty(System.IO.Stream)">
            <summary>
            Checking if a stream is null or empty.
            </summary>
            <param name="source">Source stream.</param>
        </member>
        <member name="M:Terrasoft.Common.StreamUtilities.SaveToFile(System.IO.Stream,System.String)">
            <summary>
            Сохранение потока в файл.
            </summary>
            <param name="source">Поток - источник.</param>
            <param name="filePath">Путь к файлу.</param>
            <exception cref="T:System.ArgumentNullException">При передаче в качестве параметра <paramref name="source"/>
            значения <c>null</c>.
            </exception>
        </member>
        <member name="T:Terrasoft.Common.StringUtilities">
            <summary>
            Предоставляет методы работы со строками.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.Format(Terrasoft.Common.LocalizableString,System.Object[])">
            <summary>
            Returns string formatted with <see cref="M:System.String.Format(System.String,System.Object[])"/> if <paramref name="source"/>
            value is not empty, otherwise returns its <see cref="P:Terrasoft.Common.LocalizableValue.ResourceItemName"/> and
            <paramref name="args"/>.
            </summary>
            <param name="source">Localizable string to use value of.</param>
            <param name="args"><see cref="M:System.String.Format(System.String,System.Object[])"/> arguments.</param>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.LeftOf(System.String,System.Char)">
            <summary>
            Возвращает подстроку, расположенную в данном экземпляре слева от первого вхождения заданного символа.
            </summary>
            <param name="source">Строка.</param>
            <param name="value">Символ, относительно которого строится возвращаемая подстрока.</param>
            <returns>Строка, эквивалентная подстроке, которая начинается с 0 позиции в данном экземпляре, и имеет длину,
            равную позиции первого вхождения заданного символа в данный экземпляр.</returns>
            <remarks>
            <para>Перегруженный метод.</para>
            <para>Расширяемый метод для класса <see cref="T:System.String"/>.</para></remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.LeftOf(System.String,System.String)">
            <summary>
            Возвращает подстроку, расположенную в данном экземпляре слева от первого вхождения заданной подстроки.
            </summary>
            <param name="source">Строка.</param>
            <param name="value">Подстрока, относительно которой строится возвращаемая подстрока.</param>
            <returns>Строка, эквивалентная подстроке, которая начинается с 0 позиции в данном экземпляре, и имеет длину,
            равную позиции первого вхождения заданной подстроки в данный экземпляр.</returns>
            <remarks>Перегруженный метод. Расширяемый метод для класса <see cref="T:System.String"/>.
            <para>Перегруженный метод.</para>
            <para>Расширяемый метод для класса <see cref="T:System.String"/>.</para>
            </remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.LeftOf(System.String,System.Char,System.Int32)">
            <summary>
            Возвращает подстроку, расположенную в данном экземпляре слева от заданного символа начиная с заданной
            позиции.</summary>
            <param name="source">Строка.</param>
            <param name="value">Символ.</param>
            <param name="index">Позиция.</param>
            <returns>Строка, эквивалентная подстроке, которая начинается с 0 позиции в данном экземпляре, и имеет длину,
            равную позиции первого вхождения заданного символа в данный экземпляр. Поиск символа осуществляется с
            позиции <paramref name="index"/>.</returns>
            <remarks>Перегруженный метод. Расширяемый метод для класса <see cref="T:System.String"/>.
            <para>Перегруженный метод.</para>
            <para>Расширяемый метод для класса <see cref="T:System.String"/>.</para>
            </remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.LeftOfRightmostOf(System.String,System.Char)">
            <summary>
            Возвращает подстроку, расположенную в данном экземпляре слева от заданного символа.
            </summary>
            <param name="source">Строка.</param>
            <param name="value">Символ.</param>
            <returns>Строка, эквивалентная подстроке, которая начинается с 0 позиции в данном экземпляре, и имеет длину,
            равную позиции последнего вхождения заданного символа в данный экземпляр.</returns>
            <remarks>Перегруженный метод.
            <para>Перегруженный метод.</para>
            <para>Расширяемый метод для класса <see cref="T:System.String"/>.</para></remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.LeftOfRightmostOf(System.String,System.String)">
            <summary>
            Возвращает подстроку, расположенную в данном экземпляре слева от последнего вхождения заданной подстроки.
            </summary>
            <param name="source">Строка.</param>
            <param name="value">Подстрока.</param>
            <returns>Строка, эквивалентная подстроке, которая начинается с 0 позиции в данном экземпляре, и имеет длину,
            равную позиции последнего вхождения заданной подстроки в данный экземпляр.</returns>
            <remarks>
            <para>Перегруженный метод. </para>
            <para>Расширяемый метод для класса <see cref="T:System.String"/>.</para></remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.RightOf(System.String,System.Char)">
            <summary>
            Возвращает подстроку, расположенную в данном экземпляре справа от первого вхождения заданного символа.
            </summary>
            <param name="source">Строка.</param>
            <param name="value">Символ.</param>
            <returns>Строка, эквивалентная подстроке, которая начинается с позиции первого вхождения заданного символа
            в данный экземпляр.</returns>
            <remarks>
            <para>Перегруженный метод. </para>
            <para>Расширяемый метод для класса <see cref="T:System.String"/>.</para></remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.RightOf(System.String,System.String)">
            <summary>
            Возвращает подстроку, расположенную в данном экземпляре справа от первого вхождения заданной подстроки.
            </summary>
            <param name="source">Строка.</param>
            <param name="value">Символ.</param>
            <returns>Строка, эквивалентная подстроке, которая начинается с позиции первого вхождения заданной подстроки
            в данный экземпляр.</returns>
            <remarks>Перегруженный метод. Расширяемый метод для класса <see cref="T:System.String"/>.</remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.RightOf(System.String,System.Char,System.Int32)">
            <summary>
            Возвращает подстроку, расположенную в данном экземпляре справа от заданного символа начиная с заданной
            позиции. </summary>
            <param name="source">Строка.</param>
            <param name="value">Символ.</param>
            <param name="start">Позиция.</param>
            <returns>Строка, эквивалентная подстроке, которая начинается с позиции первого вхождения заданного символа
            в данный экземпляр. Поиск символа осуществляется с позиции <paramref name="start"/>.</returns>
            <remarks>Перегруженный метод. Расширяемый метод для класса <see cref="T:System.String"/>.</remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.RightOf(System.String,System.String,System.Int32)">
            <summary>
            Возвращает подстроку, расположенную в данном экземпляре справа от заданной подстроки начиная с заданной
            позиции.</summary>
            <param name="source">Строка.</param>
            <param name="value">Подстрока.</param>
            <param name="start">Позиция.</param>
            <returns>Строка, эквивалентная подстроке, которая начинается с позиции первого вхождения заданной подстроки
            в данный экземпляр. Поиск символа осуществляется с позиции <paramref name="start"/>.</returns>
            <remarks>Перегруженный метод. Расширяемый метод для класса <see cref="T:System.String"/>.</remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.RightOfRightmostOf(System.String,System.Char)">
            <summary>
            Возвращает подстроку, расположенную в данном экземпляре справа от заданного символа.
            </summary>
            <param name="source">Строка.</param>
            <param name="value">Символ.</param>
            <returns>Строка, эквивалентная подстроке, которая начинается с позиции последнего вхождения заданного
            символа в данный экземпляр.</returns>
            <remarks>Перегруженный метод. Расширяемый метод для класса <see cref="T:System.String"/>.</remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.RightOfRightmostOf(System.String,System.String)">
            <summary>
            Возвращает подстроку, расположенную в данном экземпляре справа от последнего вхождения заданной подстроки.
            </summary>
            <param name="source">Строка.</param>
            <param name="value">Подстрока.</param>
            <returns>Строка, эквивалентная подстроке, которая начинается с позиции последнего вхождения заданной
            подстроки в данный экземпляр.</returns>
            <remarks>Перегруженный метод. Расширяемый метод для класса <see cref="T:System.String"/>.</remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.EscapeSingleQuotes(System.String)">
            <summary>
            Escape single quotes.
            </summary>
            <param name="source">Source string.</param>
            <returns>String with shielded paws.</returns>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.EscapeBackslash(System.String)">
            <summary>
            Escape backslash.
            </summary>
            <param name="source">Source string.</param>
            <returns>String with escape backslash.</returns>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.ToSafeString(System.String)">
            <summary>
            Escapes backslashes and double quotes in source string.
            </summary>
            <param name="source">Source string.</param>
            <returns>String with escaped backslashes and double quotes.</returns>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.Between(System.String,System.String,System.String)">
            <summary>
            Returns substring of <paramref name="source"/> placed between <paramref name="startDelimiter"/>
            and <paramref name="endDelimiter"/>.
            When <paramref name="startDelimiter"/> or <paramref name="endDelimiter"/> not presented in
            <paramref name="source"/>
            returns <c>string.Empty</c>.
            </summary>
            <param name="source">Source string.</param>
            <param name="startDelimiter">Start delimeter string.</param>
            <param name="endDelimiter">End delimeter string.</param>
            <returns>Substring of <paramref name="source"/> placed between <paramref name="startDelimiter"/> and
            <paramref name="endDelimiter"/>.</returns>
            <remarks>
            <para>Extension method for <see cref="T:System.String"/> class.</para></remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.FormatForJavaScript(System.String)">
            <summary>
            Преобразует текущий экземпляр в соответствии с форматом скриптов JavaScript.
            </summary>
            <param name="source">Строка.</param>
            <returns>Строка, соответствующая формату скриптов JavaScript.</returns>
            <remarks>Расширяемый метод для класса <see cref="T:System.String"/>.</remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.FormatFromJavaScript(System.String)">
            <summary>
            Преобразует текущий экземпляр из формата скриптов JavaScript в стандартное представление.
            </summary>
            <param name="source">Строка.</param>
            <returns>Строка в стандартном представлении. </returns>
            <remarks>Расширяемый метод для класса <see cref="T:System.String"/>.</remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.ReplaceLastInstanceOf(System.String,System.String,System.String)">
            <summary>
            Заменяет последнее вхождение заданной строки в данном экземпляре другой заданной строкой.
            </summary>
            <param name="source">Строка.</param>
            <param name="oldValue">Строка, которую требуется заменить.</param>
            <param name="newValue">Строка для замены последнего вхождения <paramref name="oldValue"/>.</param>
            <returns>Строка, эквивалентная текущей строке, но с тем отличием, что дублируемые вхождения
            <paramref name="oldValue"/> заменены на <paramref name="newValue"/>.</returns>
            <remarks>Расширяемый метод для класса <see cref="T:System.String"/>.</remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.ReplaceFirstInstanceOf(System.String,System.String,System.String)">
            <summary>
            Returns a new string in which first occurrence of a specified string in the current instance
            are replaced with another specified string.
            </summary>
            <param name="source">Source string.</param>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
            <returns>Result string.</returns>
            <remarks>Extension method for the class <see cref="T:System.String"/>.</remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.AppendIfNotEmpty(System.Text.StringBuilder,System.String)">
            <summary>
            Добавляет заданную строку к данному экземпляру, если он не является пустым.
            </summary>
            <param name="source">Экземпляр <see cref="T:System.Text.StringBuilder"/>, к которому добавляется строка.
            </param>
            <param name="value">Добавляемая строка.</param>
            <returns>Экземпляр <see cref="T:System.Text.StringBuilder"/> после завершения операции добавления.</returns>
            <remarks>Расширяемый метод для класса <see cref="T:System.Text.StringBuilder"/>.</remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.IsNullOrWhiteSpaces(System.Text.StringBuilder)">
            <summary>
            Проверяет, является ли указанный экземпляр <see cref="T:System.Text.StringBuilder"/> значением <c>null</c>,
            пустой строкой или строкой, состоящей только из пробельных символов.
            </summary>
            <param name="source">Экземпляр <see cref="T:System.Text.StringBuilder"/>.</param>
            <returns><c>true</c>, если экземпляр является значением null, содержит пустую строку
            или строку, состоящую только из пробельных символов; в противном случае — <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.IsValidIdentifier(System.String)">
            <summary>
            Determines whether the specified string is a valid identifier.
            </summary>
            <param name="source">Source string.</param>
            <returns>
            <c>true</c>, if the specified string is a valid identifier. Otherwise returns <c>false</c>.
            </returns>
            <remarks>Extends the methods of the <see cref="T:System.String"/> class.</remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.IsValidVersion(System.String)">
            <summary>
            Определяет, является ли заданная строка допустимой версией.
            </summary>
            <param name="source">Строка.</param>
            <returns>
            <c>true</c>, если строка является допустимой версией; иначе - <c>false</c>.
            </returns>
            <remarks>Расширяемый метод для класса <see cref="T:System.String"/>.</remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.IsValidIdentifierOrEmpty(System.String)">
            <summary>
            Determines whether the specified string is a valid identifier or empty.
            </summary>
            <param name="source">Source string.</param>
            <returns>
            <c>true</c>, if the specified string is a valid identifier or empty. Otherwise returns <c>false</c>.
            </returns>
            <remarks>Extends the methods of the <see cref="T:System.String"/> class.</remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.IsValidNameOrEmpty(System.String)">
            <summary>
            Determines whether the specified string is a valid identifier or empty.
            </summary>
            <param name="source">String</param>
            <returns>
            <c>true</c>, if the specified string is a valid identifier or empty; otherwise - <c>false</c>.
            </returns>
            <remarks>Extend the methods for a class <see cref="T:System.String"/>.</remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.IsValidFileNameWithLocalCultures(System.String,System.String@)">
            <summary>
            Determines whether the specified string is a valid name for file in different culture.
            </summary>
            <param name="source">Source string.</param>
            <param name="errorMessage">Error message.</param>
            <returns>
            <c>true</c>, if the specified string is a valid name by all criteria. Otherwise returns <c>false</c>.
            </returns>
            <remarks>Extends the methods of the <see cref="T:System.String"/> class.</remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.IsValidGuid(System.String)">
            <summary>
            Определяет, является ли строка допустимым уникальным идентификатором.
            </summary>
            <param name="source">Строка.</param>
            <returns>
            <c>true</c>, если строка является допустимым уникальным идентификатором;
            иначе -<c>false</c>. </returns>
            <remarks>Расширяемый метод для класса <see cref="T:System.String"/>.</remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.IsValidColumnName(System.String)">
            <summary>
            Определяет, является ли заданная строка допустимым именем колонки.
            </summary>
            <param name="source">Строка.</param>
            <returns>
            <c>true</c>, если строка является действительным именем колонки; иначе - <c>false</c>.
            </returns>
            <remarks>Расширяемый метод для класса <see cref="T:System.String"/>.</remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.IsValidUsingName(System.String)">
            <summary>
            Determines whether the specified string is a valid using name.
            </summary>
            <param name="source">String</param>
            <returns>
            <c>true</c>, if the specified string is a valid using name; otherwise - <c>false</c>.
            </returns>
            <remarks>Extend the methods for a class <see cref="T:System.String"/>.</remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.IsValidFileName(System.String)">
            <summary>
            Determines whether the specified string is a valid file name.
            </summary>
            <param name="source">Source string.</param>
            <returns>
            <c>true</c>, if the specified string is a valid file name. Otherwise returns <c>false</c>.
            </returns>
            <remarks>Extends the methods of the <see cref="T:System.String"/> class.</remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.IsValidSqlScriptName(System.String)">
            <summary>
            Determines whether the specified string is a valid SQL script name.
            </summary>
            <param name="source">Source string.</param>
            <returns>
            <c>true</c>, if the specified string is a valid SQL script name. Otherwise returns <c>false</c>.
            </returns>
            <remarks>Extends the methods of the <see cref="T:System.String"/> class.</remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.IsValidPackageResourceName(System.String)">
            <summary>
            Determines whether the specified string is a valid package resource name.
            </summary>
            <param name="source">Source string.</param>
            <returns>
            <c>true</c>, if the specified string is a valid package resource name. Otherwise returns <c>false</c>.
            </returns>
            <remarks>Extends the methods of the <see cref="T:System.String"/> class.</remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.IsValidPackageName(System.String)">
            <summary>
            Determines whether the specified string is a valid package name.
            </summary>
            <param name="source">Source string.</param>
            <returns>
            <c>true</c>, if the specified string is a valid package name. Otherwise returns <c>false</c>.
            </returns>
            <remarks>Extends the methods of the <see cref="T:System.String"/> class.</remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.Replace(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            Заменяет в данном экземпляре все вхождения заданной строки на другую заданную строку с учетом заданных
            настроек сравнения (язык, региональные параметры, регистр, правила сортировки). </summary>
            <param name="source">Строка.</param>
            <param name="pattern">Строка, которую необходимо заменить.</param>
            <param name="replacement">Строка для замены всех вхождений <paramref name="pattern"/>.</param>
            <param name="comparisonType">Тип (настройки) сравнения.</param>
            <returns>Экземпляр, эквивалентный текущему, но с тем отличием, что все вхождения
            <paramref name="pattern"/> заменены на <paramref name="replacement"/>.</returns>
            <remarks>
            <para>Перегруженный метод. </para>
            <para>Расширяемый метод для класса <see cref="T:System.String"/>.</para></remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.Replace(System.String,System.Char[],System.Char)">
            <summary>
            Заменяет в данном экземпляре все вхождения заданного массива символов на другой заданный символ.
            </summary>
            <param name="source">Строка.</param>
            <param name="symbolsForReplace">Массив символов, который необходимо заменить.</param>
            <param name="replaceSymbol">Символ для замены всех вхождений <paramref name="source"/>.</param>
            <returns>
            Экземпляр, эквивалентный текущему, но с тем отличием, что все вхождения <paramref name="symbolsForReplace"/>
            заменены на <paramref name="replaceSymbol"/>.
            </returns>
            <remarks>
            <para>Перегруженный метод. </para>
            <para>Расширяемый метод для класса <see cref="T:System.String"/>.</para>
            </remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.Remove(System.String,System.Char[])">
            <summary>
            Удаляет из данного экземпляра заданный массив символов.
            </summary>
            <param name="source">Строка.</param>
            <param name="symbolsForRemove">Массив символов для удаления.</param>
            <returns>Новая строка, эквивалентная данному экземпляру за минусом удаленных символов.</returns>
            <remarks>Расширяемый тип для класса <see cref="T:System.String"/>.</remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.CleanUpColumnName(System.String)">
            <summary>
            Очищает заданную строку от специальных символов.
            </summary>
            <param name="columnName">Строка.</param>
            <returns>Новая строка, эквивалентная <paramref name="columnName"/>, из которой удалены специальные символы,
            а разделители заменены на символ '_'.</returns>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.FormatByObjProperties(System.String,System.Object)">
            <summary>
            Форматирует данный экземпляр в соответствии с заданными свойствами.
            </summary>
            <param name="source">Строка.</param>
            <param name="value">Свойства.</param>
            <returns>Новая строка, отформатированная в соответствии с заданными свойствами.</returns>
            <remarks>Расширяемый метод для класса <see cref="T:System.String"/>.</remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.ToNameValueCollection(System.String)">
            <summary>
            Преобразует данный экземпляр в тип <see cref="T:System.Collections.Specialized.NameValueCollection"/>,
            представляющий собой коллекцию связанных ключей <see cref="T:System.String"/> и значений
            <see cref="T:System.String"/>, доступ к которым можно получить с помощью ключа или индекса.</summary>
            <param name="source">Строка.</param>
            <returns>Экземпляр класса <see cref="T:System.Collections.Specialized.NameValueCollection"/>.</returns>
            <remarks>
            <para>Расширяемый метод для класса <see cref="T:System.String"/>.</para>
            <para>Строка <paramref name="source"/> представляет собой набор пар в формате 'Ключ=Значение',
            перечисленных через разделитель ';'.</para></remarks>.
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.ToCamelCase(System.String,System.Globalization.CultureInfo)">
            <summary>
            Возвращает копию данного экземпляра, преобразованную в соответствии со стилем UpperCamelCase.
            </summary>
            <param name="source">Строка.</param>
            <param name="cultureInfo">Сведения об определенном языке и региональных параметрах.</param>
            <returns>Эквивалент данного экземпляра, преобразованный в соответствии со стилем UpperCamelCase.</returns>
            <remarks>
            <para>Расширяемый метод для класса <see cref="T:System.String"/>.</para>
            <para>Метод переводит первый символ данного экземпляра в верхний регистр.</para>
            </remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.ToCamelCase(System.String)">
            <summary>
            Возвращает копию данного экземпляра, преобразованную в соответствии со стилем UpperCamelCase.
            </summary>
            <param name="source">Строка.</param>
            <returns>Эквивалент данного экземпляра, преобразованный в соответствии со стилем UpperCamelCase.</returns>
            <remarks>s
            <para>Расширяемый метод для класса <see cref="T:System.String"/>.</para>
            <para>Метод переводит первый символ данного экземпляра в верхний регистр.</para>
            </remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.ToLowerCamelCase(System.String,System.Globalization.CultureInfo)">
            <summary>
            Возвращает копию данного экземпляра, преобразованную в соответствии со стилем lowerCamelCase.
            </summary>
            <param name="source">Строка.</param>
            <param name="cultureInfo">Сведения об определенном языке и региональных параметрах.</param>
            <returns>Эквивалент данного экземпляра, преобразованный в соответствии со стилем lowerCamelCase.</returns>
            <remarks>
            <para>Расширяемый метод для класса <see cref="T:System.String"/>.</para>
            <para>Метод переводит первый символ данного экземпляра в нижний регистр.</para>
            </remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.ToLowerCamelCase(System.String)">
            <summary>
            Возвращает копию данного экземпляра, преобразованную в соответствии со стилем lowerCamelCase.
            </summary>
            <param name="source">Строка.</param>
            <returns>Эквивалент данного экземпляра, преобразованный в соответствии со стилем lowerCamelCase.</returns>
            <remarks>
            <para>Расширяемый метод для класса <see cref="T:System.String"/>.</para>
            <para>Метод переводит первый символ данного экземпляра в нижний регистр.</para>
            </remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.Concat(System.Collections.IEnumerable,System.String,System.String)">
            <summary>
            Объединяет в одну строку перечень заданных элементов через заданный разделитель, при этом форматируя каждый
            элемент в соответствии с заданным шаблоном.
            </summary>
            <param name="items">Перечень объединяемых элементов.</param>
            <param name="separator">Разделитель.</param>
            <param name="template">Шаблон форматирования.</param>
            <returns>Новая строка, содержащая элементы <paramref name="items"/>, отформатированные в соответствии с
            шаблоном <paramref name="template"/>, перечисленные через разделитель <paramref name="separator"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.Concat(System.Collections.IEnumerable)">
            <summary>
            Объединяет в одну строку перечень заданных элементов через разделитель ','.
            </summary>
            <param name="items">Перечень объединяемых элементов.</param>
            <returns>Новая строка, содержащая элементы <paramref name="items"/>, перечисленные через разделитель ','.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.ConcatIfNotEmpty(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Объединяет в одну строку перечень заданных элементов через заданный разделитель, если элементы не являются
            пустыми. </summary>
            <param name="source">Перечень объединяемых элементов.</param>
            <param name="separator">Разделитель.</param>
            <returns>Новая строка, содержащая непустые элементы <paramref name="source"/>, перечисленные через
            разделитель <paramref name="separator"/>.</returns>
            <remarks>
            <para>Перегруженный метод.</para>
            <para>Расширяемый метод для классов, реализующих интерфейс
            <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</para></remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.ConcatIfNotEmpty(System.Collections.Generic.IEnumerable{System.String},System.String,System.Int32)">
            <summary>
            Объединяет в одну строку перечень заданных элементов через заданный разделитель, если элементы не являются
            пустыми. Количество объединяемых в строке элементов ограничено числом <paramref name="maxNumber"/>. Если
            число элементов <paramref name="source"/> превышает <paramref name="maxNumber"/>, вместо остальных
            элементов в строку будет добавлен символ многоточия.</summary>
            <param name="source">Перечень объединяемых элементов.</param>
            <param name="separator">Разделитель.</param>
            <param name="maxNumber">Максимальное число элементов, объединяемых в строке.</param>
            <returns>Новая строка, содержащая непустые элементы <paramref name="source"/>, перечисленные через
            разделитель <paramref name="separator"/>.</returns>
            <remarks>
            <para>Перегруженный метод.</para>
            <para>Расширяемый метод для классов, реализующих интерфейс
            <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</para></remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.ConcatIfNotEmpty(System.String,System.String,System.String)">
            <summary>
            Объединяет данный экземпляр с заданной строкой через заданный разделитель, если заданная строка не является
            пустой. </summary>
            <param name="source">Строка.</param>
            <param name="str">Присоединяемая строка.</param>
            <param name="separator">Разделитель.</param>
            <returns>Новая строка, эквивалентная данному экземпляру, объединенная с непустой строкой
            <paramref name="str"/>.</returns>
            <remarks>
            <para>Перегруженный метод.</para>
            <para>Расширяемый метод для класса <see cref="T:System.String"/>.</para>
            </remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.Chop(System.String,System.Int32)">
            <summary>
            Возвращает строку, представляющую собой подстроку данного экземпляра, начиная с заданной позиции до конца.
            </summary>
            <param name="source">Строка.</param>
            <param name="characters">Позиция.</param>
            <returns>Строка, эквивалентная подстроке данного экземпляра, которая начинается
            с позиции <paramref name="characters"/>. </returns>
            <remarks>
            <para>Перегруженный метод.</para>
            <para>Расширяемый метод для класса <see cref="T:System.String"/>.</para>
            </remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.Chop(System.String)">
            <summary>
            Возвращает строку, представляющую собой подстроку данного экземпляра начиная с позиции 1 до конца.
            </summary>
            <param name="source">Строка.</param>
            <returns>Строка, эквивалентная подстроке данного экземпляра, которая начинается с позиции 1.</returns>
            <remarks>
            <para>Перегруженный метод.</para>
            <para>Расширяемый метод для класса <see cref="T:System.String"/>.</para>
            </remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.ToCharacterSeparatedFileName(System.String,System.Char,System.String)">
            <summary>
            Формирует имя файла на базе заданной строки символов с заданным разделителем и расширением файла.
            </summary>
            <param name="source">Строка.</param>
            <param name="separator">Разделитель.</param>
            <param name="extension">Расширение.</param>
            <returns>Имя файла, состоящее из групп символов строки <paramref name="source"/>, разделяемых символом
            <paramref name="separator"/> с расширением <paramref name="extension"/>.</returns>
            <remarks>
            <para>Расширяемый метод для класса <see cref="T:System.String"/>.</para>
            <para>Для корректного формирования имени файла строка <paramref name="source"/> должна в обязательном
            порядке содержать либо группу символов, начинающуюся с заглавной латинской буквы, либо одну или несколько
            цифр.</para>
            </remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.EnsureSemicolon(System.String)">
            <summary>
            Добавляет в конец данного экземпляра символ ';', если он отсутствует.
            </summary>
            <param name="source">Строка.</param>
            <returns>Эквивалент данного экземпляра с добавленным в конец символом ';'.</returns>
            <remarks>Расширяемый метод для класса <see cref="T:System.String"/>.</remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.EnsureNoTrailingSlash(System.String)">
            <summary>
            Removes trailing slash if it is at the end of the string.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.GetValueFromQueryString(System.String,System.String)">
            <summary>
            Возвращает значение по заданному ключу.
            </summary>
            <param name="source">Строка.</param>
            <param name="key">Ключ.</param>
            <returns>Строка, представляющая собой значение для ключа <paramref name="key"/>.</returns>
            <remarks>
            <para>Расширяемый метод для класса <see cref="T:System.String"/>.</para>
            </remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.Compress(System.String)">
            <summary>
            Выполняет сжатие (упаковку) данного экземпляра.
            </summary>
            <param name="source">Строка.</param>
            <returns>Сжатое строковое представление данного экземпляра в кодировке Base64.</returns>
            <remarks>Расширяемый метод для класса <see cref="T:System.String"/>.</remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.Decompress(System.String)">
            <summary>
            Выполняет распаковку данного экземпляра.
            </summary>
            <param name="source">Строка.</param>
            <returns>Распакованное строковое представление данного экземпляра в в кодировке UTF8.</returns>
            <remarks>Расширяемый метод для класса <see cref="T:System.String"/>.</remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.ToStream(System.String,System.Text.Encoding)">
            <summary>
            Возвращает значение типа <see cref="T:System.IO.Stream"/> данной строки <paramref name="source"/>.
            </summary>
            <param name="source">Строка.</param>
            <param name="encoding">Тип кодировки. Если параметр не задан, то используется кодировка UTF8.</param>
            <returns>Объект <see cref="T:System.IO.Stream"/>, представляющий значение строки
            <paramref name="source"/>.</returns>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.EqualsIgnoreCase(System.String,System.String)">
            <summary>
            Defines the equality of strings without case sensitivity.
            </summary>
            <param name="source">Source string.</param>
            <param name="value">String to compare.</param>
            <returns>
            <c>true</c>, if strings are case-insensitive equal. Otherwise returns <c>false</c>.
            </returns>
            <remarks>Extension method for the <see cref="T:System.String"/> class.</remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.IsNullOrEmpty(System.String)">
            <summary>
            Проверяет, является ли указанная строка значением <c>null</c> или пустой строкой.
            </summary>
            <param name="source">Строка.</param>
            <returns><c>true</c>, если указанная строка является значением <c>null</c> или пустой строкой; в противном
            случае — <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.ToNullIfEmpty(System.String)">
            <summary>
            Returns null when string is null or empty.
            </summary>
            <param name="source">string.</param>
            <returns><c>null</c> when string is null or empty. Otherwise returns the source string.</returns>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.IsNotNullOrEmpty(System.String)">
            <summary>
            Проверяет, не является ли указанная строка значением <c>null</c> или пустой строкой.
            </summary>
            <param name="source">Строка.</param>
            <returns><c>true</c>, если указанная строка не является значением <c>null</c> или пустой строкой; в
            противном случае — <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.IsNullOrWhiteSpace(System.String)">
            <summary>
            Проверяет, является ли указанная строка значением <c>null</c>, пустой строкой или строкой, состоящей
            только из пробельных символов.
            </summary>
            <param name="source">Строка.</param>
            <returns><c>true</c>, если указанная строка является значением <c>null</c>, пустой строкой или строкой,
            состоящей только из пробельных символов; в противном случае — <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.IsNotNullOrWhiteSpace(System.String)">
            <summary>
            Проверяет, не является ли указанная строка значением <c>null</c>, пустой строкой или строкой, состоящей
            только из пробельных символов.
            </summary>
            <param name="source">Строка.</param>
            <returns><c>true</c>, если указанная строка не является значением <c>null</c>, пустой строкой или строкой,
            состоящей только из пробельных символов; в противном случае — <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.ConvertHtmlToPlainText(System.String)">
            <summary>
            Remove all HTML tags from <paramref name="html"/>.
            </summary>
            <param name="html">HTML text.</param>
            <returns>HTML text without tags.</returns>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.GetPlainTextFromHtml(System.String,System.Int32)">
            <summary>
            Converts html text <paramref name="html"/> to plain text.
            </summary>
            <param name="html">HTML text.</param>
            <param name="symbolCount">Takes first<paramref name="symbolCount"/>
            symbols from the plaintext <paramref name="html"/>.</param>
            <returns>Converted plain text.</returns>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.DeleteWhiteSpaces(System.String)">
            <summary>
            Deletes white spaces from text.
            </summary>
            <param name="str">Text.</param>
            <returns>Text without white spaces.</returns>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.SplitToLines(System.String)">
            <summary>
            Splits text to lines.
            </summary>
            <param name="source">Text.</param>
            <returns>Lines of text.</returns>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.ReplaceInvalidXmlChars(System.String)">
            <summary>
            Replaces xml invalid symbols.
            </summary>
            <param name="rawValue">Raw xml string.</param>
            <returns>Raw xml string without xml invalid symbols.</returns>
            <remarks>
            XML characters usage desctibed <see href="https://www.w3.org/TR/2000/REC-xml-20001006#charsets">here</see>.
            </remarks>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.RemoveSpecialCharacters(System.String,System.Char[])">
            <summary>
            Removes special characters from string.
            </summary>
            <param name="inputValue">String to remove special characters from.</param>
            <param name="allowedSpecialCharacters">
            Array of allowed special characters with escape symbol if necessary.
            </param>
            <returns>String without special characters.</returns>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.RemoveSpecialCharactersFromIdentifier(System.String)">
            <summary>
            Removes special characters from identifier.
            </summary>
            <param name="identifier">Identifier.</param>
            <returns>Identifier without special characters.</returns>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.ContainsIgnoreCase(System.String,System.String)">
            <summary>
            Determines whether the specified string contains given substring ignoring case.
            </summary>
            <param name="source">Source string.</param>
            <param name="substring">Substring.</param>
            <returns>
            <c>true</c>, if the specified string contains given substring. Otherwise returns <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.RemovePrefix(System.String,System.String)">
            <summary>
            Removes prefix from the beginning of a string.
            </summary>
            <param name="source">Source string.</param>
            <param name="prefix">Prefix.</param>
            <returns>
            Returns the part of the string without the beginning prefix.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.StringUtilities.IsEmailAddress(System.String)">
            <summary>
            Determines if string represents a valid e-mail address
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:Terrasoft.Common.StringWriterWithEncoding">
            <summary>
            Реализует <see cref="T:System.IO.StringWriter"/> для записи данных в строку с учетом кодировки.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.StringWriterWithEncoding.#ctor(System.IFormatProvider,System.Text.Encoding)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.StringWriterWithEncoding"/>, используя заданные поставщика
            форматов и кодировку.
            </summary>
            <param name="formatProvider">Поставщик форматов.</param>
            <param name="encoding">Кодировка.</param>
        </member>
        <member name="P:Terrasoft.Common.StringWriterWithEncoding.Encoding">
            <summary>
            Возвращает экземпляр кодировки <see cref="T:System.Text.Encoding"/>, в которой осуществляется запись.
            </summary>
            <returns>Кодировка, в которой осуществляется запись.</returns>
        </member>
        <member name="T:Terrasoft.Common.TerrasoftObsoleteAttribute">
            <summary>
            By this attribute was marked classes and methods which have been marked as Obsolete
            but we didn't know how to rewrite code without using obsolete class or method.
            DON'T USE THIS ATTRIBUTE EVER
            </summary>
        </member>
        <member name="T:Terrasoft.Common.Threading.AsyncPump">
            <summary>
            Provides a pump that supports running asynchronous methods on the current thread.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.Threading.AsyncPump.SingleThreadSynchronizationContext">
            <summary>
            Provides a SynchronizationContext that's single-threaded.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.Threading.AsyncPump.SingleThreadSynchronizationContext._currentThread">
            <summary>
            The processing thread.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.Threading.AsyncPump.SingleThreadSynchronizationContext._operationCount">
            <summary>
            The number of outstanding operations.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.Threading.AsyncPump.SingleThreadSynchronizationContext._isTrackOperations">
            <summary>
            Whether to track operations m_operationCount.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.Threading.AsyncPump.SingleThreadSynchronizationContext.#ctor(System.Boolean)">
            <summary>
            Initializes the context.
            </summary>
            <param name="trackOperations">Whether to track operation count.</param>
        </member>
        <member name="M:Terrasoft.Common.Threading.AsyncPump.SingleThreadSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Dispatches an asynchronous message to the synchronization context.
            </summary>
            <param name="postCallback">The System.Threading.SendOrPostCallback delegate to call.</param>
            <param name="state">The object passed to the delegate.</param>
        </member>
        <member name="M:Terrasoft.Common.Threading.AsyncPump.SingleThreadSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.Threading.AsyncPump.SingleThreadSynchronizationContext.RunOnCurrentThread">
            <summary>
            Runs an loop to process all queued work items.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.Threading.AsyncPump.SingleThreadSynchronizationContext.Complete">
            <summary>Notifies the context that no more work will arrive.</summary>
        </member>
        <member name="M:Terrasoft.Common.Threading.AsyncPump.SingleThreadSynchronizationContext.OperationStarted">
            <summary>
            Invoked when an async operation is started.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.Threading.AsyncPump.SingleThreadSynchronizationContext.OperationCompleted">
            <summary>
            Invoked when an async operation is completed.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.Threading.AsyncPump.Run(System.Action)">
            <summary>
            Runs the specified asynchronous method.
            </summary>
            <param name="asyncMethod">The asynchronous method to execute.</param>
        </member>
        <member name="M:Terrasoft.Common.Threading.AsyncPump.Run(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Runs the specified asynchronous method.
            </summary>
            <param name="asyncMethod">The asynchronous method to execute.</param>
        </member>
        <member name="M:Terrasoft.Common.Threading.AsyncPump.Run``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Runs the specified asynchronous method.
            </summary>
            <param name="asyncMethod">The asynchronous method to execute.</param>
        </member>
        <member name="T:Terrasoft.Common.Timer">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.Timer.Start(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.Timer.IsRunning">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.Common.Timer.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Terrasoft.Common.TimerExtension">
            <summary>
            Represents auxiliary methods of the timer.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.TimerExtension.WithLogging(Terrasoft.Common.ITimer,Common.Logging.ILog)">
            <summary>
            Returns timer that supports logging on error.
            </summary>
            <param name="source">Timer.</param>
            <param name="logger">Logger.</param>
            <returns>Timer.</returns>
        </member>
        <member name="T:Terrasoft.Common.TimeZoneInfoUtilities">
            <summary>
            Exends class <see cref="T:System.TimeZoneInfo"/>.
            </summary>
        </member>
        <member name="F:Terrasoft.Common.TimeZoneInfoUtilities._ianaWindowsTimeZones">
            <summary>
            Internet assigned numbers authority time zone identifiers to windows time zone identifiers converter.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.TimeZoneInfoUtilities.GetWindowsTimeZoneNameByIanaTimeZoneName(System.TimeZoneInfo,System.String)">
            <summary>
            Returns windows time zone name by internet assigned numbers authority time zone name.
            </summary>
            <param name="source"> instance <see cref="T:System.TimeZoneInfo"/>.</param>
            <param name="ianaTimeZone"> Internet assigned numbers authority time zone name.</param>
            <returns>Windows time zone name.</returns>
        </member>
        <member name="M:Terrasoft.Common.TimeZoneInfoUtilities.GetIanaTimeZoneNameByWindowsTimeZoneName(System.TimeZoneInfo,System.String)">
            <summary>
            Returns internet assigned numbers authority time zone name by windows time zone name.
            </summary>
            <param name="source"> instance <see cref="T:System.TimeZoneInfo"/>.</param>
            <param name="windowsTimeZone"> Windows time zone name.</param>
            <returns>Internet assigned numbers authority time zone name.</returns>
        </member>
        <member name="T:Terrasoft.Common.TopologicalSorter">
            <summary>Класс для топологической сортировки</summary>
            <remarks>Слегка отрефакторенная версия сортировки, взятая отсюда:
            http://tawani.blogspot.com/2009/02/topological-sorting-and-cyclic.html
            </remarks>
        </member>
        <member name="T:Terrasoft.Common.TypeReference">
            <summary>
            Should be used to support serialization of <see cref="P:Terrasoft.Common.TypeReference.Type"/> instances with
            <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/> in net core runtime.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.TypeReference.#ctor(System.Type)">
            <summary>Initializes a new instance of the <see cref="T:Terrasoft.Common.TypeReference" /> class.</summary>
        </member>
        <member name="M:Terrasoft.Common.TypeReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Common.TypeReference" /> class.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="P:Terrasoft.Common.TypeReference.Type">
            <summary>
            Source type.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.TypeReference.FromType(System.Type)">
            <summary>
            Returns <see cref="T:Terrasoft.Common.TypeReference"/> instance initialized with specified <paramref name="type"/>.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Terrasoft.Common.TypeReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:Terrasoft.Common.UriUtilities">
            <summary>
            Содержит служебные методы для работы с унифицированными идентификаторами ресурсов (URI).
            </summary>
        </member>
        <member name="M:Terrasoft.Common.UriUtilities.Append(System.Uri,System.String[])">
            <summary>
            Возвращает новый экземпляр <see cref = "T:System.Uri"/>, URI которого формируется добавлением к абсолютному 
            пути <paramref name = "source"/> путей из массива <paramref name = "paths"/>.
            </summary>
            <param name="source">Базовый абсолютный путь.</param>
            <param name="paths">Массив путей.</param>
            <result>Новый экземпляр <see cref = "T:System.Uri"/>.</result>
            <remarks>Разделителем элементов из <paramref name = "paths"/> является "/".</remarks>
        </member>
        <member name="M:Terrasoft.Common.UriUtilities.EqualsIgnoreCase(System.Uri,System.Uri)">
            <summary>
            Определяет, являются ли равными заданные экземпляры <see cref = "T:System.Uri"/>. 
            При сравнении не учитывается регистр строк.
            </summary>
            <param name="source">Текущий экземпляр <see cref = "T:System.Uri"/>.</param>
            <param name="value">Экземпляр <see cref = "T:System.Uri"/>, с которым сравнивается текущий экземпляр.</param>
            <result><c>true</c>, если <paramref name = "source"/> и <paramref name = "value"/> равны; 
            иначе - <c>false</c>.</result>
        </member>
        <member name="M:Terrasoft.Common.UriUtilities.StartsWith(System.Uri,System.Uri)">
            <summary>
            Определяет, совпадает ли начало данного экземпляра <see cref = "T:System.Uri"/> с указанным URI.
            </summary>
            <param name="source">Основной аргумент сравнения.</param>
            <param name="value">Целевой аргумент сравнения.</param>
            <returns>
            <c>true</c>, если параметр <paramref name = "value"/> соответствует началу данного URI; 
            в противном случае — значение <c>false</c>.
            </returns>
            <remarks>Расширяемый метод для класса <see cref="T:System.Uri"/>.</remarks>
        </member>
        <member name="M:Terrasoft.Common.UriUtilities.Contains(System.Uri,System.String)">
            <summary>
            Определяет, содержит ли данный экземпляр <see cref = "T:System.Uri"/> указанную строку.
            </summary>
            <param name="source">Основной аргумент.</param>
            <param name="value">Строка поиска.</param>
            <returns>
            <c>true</c>, если данный экземпляр содержит строку указанную в параметре <paramref name = "value"/>; 
            в противном случае — значение <c>false</c>.
            </returns>
            <remarks>Расширяемый метод для класса <see cref="T:System.Uri"/>.</remarks>
        </member>
        <member name="M:Terrasoft.Common.UriUtilities.UrlEncode(System.String)">
            <summary>
            Encodes url string with Uri.EscapeDataString() according to recommendations on MSDN
            http://blogs.msdn.com/b/yangxind/archive/2006/11/09/
            don-t-use-net-system-uri-unescapedatastring-in-url-decoding.aspx
            </summary>
            <param name="source">Input uri string</param>
            <returns>Encoded uri string</returns>
        </member>
        <member name="M:Terrasoft.Common.ValidateUtilities.CheckArgumentNull(System.Object,System.String)">
            <summary>
            Выполняет проверку условия, является ли текущий объект значением <c>null</c>. Если условие выполняется,
            генерируется исключение.
            </summary>
            <param name="source">Объект.</param>
            <param name="argumentName">Имя аргумента, который вызвал исключение.</param>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">
            Если значение объекта <paramref name = "source"/> равно <c>null</c>.
            </exception>
        </member>
        <member name="M:Terrasoft.Common.ValidateUtilities.CheckDependencyNull(System.Object,System.String)">
            <summary>
            Checks if current object is <c>null</c>. If condition is true, exception will be thrown.
            </summary>
            <param name="source">Object.</param>
            <param name="dependencyName">Dependency name.</param>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">
            If value of parameter <paramref name = "source"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Terrasoft.Common.ValidateUtilities.CheckArgumentNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Выполняет проверку условия, является ли перечислитель <paramref name = "source"/> пустым или <c>null</c>.
            Если условие выполняется, генерируется исключение.
            </summary>
            <typeparam name="T">
            Класс, реализующий интерфейс <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </typeparam>
            <param name="source">Перечислитель объектов.</param>
            <param name="argumentName">Имя аргумента, который вызвал исключение.</param>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">
            Если перечислитель <paramref name = "source"/> пустой или <c>null</c>.
            </exception>
        </member>
        <member name="M:Terrasoft.Common.ValidateUtilities.CheckArgumentNullOrEmpty(System.String,System.String)">
            <summary>
            Выполняет проверку условия, является ли заданная строка пустой или <c>null</c>. Если условие выполняется,
            генерируется исключение.
            </summary>
            <param name="source">Строка.</param>
            <param name="argumentName">Имя аргумента, который вызвал исключение.</param>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">
            Если строка <paramref name = "source"/> пустая или <c>null</c>.
            </exception>
        </member>
        <member name="M:Terrasoft.Common.ValidateUtilities.CheckArgumentNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Validates whether a specified string is <c>null</c>, empty, or consists only of white-space characters.
            If condition is true, exception will be thrown.
            </summary>
            <param name="source">String.</param>
            <param name="argumentName">Name of the argument that causes exception.</param>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">
            If string <paramref name = "source"/> is <c>null</c>, empty, or consists only of white-space characters.
            </exception>
        </member>
        <member name="M:Terrasoft.Common.ValidateUtilities.CheckArgumentEmpty(System.Guid,System.String)">
            <summary>
            Выполняет проверку условия, является ли текущий уникальный идентификатор пустым. Если условие выполняется,
            генерируется исключение.
            </summary>
            <param name="source">Уникальный идентификатор.</param>
            <param name="argumentName">Имя аргумента, который вызвал исключение.</param>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">
            Если уникальный идентификатор <paramref name = "source"/> пустой.
            </exception>
        </member>
        <member name="M:Terrasoft.Common.ValidateUtilities.EnsureDependencyNotNull``1(``0,System.String)">
            <summary>
            Checks if dependency is <c>null</c>. If condition is true, exception will be thrown.
            </summary>
            <param name="source"></param>
            <param name="dependencyName"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException"></exception>
        </member>
        <member name="T:Terrasoft.Common.XmlDataReader">
            <summary>
            Предоставляет методы для чтения данных в формате Xml.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.XmlDataReader.#ctor(System.IO.TextReader)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.XmlDataReader"/>, используя заданный 
            <see cref="T:System.IO.TextReader"/>.
            </summary>
            <param name="input"><see cref="T:System.IO.TextReader"/>, из которого следует считывать данные в формате 
            XML. Данные возвращаются в формате Unicode. Указанная в объявлении XML кодировка не используется 
            <see cref="T:Terrasoft.Common.XmlDataReader"/>для раскодирования потока данных. </param>
        </member>
        <member name="M:Terrasoft.Common.XmlDataReader.#ctor(System.IO.Stream)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.XmlDataReader"/>, используя заданный поток.
            </summary>
            <param name="input">Поток, содержащий данные в формате Xml. </param>
            <remarks>Метод просматривает первые байты потока в поисках метки порядка следования байтов или другого 
            признака кодировки. После определения эта кодировка используется в последующем считывании потока, 
            а процедура обработки продолжает анализировать входные данные как поток символов Unicode. </remarks>
        </member>
        <member name="P:Terrasoft.Common.XmlDataReader.CurrentName">
            <summary>
            Возвращает имя текущего атрибута.
            </summary>
        </member>
        <member name="P:Terrasoft.Common.XmlDataReader.CurrentValue">
            <summary>
            Возвращает значение текущего атрибута.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.XmlDataReader.Dispose(System.Boolean)">
            <summary>
            Выполняет удаление, высвобождение и сброс управляемых и неуправляемых ресурсов.
            </summary>
            <param name="disposing">
            <c>true</c>, если необходимо высвободить и управляемые, и неуправляемые ресурсы; <c>false</c>, если 
            необходимо высвободить только неуправляемые ресурсы.
            </param>
        </member>
        <member name="M:Terrasoft.Common.XmlDataReader.Close">
            <summary>
            Закрывает текущий экземпляр <see cref="T:Terrasoft.Common.XmlDataReader"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.XmlDataReader.Read">
            <summary>
            Перемещает текущую позицию в наборе данных к следующему атрибуту текущего уровня вложенности.
            </summary>
            <returns>
            Строка с именем текущего атрибута после выполнения метода либо пустая строка, если достигнут конец 
            набора данных.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.XmlDataReader.ReadInto">
            <summary>
            Перемещает текущую позицию в наборе данных на один уровень вложенности вниз.
            </summary>
            <returns>
            Строка с именем текущего атрибута после выполнения метода либо пустая строка, если на текущем уровне нет 
            вложенных атрибутов.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.XmlDataReader.ReadOut">
            <summary>
            Перемещает текущую позицию в наборе данных на один уровень вложенности вверх.
            </summary>
            <returns>
            Пустая строка. Чтобы получить имя следующего атрибута, необходимо вызывать
            <see cref="M:Terrasoft.Common.XmlDataReader.Read"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.XmlDataReader.ReadNextCollectionItem">
            <summary>
            Метод не реализован.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.XmlDataReader.GetStringValue">
            <summary>
            Возвращает строковое представление значения атрибута, которые находятся в текущей позиции
            набора данных.
            </summary>
            <returns>
            Текущее значение атрибута типа <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.XmlDataReader.GetGuidValue">
            <summary>
            Возвращает значение текущего атрибута типа <see cref="T:System.Guid"/>.
            </summary>
            <returns>
            Значение текущего атрибута типа <see cref="T:System.Guid"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.XmlDataReader.GetIntValue">
            <summary>
            Возвращает значение текущего атрибута типа <see cref="T:System.Int32"/>.
            </summary>
            <returns>
            Значение текущего атрибута типа <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.XmlDataReader.GetDoubleValue">
            <summary>
            Возвращает значение текущего атрибута типа <see cref="T:System.Double"/>.
            </summary>
            <returns>
            Значение текущего атрибута типа <see cref="T:System.Double"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.XmlDataReader.GetDateTimeValue">
            <summary>
            Возвращает значение текущего атрибута типа <see cref="T:System.DateTime"/>.
            </summary>
            <returns>
            Значение текущего атрибута типа <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.XmlDataReader.GetBoolValue">
            <summary>
            Возвращает значение текущего атрибута типа <see cref="T:System.Boolean"/>.
            </summary>
            <returns>
            Значение текущего атрибута типа <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.XmlDataReader.GetLocalizableStringValue">
            <summary>
            Возвращает значение текущего атрибута типа <see cref="T:Terrasoft.Common.LocalizableString"/>.
            </summary>
            <returns>
            Значение текущего атрибута типа <see cref="T:Terrasoft.Common.LocalizableString"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.XmlDataReader.GetStreamValue">
            <summary>
            Возвращает значение текущего атрибута типа <see cref="T:System.IO.Stream"/>.
            </summary>
            <returns>
            Значение текущего атрибута типа <see cref="T:System.IO.Stream"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.XmlDataReader.GetStreamValue(System.IO.Stream)">
            <summary>
            Записывает в заданный поток значение текущего свойства.
            </summary>
            <param name="stream">Поток, в который осуществляется запись.</param>
        </member>
        <member name="M:Terrasoft.Common.XmlDataReader.GetEnumValue``1">
            <summary>
            Возвращает элемент перечисления, соответствующий значению текущего атрибута.
            </summary>
            <typeparam name="TValue">Значение перечисления любого типа.</typeparam>
            <returns>
            Элемент перечисления, соответствующий текущему значению атрибута.
            </returns>
            <exception cref="T:System.ArgumentException">Если тип <c>TValue</c> не является перечислением.</exception>
        </member>
        <member name="M:Terrasoft.Common.XmlDataReader.GetValue(Terrasoft.Common.DataConverter)">
            <summary>
            Возвращает объект, представляющий значение текущего атрибута, преобразованный с помощью переданного 
            экземпляра <see cref="T:Terrasoft.Common.DataConverter"/>.
            </summary>
            <param name="converter">Экземпляр <see cref="T:Terrasoft.Common.DataConverter"/>, с помощью которого осуществляется 
            преобразование.</param>
            <returns>
            Значение текущего атрибута типа <see cref="T:System.Object"/>,
            преобразованный <paramref name="converter"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Common.XmlDataReader.GetValue(System.Type)">
            <summary>
            Возвращает значение текущего атрибута, преобразованное к заданному типу.
            </summary>
            <param name="valueType">Тип.</param>
            <returns>
            Значение текущего атрибута, преобразованное к типу <paramref name="valueType"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Если в качестве параметра <paramref name="valueType"/> передано 
            значение <c>null</c>.</exception>
            <exception cref="T:Terrasoft.Common.UnsupportedTypeException">Если тип <paramref name="valueType"/> не поддерживается.
            </exception>
        </member>
        <member name="M:Terrasoft.Common.XmlDataReader.GetValue``1">
            <summary>
            Возвращает значение данного типа текущего атрибута, преобразовывая его к этому типу.
            </summary>
            <typeparam name="TValue">Значение любого типа.</typeparam>
            <returns>
            Преобразованное значение атрибута.
            </returns>
            <exception cref = "T:System.ArgumentNullException">Если тип данных <c>TValue</c> не существует.</exception>
            <exception cref = "T:Terrasoft.Common.UnsupportedTypeException">
            Если тип данных <c>TValue</c> не поддерживается в системе.
            </exception>
        </member>
        <member name="M:Terrasoft.Common.XmlDataReader.GetDeserializedObjectValue(System.Type)">
            <inheritdoc cref="T:Terrasoft.Common.DataReader"/>
        </member>
        <member name="T:Terrasoft.Common.XmlDataWriterSettings">
            <summary>
            Предоставляет настройки для класса <see cref="T:Terrasoft.Common.XmlDataWriter"/>
            </summary>
        </member>
        <member name="P:Terrasoft.Common.XmlDataWriterSettings.Indent">
            <summary>
            Возвращает и устанавливает признак использования отступов при формировании Xml.
            </summary>
        </member>
        <member name="T:Terrasoft.Common.XmlDataWriter">
            <summary>
            Представляет методы для последовательной записи данных в формате Xml.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.XmlDataWriter.#ctor(Terrasoft.Common.XmlDataWriterSettings,System.IO.TextWriter)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Common.XmlDataWriter"/>, используя заданные настройки экземпляра 
            и <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="settings">Настройки для нового экземпляра 
            <see cref="T:Terrasoft.Common.XmlDataWriterSettings"/>.</param>
            <param name="output">Экземпляр <see cref="T:System.IO.TextWriter"/>, с помощью которого осуществляется 
            запись.</param>
        </member>
        <member name="M:Terrasoft.Common.XmlDataWriter.#ctor(Terrasoft.Common.XmlDataWriterSettings,System.IO.Stream)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Common.XmlDataWriter"/>, используя заданные настройки экземпляра и поток
            вывода. </summary>
            <param name="settings">Настройки для нового экземпляра 
            <see cref="T:Terrasoft.Common.XmlDataWriterSettings"/>.</param>
            <param name="output">Поток, в который осуществляется запись.</param>
        </member>
        <member name="P:Terrasoft.Common.XmlDataWriter.Settings">
            <summary>
            Возвращает настройки для данного экземпляра <see cref="T:Terrasoft.Common.XmlDataWriter"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.XmlDataWriter.Dispose(System.Boolean)">
            <summary>
            Выполняет удаление, высвобождение и сброс ресурсов.
            </summary>
            <param name="disposing">
            <c>true</c>, если необходимо высвободить и управляемые, и неуправляемые ресурсы; <c>false</c>, если 
            необходимо высвободить только неуправляемые ресурсы.
            </param>
        </member>
        <member name="M:Terrasoft.Common.XmlDataWriter.Close">
            <summary>
            Закрывает текущий экземпляр <see cref="T:Terrasoft.Common.XmlDataWriter"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.XmlDataWriter.WriteStartObject">
            <inheritdoc cref="T:Terrasoft.Common.DataWriter"/>
        </member>
        <member name="M:Terrasoft.Common.XmlDataWriter.WriteStartObject(System.String)">
            <summary>
            Начинает запись элемента с заданным именем в поток вывода.
            </summary>
            <param name="name">Имя элемента.</param>
            <remarks>Метод записывает в поток вывода имя элемента и открывающую угловую скобку. </remarks>
        </member>
        <member name="M:Terrasoft.Common.XmlDataWriter.WriteFinishObject">
            <summary>
            Завершает запись текущего элемента.
            </summary>
            <remarks>Метод записывает в поток вывода закрывающую угловую скобку.</remarks>
        </member>
        <member name="M:Terrasoft.Common.XmlDataWriter.WriteValue(System.String,System.String,System.String)">
            <summary>
            Осуществляет запись значения типа <see cref="T:System.String"/> для элемента с заданными именем и
            значением по умолчанию.
            </summary>
            <param name="name">Имя элемента.</param>
            <param name="value">Значение элемента типа <see cref="T:System.String"/>.</param>
            <param name="defValue">Значение по умолчанию для элемента.</param>
        </member>
        <member name="M:Terrasoft.Common.XmlDataWriter.WriteValue(System.String,System.Guid,System.Guid)">
            <summary>
            Осуществляет запись значения типа <see cref="T:System.Guid"/> для элемента с заданными именем и
            значением по умолчанию.
            </summary>
            <param name="name">Имя элемента.</param>
            <param name="value">Значение элемента типа <see cref="T:System.Guid"/>.</param>
            <param name="defValue">Значение по умолчанию.</param>
        </member>
        <member name="M:Terrasoft.Common.XmlDataWriter.WriteValue(System.String,System.Int32,System.Int32)">
            <summary>
            Осуществляет запись значения типа <see cref="T:System.Int32"/> для элемента с заданными именем и
            значением по умолчанию.
            </summary>
            <param name="name">Имя элемента.</param>
            <param name="value">Значение элемента типа <see cref="T:System.Int32"/>.</param>
            <param name="defValue">Значение по умолчанию.</param>
        </member>
        <member name="M:Terrasoft.Common.XmlDataWriter.WriteValue(System.String,System.Decimal,System.Decimal)">
            <summary>
            Осуществляет запись значения типа <see cref="T:System.Decimal"/> для элемента с заданными именем и
            значением по умолчанию.
            </summary>
            <param name="name">Имя элемента.</param>
            <param name="value">Значение элемента типа <see cref="T:System.Decimal"/>.</param>
            <param name="defValue">Значение по умолчанию.</param>
        </member>
        <member name="M:Terrasoft.Common.XmlDataWriter.WriteValue(System.String,System.Double,System.Double)">
            <summary>
            Осуществляет запись значения типа <see cref="T:System.Double"/> для элемента с заданными именем и
            значением по умолчанию.
            </summary>
            <param name="name">Имя элемента.</param>
            <param name="value">Значение элемента типа <see cref="T:System.Double"/>.</param>
            <param name="defValue">Значение по умолчанию.</param>
        </member>
        <member name="M:Terrasoft.Common.XmlDataWriter.WriteValue(System.String,System.Enum,System.Enum)">
            <summary>
            Осуществляет запись значения типа <see cref="T:System.Enum"/> для элемента с заданными именем и
            значением по умолчанию.
            </summary>
            <param name="name">Имя элемента.</param>
            <param name="value">Значение элемента типа <see cref="T:System.Enum"/>.</param>
            <param name="defValue">Значение по умолчанию.</param>
        </member>
        <member name="M:Terrasoft.Common.XmlDataWriter.WriteValue(System.String,System.DateTime,System.DateTime)">
            <summary>
            Осуществляет запись значения типа <see cref="T:System.DateTime"/> для элемента с заданными именем и
            значением по умолчанию.
            </summary>
            <param name="name">Имя элемента.</param>
            <param name="value">Значение элемента типа <see cref="T:System.DateTime"/>.</param>
            <param name="defValue">Значение по умолчанию.</param>
        </member>
        <member name="M:Terrasoft.Common.XmlDataWriter.WriteValue(System.String,System.Boolean,System.Boolean)">
            <summary>
            Осуществляет запись значения типа <see cref="T:System.Boolean"/> для элемента с заданными именем и
            значением по умолчанию.
            </summary>
            <param name="name">Имя элемента.</param>
            <param name="value">Значение элемента типа <see cref="T:System.Boolean"/>.</param>
            <param name="defValue">Значение по умолчанию.</param>
        </member>
        <member name="M:Terrasoft.Common.XmlDataWriter.WriteValue(System.String,Terrasoft.Common.LocalizableString,Terrasoft.Common.LocalizableString)">
            <summary>
            Осуществляет запись значения типа <see cref="T:Terrasoft.Common.LocalizableString"/> для элемента с заданными 
            именем и значением по умолчанию.
            </summary>
            <param name="name">Имя элемента.</param>
            <param name="value">Значение элемента типа <see cref="T:Terrasoft.Common.LocalizableString"/>.</param>
            <param name="defValue">Значение по умолчанию.</param>
        </member>
        <member name="M:Terrasoft.Common.XmlDataWriter.WriteValue(System.String,System.IO.Stream)">
            <summary>
            Осуществляет запись элемента с заданным именем и значения из заданного потока.
            </summary>
            <param name="name">Имя элемента.</param>
            <param name="value">Поток, из которого осуществляется запись.</param>
        </member>
        <member name="M:Terrasoft.Common.XmlDataWriter.WriteValue(System.String,Terrasoft.Common.DataConverter,System.Object,System.Object)">
            <summary>
            Осуществляет запись значения элемента с заданными именем и значением <paramref name = "value"/>, 
            преобразованным заданным <paramref name = "converter"/>.
            </summary>
            <param name="name">Имя элемента.</param>
            <param name="converter">Преобразователь типов данных.</param>
            <param name="value">Значение.</param>
            <param name="defValue">Значение по умолчанию.</param>
        </member>
        <member name="M:Terrasoft.Common.XmlDataWriter.WriteValue(System.String,System.Type,System.Object,System.Object)">
            <summary>
            Осуществляет запись значения заданного типа для атрибута с заданными именем и значением по умолчанию.
            </summary>
            <param name="name">Имя элемента.</param>
            <param name="valueType">Тип значения.</param>
            <param name="value">Значение.</param>
            <param name="defValue">Значение по умолчанию.</param>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">Если в качестве параметров <paramref name="name"/> или
            <paramref name="valueType"/> передается пустое значение или <c>null</c>. </exception>
            <exception cref="T:Terrasoft.Common.UnsupportedTypeException">Если в качестве параметра <paramref name="valueType"/>
            передается неподдерживаемый тип данных.</exception>
        </member>
        <member name="M:Terrasoft.Common.XmlDataWriter.WriteStartCollection(System.String)">
            <summary>
            Метод не реализован.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.XmlDataWriter.WriteFinishCollection">
            <summary>
            Метод не реализован.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.XmlDataWriter.WriteValue(System.Object[])">
            <summary>
            Метод не реализован.
            </summary>
        </member>
        <member name="M:Terrasoft.Common.XmlDataWriter.WriteSerializableObjectValue(System.String,System.Object,System.Object)">
            <summary>
            Метод не реализован.
            </summary>
        </member>
    </members>
</doc>

<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Terrasoft.DB.Oracle</name>
    </assembly>
    <members>
        <member name="T:Terrasoft.DB.Oracle.OracleDataValueTypeResolver">
            <inheritdoc cref="T:Terrasoft.Core.DB.DbDataValueTypeResolver"/>
        </member>
        <member name="P:Terrasoft.DB.Oracle.OracleEngine.AllowsMars">
            <summary>
            Represents whether the database allows multiple active result sets.
            </summary>
        </member>
        <member name="P:Terrasoft.DB.Oracle.OracleEngine.IsCharLengthSemanticsAlias">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.DB.Oracle.OracleEngine.EqualsDataValueType(Terrasoft.Core.DataValueType,Terrasoft.Core.DataValueType)">
            <inheritdoc cref="T:Terrasoft.Core.DB.IDbDataValueTypeComparer"/>
        </member>
        <member name="M:Terrasoft.DB.Oracle.OracleEngine.BuildNextValueSequenceQuerySqlText(System.Text.StringBuilder,Terrasoft.Core.DB.Sequence)">
            <summary>
            Builds SQL text for creting sequence in DB. <paramref name="sb"/>.
            </summary>
            <param name="sb">Builder for sql text string.</param>
            <param name="sequence">Sequence object.</param>
        </member>
        <member name="M:Terrasoft.DB.Oracle.OracleEngine.BuildCurrentValueSequenceQuerySqlText(System.Text.StringBuilder,Terrasoft.Core.DB.Sequence)">
            <summary>
            Builds SQL text for getting current value for sequence. <paramref name="sb"/>.
            </summary>
            <param name="sb">Builder for sql text string.</param>
            <param name="sequence">Sequence object.</param>
        </member>
        <member name="M:Terrasoft.DB.Oracle.OracleEngine.BuildReCreateSequenceQuerySqlText(System.Text.StringBuilder,Terrasoft.Core.DB.Sequence)">
            <summary>
            Builds SQL text for recreating sequence in DB.
            </summary>
            <param name="sb">Builder for sql text string.</param>
            <param name="sequence">Sequence object.</param>
        </member>
        <member name="M:Terrasoft.DB.Oracle.OracleEngine.BuildExistSequenceQuerySqlText(System.Text.StringBuilder,Terrasoft.Core.DB.Sequence)">
            <summary>
            Builds SQL text for checking existence sequence in DB. <paramref name="sb"/>.
            </summary>
            <param name="sb">Builder for sql text string.</param>
            <param name="sequence">Sequence object.</param>
        </member>
        <member name="M:Terrasoft.DB.Oracle.OracleEngine.BuildDropSequenceQuerySqlText(System.Text.StringBuilder,Terrasoft.Core.DB.Sequence)">
            <summary>
            Builds SQL text for droping sequence from DB. <paramref name="sb"/>.
            </summary>
            <param name="sb">Builder for sql text string.</param>
            <param name="sequence">Sequence object.</param>
        </member>
        <member name="M:Terrasoft.DB.Oracle.OracleEngine.NeedCastOrderedTextColumn(Terrasoft.Core.DataValueType)">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.DB.Oracle.OracleEngine.GetColumnsQuerySqlText(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.DB.Oracle.OracleEngine.GetIndexesQuerySqlText">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.DB.Oracle.OracleEngine.GetColumnDefValue(Terrasoft.Core.Entities.EntitySchemaColumn,System.Boolean)">
            <summary>
            Returns SQL text for default value of a column.
            </summary>
            <param name="entitySchemaColumn">Column.</param>
            <param name="isWraped">Flag that indicates whether value in text is wrapped in parentheses.</param>
            <returns>SQL text for default value of a column.</returns>
        </member>
        <member name="M:Terrasoft.DB.Oracle.OracleEngine.GetColumnDefValue(Terrasoft.Core.Entities.EntitySchemaColumn,System.String)">
            <summary>
            Returns SQL text for default value of a column.
            </summary>
            <param name="entitySchemaColumn">Column.</param>
            <param name="dbDefValue">Default value format on database level.</param>
            <returns>SQL text for default value of a column.</returns>
        </member>
        <member name="M:Terrasoft.DB.Oracle.OracleEngine.GetSysSchemaParentsInPackageHierarchySelectSqlText(System.Boolean)">
            <summary>
            Returns SQL text to get schema parents in package hierarchy.
            </summary>
            <param name="usePackageHierarchy">Indicates wether to use package hierarchy or not.</param>
            <returns>SQL text to get schema parents in package hierarchy.</returns>
        </member>
        <member name="M:Terrasoft.DB.Oracle.OracleEngine.IsTextDataValueType(Terrasoft.Core.DB.DbStructureReader.DbColumnDto)">
            <inheritdoc cref="T:Terrasoft.Core.DB.DbStructureReader.IDbDataValueTypeEngine"/>
        </member>
        <member name="M:Terrasoft.DB.Oracle.OracleEngine.IsDbObjectNameDataValueType(Terrasoft.Core.DB.DbStructureReader.DbColumnDto)">
            <inheritdoc cref="T:Terrasoft.Core.DB.DbStructureReader.IDbDataValueTypeEngine"/>
        </member>
        <member name="M:Terrasoft.DB.Oracle.OracleEngine.IsIntegerDataValueType(Terrasoft.Core.DB.DbStructureReader.DbColumnDto)">
            <inheritdoc cref="T:Terrasoft.Core.DB.DbStructureReader.IDbDataValueTypeEngine"/>
        </member>
        <member name="M:Terrasoft.DB.Oracle.OracleEngine.IsFloatDataValueType(Terrasoft.Core.DB.DbStructureReader.DbColumnDto)">
            <inheritdoc cref="T:Terrasoft.Core.DB.DbStructureReader.IDbDataValueTypeEngine"/>
        </member>
        <member name="M:Terrasoft.DB.Oracle.OracleEngine.IsBooleanDataValueType(Terrasoft.Core.DB.DbStructureReader.DbColumnDto)">
            <inheritdoc cref="T:Terrasoft.Core.DB.DbStructureReader.IDbDataValueTypeEngine"/>
        </member>
        <member name="M:Terrasoft.DB.Oracle.OracleEngine.IsDateTimeDataValueType(Terrasoft.Core.DB.DbStructureReader.DbColumnDto)">
            <inheritdoc cref="T:Terrasoft.Core.DB.DbStructureReader.IDbDataValueTypeEngine"/>
        </member>
        <member name="M:Terrasoft.DB.Oracle.OracleEngine.IsGuidDataValueType(Terrasoft.Core.DB.DbStructureReader.DbColumnDto)">
            <inheritdoc cref="T:Terrasoft.Core.DB.DbStructureReader.IDbDataValueTypeEngine"/>
        </member>
        <member name="M:Terrasoft.DB.Oracle.OracleEngine.IsMaxSizeText(Terrasoft.Core.DB.DbStructureReader.DbColumnDto)">
            <inheritdoc cref="T:Terrasoft.Core.DB.DbStructureReader.IDbDataValueTypeEngine"/>
        </member>
        <member name="M:Terrasoft.DB.Oracle.OracleEngine.IsUnicodeText(Terrasoft.Core.DB.DbStructureReader.DbColumnDto)">
            <inheritdoc cref="T:Terrasoft.Core.DB.DbStructureReader.IDbDataValueTypeEngine"/>
        </member>
        <member name="M:Terrasoft.DB.Oracle.OracleEngine.GetDateTimeValueKind(Terrasoft.Core.DB.DbStructureReader.DbColumnDto)">
            <inheritdoc cref="T:Terrasoft.Core.DB.DbStructureReader.IDbDataValueTypeEngine"/>
        </member>
        <member name="M:Terrasoft.DB.Oracle.OracleEngine.GetReadTableCommentsByNamesSqlText(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="T:Terrasoft.Core.DB.IDbCommentEngine"/>
        </member>
        <member name="M:Terrasoft.DB.Oracle.OracleEngine.GetReadColumnCommentsByNamesSqlText(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="T:Terrasoft.Core.DB.IDbCommentEngine"/>
        </member>
        <member name="M:Terrasoft.DB.Oracle.OracleMetaScript.GetForeignKeysDataReader(Terrasoft.Core.DB.DBExecutor,System.String)">
            <summary>
            Returns foreign keys data reader.
            </summary>
            <param name="dbExecutor">Instance of <see cref="T:Terrasoft.Core.DB.DBExecutor"/>. Provides DB query execution.</param>
            <param name="entitySchemaName">Schema name to get foreign keys for.</param>
            <returns><see cref="T:System.Data.IDataReader"/>.</returns>
        </member>
        <member name="M:Terrasoft.DB.Oracle.OracleMetaScript.GetIsDBLevelRequirementTypeColumn(Terrasoft.Core.Entities.EntitySchema,Terrasoft.Core.Entities.EntitySchemaColumn)">
            <summary>
            Determines if column value is required on database level.
            </summary>
            <param name="entitySchema">Schema.</param>
            <param name="entitySchemaColumn">Column in schema.</param>
            <returns>Value that indicates whether column value is required on database level.</returns>
        </member>
        <member name="M:Terrasoft.DB.Oracle.OracleMetaScript.GetIsDefValueTypeColumn(Terrasoft.Core.Entities.EntitySchema,Terrasoft.Core.Entities.EntitySchemaColumn)">
            <summary>
            Determines if column is of type that requires default value.
            </summary>
            <param name="entitySchema">Schema.</param>
            <param name="entitySchemaColumn">Column in schema.</param>
            <returns>Value that indicates whether column is of type that requires default value.</returns>
        </member>
        <member name="M:Terrasoft.DB.Oracle.OracleMetaScript.GetIsForeignKeyCascade(System.Data.IDataReader)">
            <summary>
            Determines whether foreign key is cascade.
            </summary>
            <param name="dataReader">>Instance of <see cref="T:Terrasoft.Core.DataReader"/> to read property.</param>
            <returns><c>true</c> if foreign key is cascade. Otherwise returns <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.DB.Oracle.OracleMetaScript.GetIsIndexUnique(System.Data.IDataReader)">
            <summary>
            Determines whether index is unique.
            </summary>
            <param name="dataReader">>Instance of <see cref="T:Terrasoft.Core.DataReader"/> to read property.</param>
            <returns><c>true</c> if index is unique. Otherwise returns <c>false</c>.</returns>
        </member>
    </members>
</doc>

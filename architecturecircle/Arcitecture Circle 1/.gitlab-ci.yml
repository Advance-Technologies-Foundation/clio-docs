stages:
  - sonar
  - create archive
  - deploy

variables:
  GIT_DEPTH: 0
  GIT_SUBMODULE_STRATEGY: none

sonar-analysis:
  stage: sonar
  tags:
    - windows
  dependencies: [ ]
  only:
    - master
    - merge_requests
  cache:
  script:
    - $env:CoreLibPath = '..\..\..\.application\net-framework\core-bin'
    - $env:TestCoreLibPath = '..\..\.application\net-framework\core-bin'
    - $env:RelativePkgFolderPath = '..\..\..\.application\net-framework\packages'
    - $env:CoreTargetFramework = 'net472'
    - dotnet sonarscanner begin `
        /k:$CI_PROJECT_NAME `
        /d:sonar.host.url=$SONAR_HOST_URL `
        /d:sonar.login=$SONAR_TOKEN `
        /d:sonar.cs.opencover.reportsPaths=".\tests\Results\AtfRecordBoost-coverage.opencover.xml" `
        /d:sonar.test.exclusions="tests/AtfRecordBoost/*," `
        /d:sonar.coverage.exclusions="**/Autogenerated/Src/**, **/packages/AtfRecordBoost/Files/cs/FileParser/ParserYaml.cs, **/packages/AtfRecordBoost/Files/cs/EntityBooster.cs" `
        /d:sonar.exclusions="**/Autogenerated/**/*" `
        /d:sonar.sourceEncoding=UTF-8 `
        /d:sonar.qualitygate.wait=true `
        /d:sonar.qualitygate.timeout=1000;
    - dotnet build-server shutdown;
    - dotnet test --configuration Release `
        .\tests\AtfRecordBoost\AtfRecordBoost.Tests.csproj `
        /p:CollectCoverage=true `
        /p:CoverletOutputFormat=opencover `
        /p:Exclude="[Terrasoft*]*" `
        /p:CoverletOutput=..\Results\AtfRecordBoost-coverage.opencover.xml;
    - dotnet sonarscanner end /d:sonar.login=$SONAR_TOKEN;
  coverage: '/^.*Total.*\d+.\d+\%/'
  
create-archive:
  stage: create archive
  tags:
    - windows
  dependencies: [ ]
  needs:
    - job: sonar-analysis
      artifacts: false
  only:
    - master
    - merge_requests
  variables:
    GIT_STRATEGY: clone
    GIT_SUBMODULE_STRATEGY: normal
  script:
    - |
      $PACKAGE_STORE_PATH = "C:\PackageStore"
      $BRANCH_NAME = dotnet gitversion /showVariable EscapedBranchName
      $APP_VERSION = dotnet gitversion /output json /showvariable MajorMinorPatch;
      $COMMIT_NUMBER = dotnet gitversion /showVariable CommitsSinceVersionSource
      $FROM_FILE_NAME = "$($CI_PROJECT_NAME)_$($APP_VERSION).zip";
      $TO_FILE_NAME = "$($CI_PROJECT_NAME)_$($APP_VERSION)_$($COMMIT_NUMBER).zip";
      
      $env:CoreLibPath = '..\..\..\.application\net-framework\core-bin'
      $env:TestCoreLibPath = '..\..\.application\net-framework\core-bin'
      $env:RelativePkgFolderPath = '..\..\..\.application\net-framework\packages'
      $env:CoreTargetFramework = 'net472'
      $env:CreatioVersion='8.1.3'
      dotnet build-server shutdown;
      dotnet build .solution\CreatioPackages.sln --configuration Release --no-incremental;

      $env:CoreLibPath = '..\..\..\.application\net-core\core-bin'
      $env:TestCoreLibPath = '..\..\.application\net-core\core-bin'
      $env:RelativePkgFolderPath = '..\..\..\.application\net-core\packages'
      $env:CoreTargetFramework = 'netstandard2.0'
      dotnet build-server shutdown;
      dotnet build .solution\CreatioPackages.sln --configuration Release --no-incremental;


      C:\clio\clio.exe publish-app --app-name $CI_PROJECT_NAME --app-version $APP_VERSION --app-hub .\builds\ --repo-path .;
      $FROM_ZIP_PATH = ".\builds\$($CI_PROJECT_NAME)\$($APP_VERSION)\$($FROM_FILE_NAME)";
      $TO_ZIP_PATH = "$($PACKAGE_STORE_PATH)\$($CI_PROJECT_NAME)\$($BRANCH_NAME)\$($APP_VERSION)\$($TO_FILE_NAME)";
      if(!(Test-Path -Path "$($PACKAGE_STORE_PATH)\$($CI_PROJECT_NAME)\$($BRANCH_NAME)\$($APP_VERSION)")){
        New-Item -ItemType Directory -Force -Path "$($PACKAGE_STORE_PATH)\$($CI_PROJECT_NAME)\$($BRANCH_NAME)\$($APP_VERSION)";
      }
      Copy-Item -Path $FROM_ZIP_PATH -Destination $TO_ZIP_PATH -Force -Recurse;
      Write-Host "Archive created at: $TO_ZIP_PATH";
      Copy-Item -Path $FROM_ZIP_PATH -Destination "AtfRecordBoost-app_$($CI_JOB_ID).zip" -Force -Recurse;
  artifacts:
    expire_in: 1 day
    name: AtfRecordBoost-app_$($CI_JOB_ID)
    paths:
      - AtfRecordBoost-app_$($CI_JOB_ID).zip


deploy stage net472:
  stage: deploy
  dependencies: [ ]
  needs:
    - job: create-archive
      artifacts: false
  tags:
    - windows
  only:
    - master
    - merge_requests
  variables:
    #  Don't need to clone/fetch the repository, we already have the artifact in th PackageStore
    GIT_STRATEGY: none
    GIT_SUBMODULE_STRATEGY: normal
    URL: $STAGE_NET472_URL
    LOGIN: $STAGE_NET472_LOGIN
    PWD: $STAGE_NET472_PWD
    IS_NET_CORE: $STAGE_NET472_IS_NET_CORE
  cache:
  resource_group: DeployStaging
  script:
    - |
      $PACKAGE_STORE_PATH = "C:\PackageStore"
      $BRANCH_NAME = dotnet gitversion /showVariable EscapedBranchName
      $APP_VERSION = dotnet gitversion /output json /showvariable MajorMinorPatch;
      $COMMIT_NUMBER = dotnet gitversion /showVariable CommitsSinceVersionSource
      $TO_FILE_NAME = "$($CI_PROJECT_NAME)_$($APP_VERSION)_$($COMMIT_NUMBER).zip";
      $TO_ZIP_PATH = "$($PACKAGE_STORE_PATH)\$($CI_PROJECT_NAME)\$($BRANCH_NAME)\$($APP_VERSION)\$($TO_FILE_NAME)";
      C:\clio\clio.exe install-application $TO_ZIP_PATH -l $LOGIN -p $PWD -u $URL -i $IS_NET_CORE;
      C:\clio\clio.exe flushdb -l $LOGIN -p $PWD -u $URL -i $IS_NET_CORE;
      C:\clio\clio.exe restart -l $LOGIN -p $PWD -u $URL -i $IS_NET_CORE;

deploy stage NET6:
  stage: deploy
  dependencies: [ ]
  needs:
    - job: create-archive
      artifacts: false
  tags:
    - windows
  only:
    - master
    - merge_requests
  variables:
    GIT_STRATEGY: none
    GIT_SUBMODULE_STRATEGY: normal
    URL: $STAGE_NET6_URL
    LOGIN: $STAGE_NET6_LOGIN
    PWD: $STAGE_NET6_PWD
    IS_NET_CORE: $STAGE_NET6_IS_NET_CORE
  cache:
  resource_group: DeployStaging
  script:
    - |
      $PACKAGE_STORE_PATH = "C:\PackageStore"
      $BRANCH_NAME = dotnet gitversion /showVariable EscapedBranchName
      $APP_VERSION = dotnet gitversion /output json /showvariable MajorMinorPatch;
      $COMMIT_NUMBER = dotnet gitversion /showVariable CommitsSinceVersionSource
      $TO_FILE_NAME = "$($CI_PROJECT_NAME)_$($APP_VERSION)_$($COMMIT_NUMBER).zip";
      $TO_ZIP_PATH = "$($PACKAGE_STORE_PATH)\$($CI_PROJECT_NAME)\$($BRANCH_NAME)\$($APP_VERSION)\$($TO_FILE_NAME)";
      C:\clio\clio.exe install-application $TO_ZIP_PATH -l $LOGIN -p $PWD -u $URL -i $IS_NET_CORE;
      C:\clio\clio.exe flushdb -l $LOGIN -p $PWD -u $URL -i $IS_NET_CORE;
      C:\clio\clio.exe restart -l $LOGIN -p $PWD -u $URL -i $IS_NET_CORE;
